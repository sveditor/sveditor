+----------------------------------------------------------------------------------
| Symbol table dump
+----------------------------------------------------------------------------------
|  uvm_pkg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(PKG)
|  uvm_pkg::get_t
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::get_t::name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::get_t::rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::get_t::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::get_t::t
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_convert2string_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_resource_convert2string_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_convert2string_converter::m_singleton
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_convert2string_converter::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_convert2string_converter::register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_resource_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_resource_default_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converter::m_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converter::m_singleton
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converter::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converter::register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converters
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_resource_default_converters::m_singleton
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converters::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_default_converters::register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_sprint_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_resource_sprint_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_sprint_converter::m_singleton
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_sprint_converter::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_resource_sprint_converter::register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_waiter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::m_uvm_waiter::field_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_waiter::inst_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_waiter::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::m_uvm_waiter::trigger
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::sev_id_struct
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::sev_id_struct::id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::sev_id_struct::id_specified
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::sev_id_struct::is_on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::sev_id_struct::sev
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::sev_id_struct::sev_specified
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_agent::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent::get_is_active
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent::is_active
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_agent::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_algorithmic_comparator::after_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::before_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::connect_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::m_transformer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_algorithmic_comparator::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_export
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_analysis_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_export::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_export::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_analysis_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_imp::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_port
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_analysis_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_analysis_port::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_barrier::at_threshold
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::auto_reset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::cancel
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::get_num_waiters
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::get_threshold
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::m_event
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::m_trigger
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::num_waiters
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::set_auto_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::set_threshold
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::threshold
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_barrier::wait_for
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bit_rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_bit_rsrc::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bit_rsrc::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bit_rsrc::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bit_rsrc::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_peek_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_peek_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_peek_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_peek_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_get_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_get_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_master_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_master_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_master_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_master_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_peek_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_put_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_put_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_put_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_put_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_slave_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_slave_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_slave_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_slave_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_transport_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_export::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_transport_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_imp::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_blocking_transport_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_blocking_transport_port::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bottomup_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_bottomup_phase::execute
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bottomup_phase::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_bottomup_phase::traverse
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_build_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_build_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_built_in_clone::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_built_in_comp::comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_built_in_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_built_in_pair::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::first
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::second
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_built_in_pair::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_byte_rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_byte_rsrc::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_byte_rsrc::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_byte_rsrc::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_byte_rsrc::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_callback::callback_mode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::get_type_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::is_enabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::m_enabled
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::reporter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_callback_iter::first
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::get_cb
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::last
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::m_cb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::m_i
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::m_obj
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::next
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callback_iter::prev
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_callbacks::add
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::add_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::delete
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::delete_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::display
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::get_first
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::get_last
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::get_next
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::get_prev
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_base_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_cb_typeid
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_cb_typename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_get_q
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_is_for_me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_is_registered
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_register_pair
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_registered
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_typeid
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::m_typename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks::reporter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_callbacks_base::check_registration
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_add_tw_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_am_i_a
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_b_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_delete_tw_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_derived_types
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_get_tw_cb_q
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_initialize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_is_for_me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_is_registered
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_super_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_this_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_base::m_tracing
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_callbacks_objection::all_dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_objection::dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_objection::m_register_cb_uvm_objection_callback
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_objection::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_callbacks_objection::raised
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_check_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_check_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_class_clone::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_class_comp::comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_class_converter::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_class_pair::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::first
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::second
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_class_pair::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmd_line_verb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_cmd_line_verb::comp_path
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmd_line_verb::exec_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmd_line_verb::id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmd_line_verb::verb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_cmdline_processor::get_arg_matches
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_arg_value
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_arg_values
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_args
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_inst
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_plusargs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_tool_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_tool_version
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::get_uvm_args
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::m_argv
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::m_convert_verb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::m_plus_argv
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::m_uvm_argv
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_cmdline_processor::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_comparer::abstract
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::check_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_field_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_field_real
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::compare_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::init
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::miscompares
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::physical
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::policy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::print_msg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::print_msg_object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::print_rollup
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::result
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::sev
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::show_max
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_comparer::verbosity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_component::accept_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::all_dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::apply_config_settings
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::begin_child_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::begin_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::build
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::build_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::check_config_usage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::check_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::connect_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::create_component
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::create_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::define_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_accept_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_begin_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_end_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_flush
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_kill_all
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::do_resolve_bindings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::enable_stop_interrupt
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::end_of_elaboration
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::end_of_elaboration_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::end_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::event_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::extract
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::extract_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::final_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::flush
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_child
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_children
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_config_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_config_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_config_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_first_child
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_next_child
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_num_children
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::has_child
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::kill
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::lookup
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_add_child
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_apply_verbosity_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_begin_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_build_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_children
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_children_by_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_config_set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_current_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_do_pre_abort
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_domain
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_extract_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_phase_imps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_phase_process
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_phasing_active
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_set_cl_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_set_cl_msg_args
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_set_cl_sev
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_set_cl_verb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_set_full_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_stream_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_time_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_tr_h
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::m_verbosity_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::massage_scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::phase_ended
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::phase_ready_to_end
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::phase_started
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::post_configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::post_main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::post_reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::post_shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::pre_abort
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::pre_configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::pre_main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::pre_reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::pre_shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_config
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_config_matches
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_config_settings
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_config_with_audit
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_enabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::print_override_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::raised
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::record_error_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::record_event_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::recorder
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::recording_detail
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::report
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::report_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::resolve_bindings
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::resume
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::run
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::run_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_config_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_config_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_config_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_inst_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_inst_override_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_int_local
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_phase_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_default_file_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_id_action_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_id_file_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_id_verbosity_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_severity_action_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_severity_file_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_severity_id_action_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_severity_id_file_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_severity_id_verbosity_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_report_verbosity_level_hier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_type_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::set_type_override_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::start_of_simulation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::start_of_simulation_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::status
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::stop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::stop_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::suspend
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_component_registry::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::create_component
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::set_inst_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::set_type_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_component_registry::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_config_db::exists
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::get
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::m_get_resource_match
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::m_rsc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::m_waiters
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db::wait_modified
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_config_db_options::init
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options::is_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options::ready
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options::tracing
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options::turn_off_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_db_options::turn_on_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_object_wrapper
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_config_object_wrapper::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_config_object_wrapper::obj
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_configure_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_configure_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_connect_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_connect_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_copy_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_copy_map::clear
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_copy_map::delete
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_copy_map::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_copy_map::m_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_copy_map::set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_derived_callbacks::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks::m_d_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks::m_s_typeid
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks::m_super_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks::m_user_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_derived_callbacks::register_super_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_domain::add_uvm_phases
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::get_common_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::get_domains
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::get_uvm_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::get_uvm_schedule
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::jump
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::jump_all
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::m_common_domain
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::m_domains
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::m_uvm_domain
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::m_uvm_schedule
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_domain::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_driver::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::rsp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::rsp_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::seq_item_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::seq_item_prod_if
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_driver::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_end_of_elaboration_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_end_of_elaboration_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_env
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_env::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_env::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_env::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_event::add_callback
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::callbacks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::cancel
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::delete_callback
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::get_num_waiters
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::get_trigger_data
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::get_trigger_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::is_off
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::is_on
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::m_event
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::num_waiters
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::trigger
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::trigger_data
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::trigger_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_off
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_on
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_ptrigger
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_ptrigger_data
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_trigger
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event::wait_trigger_data
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event_callback
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_event_callback::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event_callback::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event_callback::post_trigger
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_event_callback::pre_trigger
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_exhaustive_sequence::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::do_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::l_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::l_exhaustive_seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::l_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::m_success
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::max_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_exhaustive_sequence::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_extract_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_extract_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_factory::check_inst_override_exists
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::create_component_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::create_component_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::create_object_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::create_object_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::debug_create_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::debug_create_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::find_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::find_override_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::find_override_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_debug_create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_debug_display
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_debug_pass
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_has_wildcard
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_inst_override_name_queues
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_inst_override_queues
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_lookup_strs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_override_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_type_names
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_type_overrides
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_types
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::m_wildcard_inst_overrides
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::print
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::register
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::set_inst_override_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::set_inst_override_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::set_type_override_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory::set_type_override_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_factory_override::full_inst_path
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::orig_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::orig_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::ovrd_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::ovrd_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_override::selected
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_factory_queue_class
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_factory_queue_class::queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_final_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_final_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_peek_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_peek_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_peek_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_peek_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_get_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_get_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_hdl_path_concat
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_hdl_path_concat::add_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_hdl_path_concat::add_slice
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_hdl_path_concat::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_hdl_path_concat::slices
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_heartbeat::add
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_added
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_cb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_cntxt
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_disable_cb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_enable_cb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_event
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_hb_process
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_hblist
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_mode
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_objection
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_start_hb_process
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_started
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::m_stop_event
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::remove
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::set_heartbeat
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::set_mode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::start
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat::stop
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_heartbeat_callback::cnt
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::dropped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::last_trigger
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::objects_triggered
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::raised
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::reset_counts
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_heartbeat_callback::target
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_in_order_built_in_comparator::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_built_in_comparator::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_in_order_class_comparator::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_class_comparator::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_in_order_comparator::after_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::before_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::connect_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::flush
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::m_after_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::m_before_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::m_matches
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::m_mismatches
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::pair_ap
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::run_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_in_order_comparator::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_int_rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_int_rsrc::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_int_rsrc::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_int_rsrc::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_int_rsrc::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_line_printer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_line_printer::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_main_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_main_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_master_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_master_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_master_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_master_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem::add_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::add_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::add_hdl_path_slice
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::add_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::backdoor_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::backdoor_read_func
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::backdoor_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::build_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::burst_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::burst_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::clear_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::do_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_address
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_addresses
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_default_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_frontdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_full_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_hdl_path_kinds
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_local_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_max_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_n_bits
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_n_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_rights
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_vfield_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_virtual_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_virtual_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_vreg_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::get_vreg_by_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::has_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::has_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::is_in_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_access
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_backdoor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_cover_on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_has_cover
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_hdl_paths_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_is_powered_down
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_locked
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_maps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_n_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_read_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_register_cb_uvm_reg_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_vregs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::m_write_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::mam
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::sample
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::set_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::set_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::set_frontdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::set_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::set_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::Xadd_vregX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::Xcheck_accessX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::Xdelete_vregX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::Xlock_modelX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem::XsampleX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::do_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::mem_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_mam::cfg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::convert2string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::default_alloc
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::for_each
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::for_each_idx
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::get_memory
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::in_use
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::memory
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::reconfigure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::release_all_regions
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::release_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::request_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam::reserve_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_cfg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_mam_cfg::end_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_cfg::locality
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_cfg::mode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_cfg::n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_cfg::start_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_policy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_mam_policy::in_use
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_policy::len
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_policy::max_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_policy::min_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_mam_policy::start_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_region::burst_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::burst_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_end_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_len
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_memory
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_start_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::get_virtual_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::len
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::n_bytes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::release_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::Xend_offsetX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::Xstart_offsetX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_region::XvregX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_shared_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_shared_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_single_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_single_walk_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_single_walk_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_mem_walk_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::do_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::mem_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_mem_walk_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_monitor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_monitor::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_monitor::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_monitor::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_peek_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_peek_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_peek_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_get_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_get_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_master_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_master_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_master_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_master_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_peek_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_peek_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_peek_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_peek_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_put_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_put_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_put_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_put_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_slave_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_slave_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_slave_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_slave_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_transport_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_export::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_transport_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_imp::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_nonblocking_transport_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_port::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_nonblocking_transport_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_obj_rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_obj_rsrc::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_obj_rsrc::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_obj_rsrc::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_object::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::__m_uvm_status_container
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::clone
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::compare
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::convert2string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::copy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::create
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_compare
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_copy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_pack
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_print
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_record
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::do_unpack
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_inst_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_inst_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_object_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::get_type_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_get_report_object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_inst_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_inst_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_leaf_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_unpack_post
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::m_unpack_pre
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::pack
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::pack_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::pack_ints
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::print
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::record
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::reseed
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::set_int_local
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::set_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::set_object_local
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::set_string_local
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::sprint
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::unpack
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::unpack_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::unpack_ints
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object::use_uvm_seeding
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_object_registry::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::create_object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::set_inst_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::set_type_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_registry::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_object_string_pool::delete
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::get_global
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::get_global_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::m_global_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_string_pool::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_wrapper
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_object_wrapper::create_component
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_wrapper::create_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_object_wrapper::get_type_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_objection::all_dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::clear
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::display_objections
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::drop_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_drain_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_objection_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_objection_total
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_objectors
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_background_proc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_cleared
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_context_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_display_objections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_drain_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_draining
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_drop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_events
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_execute_scheduled_forks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_forked_drop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_get_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_hier_mode
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_init_objections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_objections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_propagate
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_raise
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_report
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_scheduled_list
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_set_hier_mode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_source_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_top
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_top_all_dropped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_total_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::m_trace_mode
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::raise_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::raised
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::set_drain_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::top
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::trace_mode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::wait_for
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection::wait_for_total_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_callback
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_objection_callback::all_dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_callback::dropped
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_callback::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_callback::raised
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_context_object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_objection_context_object::count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_context_object::description
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_context_object::obj
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_context_object::source_obj
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_events
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_objection_events::all_dropped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_events::dropped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_events::raised
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_objection_events::waiters
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_packer::abstract
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::big_endian
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::bitstream
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::byte_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::enough_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::fabitstream
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_bit
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_byte
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_bytes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_int
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_ints
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_packed_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::get_packed_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::index_error
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::is_null
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::m_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::m_packed_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::nopack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_field_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_real
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::pack_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::physical
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::policy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::put_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::put_bytes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::put_ints
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::reset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::reverse_order
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::set_packed_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_field_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_object_ext
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_real
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::unpack_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::use_metadata
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_packer::word_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_peek_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_peek_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_peek_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_peek_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_phase::add
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::clear
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::clear_successors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::drop_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::exec_func
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::exec_task
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::execute
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::execute_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::find
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::find_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_begin_node
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_domain
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_domain_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_end_node
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_jump_target
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_phase_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_ready_to_end_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_run_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_schedule
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_schedule_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::get_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::is
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::is_after
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::is_before
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::is_domain
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::jump
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::jump_all
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::kill
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::kill_successors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_aa2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_end_node
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_find_predecessor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_find_predecessor_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_find_successor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_find_successor_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_get_transitive_children
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_jump_bkwd
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_jump_fwd
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_jump_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_num_procs_not_yet_returned
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_phase_hopper
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_phase_proc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_phase_trace
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_phase_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_predecessors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_print_successors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_print_termination_state
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_ready_to_end_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_run_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_run_phases
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_state
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_successors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_sync
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_terminate_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_use_ovm_run_semantic
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::m_wait_for_pred
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::max_ready_to_end_iter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::phase_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::raise_objection
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::sync
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::traverse
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::unsync
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_phase::wait_for_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_pool::add
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::delete
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::exists
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::first
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::get_global
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::get_global_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::last
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::m_global_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::next
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::num
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::prev
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pool::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_port_base::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::debug_connected_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::debug_provided_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_connected_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_full_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_if
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_provided_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::is_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::is_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::is_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::is_unbounded
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_add_list
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_check_relationship
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_comp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_def_index
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_get_if_mask
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_if
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_if_mask
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_imp_list
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_min_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_port_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_provided_by
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_provided_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::m_resolved
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::min_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::resolve_bindings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::set_default_index
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::set_if
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_base::size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_port_component::get_connected_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::get_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::get_provided_to
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::is_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::is_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::is_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::m_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component::resolve_bindings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_port_component_base::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::do_task_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::get_connected_to
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::get_provided_to
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::is_export
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::is_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::is_port
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_port_component_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_post_configure_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_configure_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_post_main_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_main_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_post_reset_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_reset_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_post_shutdown_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_post_shutdown_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_pre_configure_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_configure_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_pre_main_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_main_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_pre_reset_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_reset_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_pre_shutdown_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_pre_shutdown_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_predict_s
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_predict_s::addr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_predict_s::reg_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_printer::adjust_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::emit
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::format_footer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::format_header
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::format_row
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::index_string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::istop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::knobs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::m_array_stack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::m_rows
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::m_scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::m_string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_array_footer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_array_header
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_array_range
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_field
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_generic
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_int
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_object_header
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_real
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer::print_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_printer_knobs::begin_elements
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::bin_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::dec_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::default_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::end_elements
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::footer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::get_radix_str
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::header
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::hex_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::identifier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::indent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::max_width
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::mcd
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::name_width
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::oct_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::prefix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::reference
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::separator
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::show_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::show_root
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::size_width
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::sprint
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::truncation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::type_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::type_width
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::unsigned_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_printer_knobs::value_width
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_push_driver::check_port_connections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::end_of_elaboration_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::req_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::rsp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::rsp_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_driver::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_push_sequencer::m_find_number_driver_connections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_sequencer::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_sequencer::req_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_push_sequencer::run_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_put_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_put_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_put_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_put_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_queue::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::delete
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::get_global
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::get_global_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::insert
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::m_global_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::pop_back
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::pop_front
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::push_back
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::push_front
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_queue::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_random_sequence::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::do_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::get_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::l_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::l_exhaustive_seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::l_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::m_success
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::max_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_sequence::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_random_stimulus::blocking_put_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::generate_stimulus
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::m_stop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::stop_stimulus_generation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_random_stimulus::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_recorder::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::abstract
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::begin_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::check_handle_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::create_stream
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::default_radix
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::end_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::filename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::free_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::get_type_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::identifier
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::link_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::m_handles
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::m_set_attribute
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::open_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::physical
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::policy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_field_real
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_generic
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::record_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::recording_depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::set_attribute
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::tr_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_recorder::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg::add_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::add_field
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::add_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::add_hdl_path_slice
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::add_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::backdoor_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::backdoor_read_func
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::backdoor_watch
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::backdoor_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::build_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::clear_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_predict
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::do_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_address
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_addresses
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_default_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_field_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_frontdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_full_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_hdl_path_kinds
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_local_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_max_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_mirrored_value
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_n_bits
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_n_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_regfile
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::get_rights
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::has_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::has_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::has_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::include_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::is_busy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::is_in_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_atomic
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_backdoor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_cover_on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_fields
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_has_cover
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_hdl_paths_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_is_busy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_is_locked_by_field
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_locked
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_maps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_n_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_n_used_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_process
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_read_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_regfile_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_register_cb_uvm_reg_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_update_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::m_write_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::mirror
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::needs_update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::sample
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::sample_values
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_frontdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::set_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::XatomicX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::Xcheck_accessX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::Xget_fields_accessX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::Xis_locked_by_fieldX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::Xlock_modelX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::XreadX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::XsampleX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg::Xset_busyX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::do_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::reg_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_adapter::bus2reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::get_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::m_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::m_set_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::parent_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::provides_responses
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::reg2bus
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_adapter::supports_byte_enable
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_backdoor::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::do_post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::do_post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::do_pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::do_pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::has_update_threads
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::is_auto_updated
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::kill_update_thread
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::m_register_cb_uvm_reg_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::m_update_thread
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::read_func
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::start_update_thread
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::wait_for_change
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_backdoor::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_bit_bash_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::do_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::reg_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_bit_bash_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_block::add_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_mem
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_reg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::add_vreg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::backdoor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::blks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::build_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::check_data_width
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::clear_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::cover_on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::create_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::default_hdl_path
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::default_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::default_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::find_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::find_blocks
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_block_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_blocks
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_default_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_default_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_default_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_field_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_full_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_map_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_mem_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_memories
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_reg_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_root_blocks
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_vfield_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_virtual_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_virtual_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::get_vreg_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::has_cover
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::has_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::has_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::hdl_paths_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::is_hdl_path_root
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::is_locked
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::lock_model
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::locked
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::m_roots
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::maps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::mems
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::mirror
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::needs_update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::read_mem_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::read_reg_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::readmemh
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::regs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::root_hdl_paths
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::sample
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::sample_values
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_coverage
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_default_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_default_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_hdl_path_root
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::set_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::vregs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::write_mem_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::write_reg_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::writememh
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::Xinit_address_mapsX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_block::XsampleX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_cbs::decode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::encode
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::post_predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_cbs::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_field::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::define_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_predict
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::do_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_compare
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_lsb_pos
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_max_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_mirrored_value
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_n_bits
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::has_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::is_indv_accessible
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::is_known_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::is_volatile
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_access
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_cover_on
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_desired
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_individually_accessible
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_lsb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_mirrored
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_policy_names
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_predefine_policies
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_predefined
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_read_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_register_cb_uvm_reg_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_reset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_volatile
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_write_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::m_written
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::mirror
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::needs_update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::post_randomize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::pre_randomize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::set_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::set_compare
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::set_reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::set_volatility
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::value
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::Xcheck_accessX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::XpredictX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_field::XupdateX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_fifo::build
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::capacity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::do_predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::fifo
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::get
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::m_set_cnt
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::m_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::post_randomize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::set_compare
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::update
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_fifo::value
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_file::add_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::clear_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::default_hdl_path
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_default_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_full_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::get_regfile
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::has_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::hdl_paths_pool
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::m_rf
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_file::set_default_hdl_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_frontdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_frontdoor::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_frontdoor::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_frontdoor::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_frontdoor::rw_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_frontdoor::sequencer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_hw_reset_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_hw_reset_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_indirect_data::add_field
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::add_frontdoors
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::add_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::build
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::do_predict
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::get_indirect_reg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::get_local_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::m_idx
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::m_tbl
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::mirror
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::needs_update
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::poke
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::update
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_data::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq::m_addr_reg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq::m_data_reg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq::m_idx
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_indirect_ftdr_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_item::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::bd_kind
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::convert2string
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::do_copy
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::element
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::element_kind
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::extension
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::fname
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::kind
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::lineno
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::local_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::prior
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::status
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_item::value
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_map::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::add_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::add_parent_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::add_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::add_submap
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::backdoor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_bus_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_bus_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::do_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_adapter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_addr_unit_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_auto_predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_base_addr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_check_on_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_endian
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_mem_by_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_mem_map_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_memories
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_parent_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_physical_addresses
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_reg_by_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_reg_map_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_root_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_sequencer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_submap_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_submaps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_virtual_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::get_virtual_registers
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_adapter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_auto_predict
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_backdoor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_base_addr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_byte_addressing
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_check_on_read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_endian
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_mems_by_offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_mems_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_n_bytes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_parent_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_parent_maps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_regs_by_offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_regs_by_offset_wo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_regs_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_sequence_wrapper
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_set_mem_offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_set_reg_offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_submap_rights
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_submaps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::m_system_n_bytes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::set_auto_predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::set_base_addr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::set_check_on_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::set_sequencer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::set_submap_offset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::Xget_bus_infoX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::Xinit_address_mapX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map::Xverify_map_configX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_map_info::addr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::frontdoor
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::is_initialized
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::mem_range
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::rights
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_map_info::unmapped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_mem_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::reset_blk
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_mem_built_in_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::tests
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_built_in_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::abstractions
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::check_mem
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::check_reg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::do_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::reset_blk
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_hdl_paths_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::do_block
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::mem_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::reg_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::reset_blk
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_mem_shared_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_predictor::adapter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::bus_in
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::check_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::m_pending
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::pre_predict
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::reg_ap
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_predictor::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_read_only_cbs::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::add
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::m_me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::remove
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_read_only_cbs::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_sequence::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::adapter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::do_reg_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::mirror_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::model
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::parent_select
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::peek_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::peek_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::poke_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::poke_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::read_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::read_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::reg_seqr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::update_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::upstream_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::write_mem
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_sequence::write_reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_shared_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::rg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_shared_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_single_access_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::rg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_access_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::bash_kth_bit
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::rg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_single_bit_bash_seq::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_tlm_adapter::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::bus2reg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::reg2bus
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_tlm_adapter::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reg_write_only_cbs::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::add
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::m_me
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::remove
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reg_write_only_cbs::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_catcher::catch
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::debug_report_catcher
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::DO_NOT_CATCH
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::DO_NOT_MODIFY
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::do_report
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::f_display
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_client
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_context
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_fname
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_line
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_message
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_report_catcher
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_severity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::get_verbosity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::issue
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_caught_error
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_caught_fatal
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_caught_warning
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_client
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_debug_flags
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_demoted_error
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_demoted_fatal
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_demoted_warning
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_file_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_line_number
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_modified_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_modified_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_modified_message
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_modified_severity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_modified_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_orig_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_orig_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_orig_message
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_orig_severity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_orig_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_register_cb_uvm_report_catcher
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::m_set_action_called
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::print_catcher
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::process_all_report_catchers
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::process_report_catcher
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::set_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::set_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::set_message
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::set_severity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::set_verbosity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::summarize_report_catcher
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::uvm_report_error
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::uvm_report_fatal
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::uvm_report_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_catcher::uvm_report_warning
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_global_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_global_server::get_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_global_server::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_global_server::set_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_handler::default_file_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::dump_state
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::format_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::get_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::get_file_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::get_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::get_severity_id_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::get_verbosity_level
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::id_actions
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::id_file_handles
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::id_verbosities
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::initialize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::m_max_verbosity_level
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::m_relnotes_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::report
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::report_header
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::report_relnotes_banner
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::run_hooks
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_default_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_defaults
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_id_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_id_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_id_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_max_quit_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_id_action
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_id_file
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_id_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_id_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_severity_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::set_verbosity_level
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::sev_id_overrides
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::sev_overrides
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::severity_actions
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::severity_file_handles
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::severity_id_actions
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::severity_id_file_handles
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::severity_id_verbosities
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_handler::summarize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_object::die
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::dump_report_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::get_report_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::get_report_file_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::get_report_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::get_report_server
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::get_report_verbosity_level
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::m_get_report_object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::m_rh
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_error_hook
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_fatal_hook
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_header
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_hook
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_info_hook
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_summarize
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::report_warning_hook
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::reset_report_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_default_file
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_id_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_id_file
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_id_verbosity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_max_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_file
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_id_action
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_id_file
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_id_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_id_verbosity
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_severity_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::set_report_verbosity_level
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_get_max_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_report_enabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_report_error
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_report_fatal
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_report_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_object::uvm_report_warning
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_report_server::compose_message
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::copy_id_counts
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::copy_severity_counts
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::dump_server_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::enable_report_id_count_summary
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::f_display
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_id_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_max_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_server
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_severity_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::id_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::incr_id_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::incr_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::incr_severity_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::is_quit_count_reached
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::m_global_report_server
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::m_max_quit_overridable
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::max_quit_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::process_report
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::quit_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::report
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::reset_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::reset_severity_counts
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::set_id_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::set_max_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::set_quit_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::set_server
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::set_severity_count
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::severity_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_report_server::summarize
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_reset_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_reset_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::get_highest_precedence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::get_type_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::m_get_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::m_r2s
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::m_set_converter
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::my_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::read
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::set_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::set_priority
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::val
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource_base::access
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::default_precedence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::do_print
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::get_scope
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::get_type_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::init_access_record
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::is_read_only
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::m_is_regex_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::match_scope
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::modified
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::precedence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::print_accessors
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::read_only
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::record_read_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::record_write_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::set_priority
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::set_read_only
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::set_read_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::set_scope
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_base::wait_modified
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource_db::dump
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::get_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::get_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::m_show_msg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::read_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::read_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set_anonymous
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set_default
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set_override_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::set_override_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::write_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db::write_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource_db_options::init
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options::is_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options::ready
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options::tracing
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options::turn_off_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_db_options::turn_on_tracing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_options
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource_options::auditing
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_options::is_auditing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_options::turn_off_auditing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_options::turn_on_auditing
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_resource_pool::dump
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::dump_get_records
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::find_unused_resources
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::get
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::get_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::get_by_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::get_highest_precedence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::get_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::lookup_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::lookup_regex
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::lookup_regex_names
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::lookup_scope
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::lookup_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::m_has_wildcard_names
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::print_resources
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::push_get_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::rp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::rtab
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_name_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_priority
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_priority_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_priority_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_priority_type
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::set_type_override
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::sort_by_precedence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::spell_check
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_pool::ttab
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_resource_types
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_root
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_root::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::clp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::enable_print_topology
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::find
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::find_all
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::finish_on_completion
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_add_child
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_check_verbosity
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_config_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_dump_args
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_factory_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_max_quit_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_timeout_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_do_verbosity_settings
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_find_all_recurse
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_phase_all_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_process_config
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_process_inst_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::m_process_type_override
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::phase_started
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::phase_timeout
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::print_topology
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::run_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::run_test
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::set_timeout
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::stop_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root::top_levels
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_root_report_handler
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_root_report_handler::report
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_run_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_run_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_scope_stack::depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::down
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::down_element
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::get_arg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::m_arg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::m_stack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::set_arg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::set_arg_element
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::unset_arg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::up
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scope_stack::up_element
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scoreboard
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_scoreboard::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scoreboard::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_scoreboard::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seed_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_seed_map::count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seed_map::seed_table
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_seq_item_pull_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::get_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::has_do_available
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::item_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::try_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_export::wait_for_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_seq_item_pull_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::get_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::has_do_available
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::item_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::try_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_imp::wait_for_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_seq_item_pull_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::get_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::has_do_available
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::item_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::print_enabled
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::try_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_seq_item_pull_port::wait_for_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence::create_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::create_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::get_current_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::get_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::param_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::rsp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence::send_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence_base::body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::clear_response_queue
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::create_and_start_sequence_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::create_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::create_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::create_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::do_kill
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::do_not_randomize
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::do_sequence_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::finish_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_base_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_priority
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_response_queue_depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_response_queue_error_report_disabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_sequence_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_sequence_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::get_use_response_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::grab
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::has_lock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::is_blocked
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::is_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::is_rel_default
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::is_relevant
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::kill
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::lock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_get_sqr_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_kill
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_next_transaction_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_priority
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_sequence_process
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_sequence_state
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_set_sqr_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_sqr_seq_ids
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_tr_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_use_response_handler
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::m_wait_for_grant_semaphore
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::mid_do
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::num_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::post_body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::post_do
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::post_start
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::pre_body
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::pre_do
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::pre_start
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::put_base_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::response_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::response_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::response_queue_depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::response_queue_error_report_disabled
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::send_request
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::set_priority
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::set_response_queue_depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::set_response_queue_error_report_disabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::start
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::start_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::starting_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::ungrab
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::unlock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::use_response_handler
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::wait_for_grant
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::wait_for_item_done
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::wait_for_relevant
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::wait_for_sequence_state
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_base::wait_rel_default
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence_item::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_full_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_parent_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_root_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_root_sequence_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_sequence_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_sequence_path
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_sequencer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::get_use_sequence_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::is_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::issued1
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::issued2
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_client
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_client_str
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_get_client_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_parent_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_rh
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_set_p_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::m_use_sequence_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::print_sequence_info
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_depth
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_id_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_item_context
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_parent_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_sequencer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::set_use_sequence_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::uvm_report_enabled
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::uvm_report_error
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::uvm_report_fatal
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::uvm_report_info
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_item::uvm_report_warning
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence_library::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::add_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::add_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::add_typewide_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::add_typewide_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::execute
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::get_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::init_sequence_library
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_abort
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_add_typewide_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_dyn_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_get_config
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_static_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::m_typewide_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::max_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::min_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::pre_randomize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::remove_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::select_rand
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::select_randc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::select_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::selection_mode
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::seqs_distrib
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::sequence_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::sequences_executed
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence_library_cfg::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::max_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::min_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::selection_mode
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_library_cfg::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequence_request::grant
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::item_priority
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::process_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::request_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequence_request::sequence_ptr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequencer::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::get_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::get_next_item_called
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::item_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::item_done_get_trigger_data
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::item_done_trigger
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::m_find_number_driver_connections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::seq_item_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::sequence_item_requested
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::stop_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer::try_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_analysis_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequencer_analysis_fifo::analysis_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_analysis_fifo::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_analysis_fifo::sequencer_ptr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_analysis_fifo::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequencer_base::add_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::analysis_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::arb_completed
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::arb_sequence_q
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::build
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::current_grabber
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::default_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::execute_item
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::g_request_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::g_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::g_sequencer_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::get_arbitration
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::get_seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::get_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::grab
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::grant_queued_locks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::has_do_available
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::has_lock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::is_blocked
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::is_child
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::is_grabbed
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::kill_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::lock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::lock_list
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_add_builtin_seqs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_arb_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_arbitration
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_choose_next_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_default_seq_set
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_exhaustive_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_find_number_driver_connections
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_find_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_get_seq_item_priority
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_is_relevant_completed
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_lock_arb_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_lock_req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_register_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_select_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_sequence_exiting
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_sequencer_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_set_arbitration_completed
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_simple_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_unlock_req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_unregister_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_update_lists
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_wait_arb_not_equal
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_wait_for_arbitration_completed
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_wait_for_available_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_wait_for_item_sequence_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::m_wait_for_item_transaction_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::max_random_count
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::max_random_depth
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::num_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::reg_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::remove_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::remove_sequence_from_queues
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::run_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::send_request
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::seq_kind
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::sequence_ids
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::set_arbitration
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::set_sequences_queue
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::start_default_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::start_phase_sequence
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::stop_sequences
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::ungrab
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::unlock
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::user_priority_arbitration
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::wait_for_grant
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::wait_for_item_done
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_base::wait_for_sequences
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sequencer_param_base::analysis_write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::connect_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::get_current_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::get_num_last_reqs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::get_num_last_rsps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::get_num_reqs_sent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::get_num_rsps_received
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::last_req
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::last_rsp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_last_req_buffer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_last_req_push_front
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_last_rsp_buffer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_last_rsp_push_front
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_num_last_reqs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_num_last_rsps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_num_reqs_sent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_num_rsps_received
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::m_req_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::num_last_items
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::rsp_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::send_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::set_num_last_reqs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::set_num_last_rsps
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sequencer_param_base::sqr_rsp_analysis_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_shutdown_phase::exec_task
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_shutdown_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_simple_sequence::body
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_simple_sequence::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_slave_export::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_export::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_slave_imp::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::m_req_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::m_rsp_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_imp::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_slave_port::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_slave_port::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_spell_chkr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_spell_chkr::check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_spell_chkr::levenshtein_distance
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_spell_chkr::minimum
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_sqr_if_base::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::get_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::has_do_available
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::item_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::put_response
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::try_next_item
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_sqr_if_base::wait_for_sequences
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_start_of_simulation_phase::exec_func
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_start_of_simulation_phase::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_status_container::array_warning_done
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::bitstream
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::comparer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::cycle_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::do_field_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::element
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::field_array
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::get_full_scope_arg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::get_function_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::intv
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::key
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::m_do_cycle_check
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::m_uvm_cycle_scopes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::object
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::packer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::print_matches
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::printer
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::recorder
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::scope
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::scratch1
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::scratch2
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::status
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::stringv
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_status_container::warning
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_string_rsrc
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_string_rsrc::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_string_rsrc::get_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_string_rsrc::get_by_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_string_rsrc::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_subscriber
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_subscriber::analysis_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_subscriber::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_subscriber::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_table_printer::calculate_max_widths
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::emit
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::m_max_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::m_max_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::m_max_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::m_max_value
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_table_printer::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_task_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_task_phase::execute
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_task_phase::m_traverse
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_task_phase::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_task_phase::traverse
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_test::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_test_done_objection::all_dropped
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::drop_objection
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::force_stop
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_do_stop_all
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_executing_stop_processes
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_forced
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_n_stop_threads
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::m_stop_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::qualify
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::raise_objection
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::stop_request
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_test_done_objection::stop_timeout
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_analysis_fifo
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_analysis_fifo::analysis_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_analysis_fifo::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_analysis_fifo::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_analysis_fifo::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_analysis_fifo::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_initiator_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_initiator_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_initiator_socket::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_initiator_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_initiator_socket_base::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_initiator_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_initiator_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket_base::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_initiator_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket_base::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_passthrough_target_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_target_socket::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_target_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_target_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_export
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_transport_export::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_transport_imp::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_port
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_b_transport_port::b_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_b_transport_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_event
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_event::trigger
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_extension::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::get_type_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::get_type_handle_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::ID
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::m_my_tlm_ext_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_extension_base::create
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension_base::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension_base::get_type_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension_base::get_type_handle_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_extension_base::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_fifo::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::flush
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::is_empty
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::is_full
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::m
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::m_pending_blocked_gets
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::m_size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo::used
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_fifo_base::blocking_get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::blocking_get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::blocking_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::blocking_put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::build_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::flush
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::get_ap
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::is_empty
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::is_full
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::nonblocking_get_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::nonblocking_get_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::nonblocking_peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::nonblocking_put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::ok_to_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::ok_to_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::ok_to_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::peek_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::put_ap
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::put_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_fifo_base::used
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_generic_payload::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::ext_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::i
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_address
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_byte_enable
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_byte_enable_length
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_command
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_data
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_dmi
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_extensions
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_length
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_rand_exts
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_response_status
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::m_streaming_width
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::msg
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::s
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_generic_payload::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_if::b_transport
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if::nb_transport_bw
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if::nb_transport_fw
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_if_base::can_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::can_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::can_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::try_get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::try_peek
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::try_put
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_if_base::write
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_initiator_socket::bw_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_initiator_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket_base::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_initiator_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket::connect
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base::bw_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket::connect
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base::bw_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_target_socket::connect
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket_base
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_target_socket_base::bw_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket_base::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket_base::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_target_socket_base::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_export
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_bw_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_export::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_export::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_bw_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_imp::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_port
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_bw_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_port::nb_transport_bw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_bw_port::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_export
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_fw_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_export::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_imp
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_fw_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_imp::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_port
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_nb_transport_fw_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_port::nb_transport_fw
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_nb_transport_fw_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_get_peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_get_peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_get_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_get_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_put_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_put_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::blocking_slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::connect_phase
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::create_aliased_exports
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::get_peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::get_peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::get_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::get_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::m_request_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::m_response_fifo
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_get_peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_get_peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_get_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_get_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_master_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_put_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_put_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::nonblocking_slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::peek_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::peek_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::put_request_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::put_response_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::request_ap
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::response_ap
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::slave_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_req_rsp_channel::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_time::decr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::get_abstime
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::get_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::get_realtime
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::incr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::m_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::m_res
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::m_resolution
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::m_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::set_abstime
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::set_time_resolution
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_time::to_m_res
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_transport_channel
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tlm_transport_channel::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_transport_channel::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_transport_channel::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tlm_transport_channel::transport_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_topdown_phase
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_topdown_phase::execute
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_topdown_phase::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_topdown_phase::traverse
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_transaction::accept_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::accept_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::begin_child_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::begin_event
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::begin_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::begin_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::disable_recording
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_accept_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_begin_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_end_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::do_record
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::enable_recording
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::end_event
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::end_time
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::end_tr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::events
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_accept_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_begin_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_end_time
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_event_pool
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_initiator
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_tr_handle
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::get_transaction_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::initiator
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::is_active
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::is_recording_enabled
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::m_begin_tr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::m_recorder
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::m_transaction_id
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::record_enable
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::set_initiator
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::set_transaction_id
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::stream_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transaction::tr_handle
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_export
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_transport_export::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_export::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_export::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_export::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_transport_imp::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_imp::m_imp
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_imp::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_imp::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_imp::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_port
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_transport_port::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_port::nb_transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_port::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_transport_port::transport
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tree_printer
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_tree_printer::emit
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tree_printer::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_tree_printer::newline
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_type_utils
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_type_utils::typename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_typed_callbacks::display
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_add_tw_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_am_i_a
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_cb_find
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_cb_find_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_delete_tw_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_get_tw_cb_q
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_initialize
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_t_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_tw_cb_q
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typed_callbacks::m_typename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typeid
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_typeid::get
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typeid::m_b_inst
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typeid_base
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_typeid_base::type_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typeid_base::typeid_map
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_typeid_base::typename
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_utils
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_utils::create_type_by_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_utils::find
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_utils::find_all
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_utils::get_config
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_void
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_vreg
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_vreg::add_field
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::allocate
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::atomic
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::fields
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_address
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_block
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_field_by_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_fields
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_incr
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_memory
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_n_bytes
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_n_maps
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_n_memlocs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_offset_in_memory
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_rights
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::get_size
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::implement
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::incr
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::is_in_map
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::is_static
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::locked
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::m_register_cb_uvm_vreg_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::mem
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::n_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::n_used_bits
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::offset
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::read_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::region
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::release_region
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::reset
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::set_parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::write_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::XatomicX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg::Xlock_modelX
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_vreg_cbs::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_cbs::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_vreg_field::__m_uvm_field_automation
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::clone
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::configure
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::convert2string
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::create
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::do_compare
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::do_copy
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::do_pack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::do_print
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::do_unpack
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_access
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_full_name
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_lsb_pos_in_register
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_n_bits
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_object_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_parent
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_register
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_type
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::get_type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::lsb
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::m_register_cb_uvm_vreg_field_cbs
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::m_registered_converter__
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::new
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::parent
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::peek
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::poke
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::read_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::size
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::type_name
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field::write_in_progress
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS)
|  uvm_pkg::uvm_vreg_field_cbs::fname
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::lineno
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::new
|  		isDocumented(false)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::post_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::post_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::pre_read
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
|  uvm_pkg::uvm_vreg_field_cbs::pre_write
|  		isDocumented(true)
|  		topicType(unknown)
|  		symbolType(CLASS_MEMBER)
+----------------------------------------------------------------------------------
+-------------------------------------------------------------------
| DocFile set
+-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_agent.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_algorithmic_comparator.svh
| +-------------------------------------------------------------------
| | NumChildren(2)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_analysis_port.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_barrier.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_bottomup_phase.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_callback.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_callback_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_cmdline_processor.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_common_phases.svh
| +-------------------------------------------------------------------
| | NumChildren(10)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_comparer.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_component.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_config_db.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_domain.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_driver.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_env.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_event.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_event_callback.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_exports.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_factory.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_globals.svh
| +-------------------------------------------------------------------
| | NumChildren(19)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_hdl.svh
| +-------------------------------------------------------------------
| | NumChildren(9)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_heartbeat.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_imps.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_in_order_comparator.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_access_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_mam.svh
| +-------------------------------------------------------------------
| | NumChildren(5)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_walk_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_message_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_misc.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_monitor.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(16)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object_globals.svh
| +-------------------------------------------------------------------
| | NumChildren(15)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_objection.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_packer.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_pair.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_phase.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_policies.svh
| +-------------------------------------------------------------------
| | NumChildren(7)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_pool.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_port_base.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_ports.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_printer.svh
| +-------------------------------------------------------------------
| | NumChildren(5)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_push_driver.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_push_sequencer.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_queue.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_random_stimulus.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_recorder.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_access_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_adapter.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_backdoor.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_bit_bash_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_block.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_cbs.svh
| +-------------------------------------------------------------------
| | NumChildren(6)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_field.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_fifo.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_file.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_hw_reset_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_indirect.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_item.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_map.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_built_in_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_hdl_paths_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(2)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_shared_access_seq.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_model.svh
| +-------------------------------------------------------------------
| | NumChildren(5)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_predictor.svh
| +-------------------------------------------------------------------
| | NumChildren(2)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_sequence.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_registry.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_catcher.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_handler.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_object.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_server.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_resource.svh
| +-------------------------------------------------------------------
| | NumChildren(6)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_resource_db.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_root.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_runtime_phases.svh
| +-------------------------------------------------------------------
| | NumChildren(13)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_scoreboard.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_base.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(5)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_item.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer_base.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer_param_base.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sqr_connections.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sqr_ifs.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_subscriber.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_task_phase.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_test.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_exports.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_generic_payload.svh
| +-------------------------------------------------------------------
| | NumChildren(7)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_ifs.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_imps.svh
| +-------------------------------------------------------------------
| | NumChildren(6)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_ports.svh
| +-------------------------------------------------------------------
| | NumChildren(4)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_sockets.svh
| +-------------------------------------------------------------------
| | NumChildren(9)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_sockets_base.svh
| +-------------------------------------------------------------------
| | NumChildren(9)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_time.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_defines.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_fifo_base.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_fifos.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_ifs.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_req_rsp.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_topdown_phase.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_transaction.svh
| +-------------------------------------------------------------------
| | NumChildren(1)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_vreg.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_vreg_field.svh
| +-------------------------------------------------------------------
| | NumChildren(3)
| | Summary()
| +-------------------------------------------------------------------
+-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_agent.svh
| +-------------------------------------------------------------------
| | [uvm_agent.svh] +-------------------------------------------------------------------
| | [uvm_agent.svh] | TopicTitle: uvm_agent
| | [uvm_agent.svh] +-------------------------------------------------------------------
| | [uvm_agent.svh] | QualifiedName(uvm_pkg::uvm_agent)
| | [uvm_agent.svh] | TopicType(class)
| | [uvm_agent.svh] | Keyword(CLASS)
| | [uvm_agent.svh] | NumChilderen(2)
| | [uvm_agent.svh] | Summary(The uvm_agent virtual class should be used as the base class for the user- defined agents. )
| | [uvm_agent.svh] | Body(<p>The uvm_agent virtual class should be used as the base class for the user- defined agents. Deriving from uvm_agent will allow you to distinguish agents from other component types also using its inheritance. Such agents will automatically inherit features that may be added to uvm_agent in the future.</p><p>While an agent's build function, inherited from <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">, can be implemented to define any agent topology, an agent typically contains three subcomponents: a driver, sequencer, and monitor. If the agent is active, subtypes should contain all three subcomponents. If the agent is passive, subtypes should contain only the monitor.</p>)
| | [uvm_agent.svh] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | | Children
| | [uvm_agent.svh] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | | TopicTitle: new
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | | QualifiedName(uvm_pkg::uvm_agent::new)
| | [uvm_agent.svh] | [uvm_agent] | | TopicType(function)
| | [uvm_agent.svh] | [uvm_agent] | | Keyword(Function)
| | [uvm_agent.svh] | [uvm_agent] | | NumChilderen(0)
| | [uvm_agent.svh] | [uvm_agent] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_agent.svh] | [uvm_agent] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p><p>The int configuration parameter is_active is used to identify whether this agent should be acting in active or passive mode. This parameter can be set by doing:</p><blockquote><pre>set_config_int(&quot;&lt;path_to_agent&gt;&quot;, &quot;is_active&quot;, UVM_ACTIVE);</pre></blockquote>)
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | | TopicTitle: get_is_active
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] | [uvm_agent] | | QualifiedName(uvm_pkg::uvm_agent::get_is_active)
| | [uvm_agent.svh] | [uvm_agent] | | TopicType(function)
| | [uvm_agent.svh] | [uvm_agent] | | Keyword(Function)
| | [uvm_agent.svh] | [uvm_agent] | | NumChilderen(0)
| | [uvm_agent.svh] | [uvm_agent] | | Summary(Returns UVM_ACTIVE is the agent is acting as an active agent and UVM_PASSIVE if it is acting as a passive agent. )
| | [uvm_agent.svh] | [uvm_agent] | | Body(<p>Returns UVM_ACTIVE is the agent is acting as an active agent and UVM_PASSIVE if it is acting as a passive agent. The default implementation is to just return the is_active flag, but the component developer may override this behavior if a more complex algorithm is needed to determine the active/passive nature of the agent.</p>)
| | [uvm_agent.svh] | [uvm_agent] | +-------------------------------------------------------------------
| | [uvm_agent.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_algorithmic_comparator.svh
| +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | TopicTitle: Comparators
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | QualifiedName(Comparators)
| | [uvm_algorithmic_comparator.svh] | TopicType(group)
| | [uvm_algorithmic_comparator.svh] | Keyword(Group)
| | [uvm_algorithmic_comparator.svh] | NumChilderen(0)
| | [uvm_algorithmic_comparator.svh] | Summary(A common function of testbenches is to compare streams of transactions for equivalence. )
| | [uvm_algorithmic_comparator.svh] | Body(<p>A common function of testbenches is to compare streams of transactions for equivalence. For example, a testbench may compare a stream of transactions from a DUT with expected results.</p><p>The UVM library provides a base class called <link target="uvm_in_order_comparator #(T,comp_type,convert,pair_type)" name="uvm_in_order_comparator #(T,comp_type,convert,pair_type)" original="&lt; uvm_in_order_comparator #(T,comp_type,convert,pair_type) &gt;"> and two derived classes, which are <link target="uvm_in_order_built_in_comparator #(T)" name="uvm_in_order_built_in_comparator #(T)" original="&lt; uvm_in_order_built_in_comparator #(T) &gt;"> for comparing streams of built-in types and <link target="uvm_in_order_class_comparator #(T)" name="uvm_in_order_class_comparator #(T)" original="&lt; uvm_in_order_class_comparator #(T) &gt;"> for comparing streams of class objects.</p><p>The uvm_algorithmic_comparator also compares two streams of transactions; however, the transaction streams might be of different type objects. This device will use a user-written transformation function to convert one type to another before performing a comparison.</p>)
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | TopicTitle: uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | QualifiedName(uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER))
| | [uvm_algorithmic_comparator.svh] | TopicType(class)
| | [uvm_algorithmic_comparator.svh] | Keyword(CLASS)
| | [uvm_algorithmic_comparator.svh] | NumChilderen(1)
| | [uvm_algorithmic_comparator.svh] | Summary(Compares two streams of data objects of different types, <i>BEFORE</i> and <i>AFTER</i>.)
| | [uvm_algorithmic_comparator.svh] | Body(<p>Compares two streams of data objects of different types, <i>BEFORE</i> and <i>AFTER</i>.</p><p>The algorithmic comparator is a wrapper around <link target="uvm_in_order_class_comparator #(T)" name="uvm_in_order_class_comparator #(T)" original="&lt; uvm_in_order_class_comparator #(T) &gt;">. Like the in-order comparator, the algorithmic comparator compares two streams of transactions, the <i>BEFORE</i> stream and the <i>AFTER</i> stream. It is often the case when two streams of transactions need to be compared that the two streams are in different forms. That is, the type of the <i>BEFORE</i> transaction stream is different than the type of the <i>AFTER</i> transaction stream.</p><p>The uvm_algorithmic_comparator's <i>TRANSFORMER</i> type parameter specifies the class responsible for converting transactions of type <i>BEFORE</i> into those of type <i>AFTER</i>. This transformer class must provide a transform() method with the following prototype:</p><blockquote><pre>function AFTER transform (BEFORE b);
</pre></blockquote><p>Matches and mistmatches are reported in terms of the <i>AFTER</i> transactions. For more information, see the <link target="uvm_in_order_comparator #(T,comp_type,convert,pair_type)" name="uvm_in_order_comparator #(T,comp_type,convert,pair_type)" original="&lt; uvm_in_order_comparator #(T,comp_type,convert,pair_type) &gt;"> class.</p>)
| | [uvm_algorithmic_comparator.svh] | +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | | Children
| | [uvm_algorithmic_comparator.svh] | +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | TopicTitle: new
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | QualifiedName(new)
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | TopicType(function)
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | Keyword(Function)
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | NumChilderen(0)
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | Summary(Creates an instance of a specialization of this class. )
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | | Body(<p>Creates an instance of a specialization of this class. In addition to the standard uvm_component constructor arguments, <i>name</i> and <i>parent</i>, the constructor takes a handle to a <i>transformer</i> object, which must already be allocated (no null handles) and must implement the transform() method.</p>)
| | [uvm_algorithmic_comparator.svh] | [uvm_algorithmic_comparator #(BEFORE,AFTER,TRANSFORMER)] | +-------------------------------------------------------------------
| | [uvm_algorithmic_comparator.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_analysis_port.svh
| +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | TopicTitle: Analysis Ports
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | QualifiedName(Analysis Ports)
| | [uvm_analysis_port.svh] | TopicType(section)
| | [uvm_analysis_port.svh] | Keyword(Title)
| | [uvm_analysis_port.svh] | NumChilderen(0)
| | [uvm_analysis_port.svh] | Summary(This section defines the port, export, and imp classes used for transaction analysis.)
| | [uvm_analysis_port.svh] | Body(<p>This section defines the port, export, and imp classes used for transaction analysis.</p>)
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | TopicTitle: uvm_analysis_port
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | QualifiedName(uvm_pkg::uvm_analysis_port)
| | [uvm_analysis_port.svh] | TopicType(class)
| | [uvm_analysis_port.svh] | Keyword(Class)
| | [uvm_analysis_port.svh] | NumChilderen(1)
| | [uvm_analysis_port.svh] | Summary(Broadcasts a value to all subscribers implementing a <link target="uvm_analysis_imp" name="uvm_analysis_imp" original="&lt; uvm_analysis_imp &gt;">.)
| | [uvm_analysis_port.svh] | Body(<p>Broadcasts a value to all subscribers implementing a <link target="uvm_analysis_imp" name="uvm_analysis_imp" original="&lt; uvm_analysis_imp &gt;">.</p><blockquote><pre>class mon extends uvm_component;
  uvm_analysis_port#(trans) ap;

  function new(string name = &quot;sb&quot;, uvm_component parent = null);
     super.new(name, parent);
     ap = new(&quot;ap&quot;, this);
  endfunction

  task run_phase(uvm_phase phase);
      trans t;
      ...
      ap.write(t);
      ...
  endfunction
endclass
</pre></blockquote>)
| | [uvm_analysis_port.svh] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | | Children
| | [uvm_analysis_port.svh] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | TopicTitle: write
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | QualifiedName(uvm_pkg::uvm_analysis_port::write)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | TopicType(function)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | Keyword(Method)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | NumChilderen(0)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | Summary(Send specified value to all connected interface)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | | Body(<p>Send specified value to all connected interface</p>)
| | [uvm_analysis_port.svh] | [uvm_analysis_port] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | TopicTitle: uvm_analysis_imp
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | QualifiedName(uvm_pkg::uvm_analysis_imp)
| | [uvm_analysis_port.svh] | TopicType(class)
| | [uvm_analysis_port.svh] | Keyword(Class)
| | [uvm_analysis_port.svh] | NumChilderen(0)
| | [uvm_analysis_port.svh] | Summary(Receives all transactions broadcasted by a <link target="uvm_analysis_port" name="uvm_analysis_port" original="&lt; uvm_analysis_port &gt;">. )
| | [uvm_analysis_port.svh] | Body(<p>Receives all transactions broadcasted by a <link target="uvm_analysis_port" name="uvm_analysis_port" original="&lt; uvm_analysis_port &gt;">. It serves as the termination point of an analysis port/export/imp connection. The component attached to the <i>imp</i> class--called a <i>subscriber</i>-- implements the analysis interface.</p><p>Will invoke the <i>write(T)</i> method in the parent component. The implementation of the <i>write(T)</i> method must not modify the value passed to it.</p><blockquote><pre>class sb extends uvm_component;
  uvm_analysis_imp#(trans, sb) ap;

  function new(string name = &quot;sb&quot;, uvm_component parent = null);
     super.new(name, parent);
     ap = new(&quot;ap&quot;, this);
  endfunction

  function void write(trans t);
      ...
  endfunction
endclass
</pre></blockquote>)
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | TopicTitle: uvm_analysis_export
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | QualifiedName(uvm_pkg::uvm_analysis_export)
| | [uvm_analysis_port.svh] | TopicType(class)
| | [uvm_analysis_port.svh] | Keyword(Class)
| | [uvm_analysis_port.svh] | NumChilderen(1)
| | [uvm_analysis_port.svh] | Summary(Exports a lower-level <link target="uvm_analysis_imp" name="uvm_analysis_imp" original="&lt; uvm_analysis_imp &gt;"> to its parent.)
| | [uvm_analysis_port.svh] | Body(<p>Exports a lower-level <link target="uvm_analysis_imp" name="uvm_analysis_imp" original="&lt; uvm_analysis_imp &gt;"> to its parent.</p>)
| | [uvm_analysis_port.svh] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | | Children
| | [uvm_analysis_port.svh] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | TopicTitle: new
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | QualifiedName(uvm_pkg::uvm_analysis_export::new)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | TopicType(function)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | Keyword(Function)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | NumChilderen(0)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | Summary(Instantiate the export.)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | | Body(<p>Instantiate the export.</p>)
| | [uvm_analysis_port.svh] | [uvm_analysis_export] | +-------------------------------------------------------------------
| | [uvm_analysis_port.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_barrier.svh
| +-------------------------------------------------------------------
| | [uvm_barrier.svh] +-------------------------------------------------------------------
| | [uvm_barrier.svh] | TopicTitle: uvm_barrier
| | [uvm_barrier.svh] +-------------------------------------------------------------------
| | [uvm_barrier.svh] | QualifiedName(uvm_pkg::uvm_barrier)
| | [uvm_barrier.svh] | TopicType(class)
| | [uvm_barrier.svh] | Keyword(CLASS)
| | [uvm_barrier.svh] | NumChilderen(8)
| | [uvm_barrier.svh] | Summary(The uvm_barrier class provides a multiprocess synchronization mechanism. )
| | [uvm_barrier.svh] | Body(<p>The uvm_barrier class provides a multiprocess synchronization mechanism. It enables a set of processes to block until the desired number of processes get to the synchronization point, at which time all of the processes are released.</p>)
| | [uvm_barrier.svh] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | | Children
| | [uvm_barrier.svh] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: new
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::new)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Creates a new barrier object.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Creates a new barrier object.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: wait_for
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::wait_for)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(task)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Task)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Waits for enough processes to reach the barrier before continuing.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Waits for enough processes to reach the barrier before continuing.</p><p>The number of processes to wait for is set by the <link target="set_threshold" name="set_threshold" original="&lt; set_threshold &gt;"> method.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: reset
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::reset)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Resets the barrier. )
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Resets the barrier. This sets the waiter count back to zero.</p><p>The threshold is unchanged. After reset, the barrier will force processes to wait for the threshold again.</p><p>If the <i>wakeup</i> bit is set, any currently waiting processes will be activated.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: set_auto_reset
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::set_auto_reset)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Determines if the barrier should reset itself after the threshold is reached.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Determines if the barrier should reset itself after the threshold is reached.</p><p>The default is on, so when a barrier hits its threshold it will reset, and new processes will block until the threshold is reached again.</p><p>If auto reset is off, then once the threshold is achieved, new processes pass through without being blocked until the barrier is reset.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: set_threshold
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::set_threshold)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Sets the process threshold.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Sets the process threshold.</p><p>This determines how many processes must be waiting on the barrier before the processes may proceed.</p><p>Once the <i>threshold</i> is reached, all waiting processes are activated.</p><p>If <i>threshold</i> is set to a value less than the number of currently waiting processes, then the barrier is reset and waiting processes are activated.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: get_threshold
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::get_threshold)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Gets the current threshold setting for the barrier.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Gets the current threshold setting for the barrier.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: get_num_waiters
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::get_num_waiters)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Returns the number of processes currently waiting at the barrier.)
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Returns the number of processes currently waiting at the barrier.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicTitle: cancel
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] | [uvm_barrier] | | QualifiedName(uvm_pkg::uvm_barrier::cancel)
| | [uvm_barrier.svh] | [uvm_barrier] | | TopicType(function)
| | [uvm_barrier.svh] | [uvm_barrier] | | Keyword(Function)
| | [uvm_barrier.svh] | [uvm_barrier] | | NumChilderen(0)
| | [uvm_barrier.svh] | [uvm_barrier] | | Summary(Decrements the waiter count by one. )
| | [uvm_barrier.svh] | [uvm_barrier] | | Body(<p>Decrements the waiter count by one. This is used when a process that is waiting on the barrier is killed or activated by some other means.</p>)
| | [uvm_barrier.svh] | [uvm_barrier] | +-------------------------------------------------------------------
| | [uvm_barrier.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_bottomup_phase.svh
| +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | TopicTitle: uvm_bottomup_phase
| | [uvm_bottomup_phase.svh] +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | QualifiedName(uvm_pkg::uvm_bottomup_phase)
| | [uvm_bottomup_phase.svh] | TopicType(class)
| | [uvm_bottomup_phase.svh] | Keyword(Class)
| | [uvm_bottomup_phase.svh] | NumChilderen(3)
| | [uvm_bottomup_phase.svh] | Summary(Virtual base class for function phases that operate bottom-up. )
| | [uvm_bottomup_phase.svh] | Body(<p>Virtual base class for function phases that operate bottom-up. The pure virtual function execute() is called for each component. This is the default traversal so is included only for naming.</p><p>A bottom-up function phase completes when the <link target="execute()" name="execute()" original="&lt; execute() &gt;"> method has been called and returned on all applicable components in the hierarchy.</p>)
| | [uvm_bottomup_phase.svh] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | | Children
| | [uvm_bottomup_phase.svh] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicTitle: new
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | QualifiedName(uvm_pkg::uvm_bottomup_phase::new)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicType(function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Keyword(Function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | NumChilderen(0)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Summary(Create a new instance of a bottom-up phase.)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Body(<p>Create a new instance of a bottom-up phase.</p>)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicTitle: traverse
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | QualifiedName(uvm_pkg::uvm_bottomup_phase::traverse)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicType(function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Keyword(Function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | NumChilderen(0)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Summary(Traverses the component tree in bottom-up order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component.)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Body(<p>Traverses the component tree in bottom-up order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component.</p>)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicTitle: execute
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | QualifiedName(uvm_pkg::uvm_bottomup_phase::execute)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | TopicType(function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Keyword(Function)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | NumChilderen(0)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Summary(Executes the bottom-up phase <i>phase</i> for the component <i>comp</i>.)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | | Body(<p>Executes the bottom-up phase <i>phase</i> for the component <i>comp</i>.</p>)
| | [uvm_bottomup_phase.svh] | [uvm_bottomup_phase] | +-------------------------------------------------------------------
| | [uvm_bottomup_phase.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_callback.svh
| +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | TopicTitle: Callbacks Classes
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | QualifiedName(Callbacks Classes)
| | [uvm_callback.svh] | TopicType(section)
| | [uvm_callback.svh] | Keyword(Title)
| | [uvm_callback.svh] | NumChilderen(0)
| | [uvm_callback.svh] | Summary(This section defines the classes used for callback registration, management, and user-defined callbacks.)
| | [uvm_callback.svh] | Body(<p>This section defines the classes used for callback registration, management, and user-defined callbacks.</p>)
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | TopicTitle: uvm_callbacks #(T,CB)
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | QualifiedName(uvm_callbacks #(T,CB))
| | [uvm_callback.svh] | TopicType(class)
| | [uvm_callback.svh] | Keyword(CLASS)
| | [uvm_callback.svh] | NumChilderen(12)
| | [uvm_callback.svh] | Summary(The <i>uvm_callbacks</i> class provides a base class for implementing callbacks, which are typically used to modify or augment component behavior without changing the component class. )
| | [uvm_callback.svh] | Body(<p>The <i>uvm_callbacks</i> class provides a base class for implementing callbacks, which are typically used to modify or augment component behavior without changing the component class. To work effectively, the developer of the component class defines a set of &quot;hook&quot; methods that enable users to customize certain behaviors of the component in a manner that is controlled by the component developer. The integrity of the component's overall behavior is intact, while still allowing certain customizable actions by the user.</p><p>To enable compile-time type-safety, the class is parameterized on both the user-defined callback interface implementation as well as the object type associated with the callback. The object type-callback type pair are associated together using the <link target="`uvm_register_cb" name="`uvm_register_cb" original="&lt; `uvm_register_cb &gt;"> macro to define a valid pairing; valid pairings are checked when a user attempts to add a callback to an object.</p><p>To provide the most flexibility for end-user customization and reuse, it is recommended that the component developer also define a corresponding set of virtual method hooks in the component itself. This affords users the ability to customize via inheritance/factory overrides as well as callback object registration. The implementation of each virtual method would provide the default traversal algorithm for the particular callback being called. Being virtual, users can define subtypes that override the default algorithm, perform tasks before and/or after calling super.&lt;method&gt; to execute any registered callbacks, or to not call the base implementation, effectively disabling that particalar hook. A demonstration of this methodology is provided in an example included in the kit.</p>)
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | | Children
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: Add/delete inteface
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(Add/delete inteface)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary()
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body()
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: add
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(add)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Registers the given callback object, <i>cb</i>, with the given <i>obj</i> handle. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Registers the given callback object, <i>cb</i>, with the given <i>obj</i> handle. The <i>obj</i> handle can be null, which allows registration of callbacks without an object context. If <i>ordreing</i> is UVM_APPEND (default), the callback will be executed after previously added callbacks, else  the callback will be executed ahead of previously added callbacks. The <i>cb</i> is the callback handle; it must be non-null, and if the callback has already been added to the object instance then a warning is issued. Note that the CB parameter is optional. For example, the following are equivalent:</p><blockquote><pre>uvm_callbacks#(my_comp)::add(comp_a, cb);
uvm_callbacks#(my_comp, my_callback)::add(comp_a,cb);</pre></blockquote>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: add_by_name
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(add_by_name)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Registers the given callback object, <i>cb</i>, with one or more uvm_components. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Registers the given callback object, <i>cb</i>, with one or more uvm_components. The components must already exist and must be type T or a derivative. As with <link target="add" name="add" original="&lt; add &gt;"> the CB parameter is optional. <i>root</i> specifies the location in the component hierarchy to start the search for <i>name</i>. See <link target="uvm_root::find_all" name="uvm_root::find_all" original="&lt; uvm_root::find_all &gt;"> for more details on searching by name.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: delete
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(delete)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Deletes the given callback object, <i>cb</i>, from the queue associated with the given <i>obj</i> handle. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Deletes the given callback object, <i>cb</i>, from the queue associated with the given <i>obj</i> handle. The <i>obj</i> handle can be null, which allows de-registration of callbacks without an object context. The <i>cb</i> is the callback handle; it must be non-null, and if the callback has already been removed from the object instance then a warning is issued. Note that the CB parameter is optional. For example, the following are equivalent:</p><blockquote><pre>uvm_callbacks#(my_comp)::delete(comp_a, cb);
uvm_callbacks#(my_comp, my_callback)::delete(comp_a,cb);</pre></blockquote>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: delete_by_name
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(delete_by_name)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Removes the given callback object, <i>cb</i>, associated with one or more uvm_component callback queues. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Removes the given callback object, <i>cb</i>, associated with one or more uvm_component callback queues. As with <link target="delete" name="delete" original="&lt; delete &gt;"> the CB parameter is optional. <i>root</i> specifies the location in the component hierarchy to start the search for <i>name</i>. See <link target="uvm_root::find_all" name="uvm_root::find_all" original="&lt; uvm_root::find_all &gt;"> for more details on searching by name.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: Iterator Interface
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(Iterator Interface)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(This set of functions provide an iterator interface for callback queues. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>This set of functions provide an iterator interface for callback queues. A facade class, <link target="uvm_callback_iter" name="uvm_callback_iter" original="&lt; uvm_callback_iter &gt;"> is also available, and is the generally preferred way to iterate over callback queues.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: get_first
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(get_first)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Returns the first enabled callback of type CB which resides in the queue for <i>obj</i>. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Returns the first enabled callback of type CB which resides in the queue for <i>obj</i>. If <i>obj</i> is null then the typewide queue for T is searched. <i>itr</i> is the iterator; it will be updated with a value that can be supplied to <link target="get_next" name="get_next" original="&lt; get_next &gt;"> to get the next callback object.</p><p>If the queue is empty then null is returned.</p><p>The iterator class <link target="uvm_callback_iter" name="uvm_callback_iter" original="&lt; uvm_callback_iter &gt;"> may be used as an alternative, simplified, iterator interface.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: get_last
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(get_last)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Returns the last enabled callback of type CB which resides in the queue for <i>obj</i>. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Returns the last enabled callback of type CB which resides in the queue for <i>obj</i>. If <i>obj</i> is null then the typewide queue for T is searched. <i>itr</i> is the iterator; it will be updated with a value that can be supplied to <link target="get_prev" name="get_prev" original="&lt; get_prev &gt;"> to get the previous callback object.</p><p>If the queue is empty then null is returned.</p><p>The iterator class <link target="uvm_callback_iter" name="uvm_callback_iter" original="&lt; uvm_callback_iter &gt;"> may be used as an alternative, simplified, iterator interface.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: get_next
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(get_next)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Returns the next enabled callback of type CB which resides in the queue for <i>obj</i>, using <i>itr</i> as the starting point. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Returns the next enabled callback of type CB which resides in the queue for <i>obj</i>, using <i>itr</i> as the starting point. If <i>obj</i> is null then the typewide queue for T is searched. <i>itr</i> is the iterator; it will be updated with a value that can be supplied to <link target="get_next" name="get_next" original="&lt; get_next &gt;"> to get the next callback object.</p><p>If no more callbacks exist in the queue, then null is returned. <link target="get_next" name="get_next" original="&lt; get_next &gt;"> will continue to return null in this case until <link target="get_first" name="get_first" original="&lt; get_first &gt;"> or <link target="get_last" name="get_last" original="&lt; get_last &gt;"> has been used to reset the iterator.</p><p>The iterator class <link target="uvm_callback_iter" name="uvm_callback_iter" original="&lt; uvm_callback_iter &gt;"> may be used as an alternative, simplified, iterator interface.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: get_prev
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(get_prev)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(Returns the previous enabled callback of type CB which resides in the queue for <i>obj</i>, using <i>itr</i> as the starting point. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>Returns the previous enabled callback of type CB which resides in the queue for <i>obj</i>, using <i>itr</i> as the starting point. If <i>obj</i> is null then the typewide queue for T is searched. <i>itr</i> is the iterator; it will be updated with a value that can be supplied to <link target="get_prev" name="get_prev" original="&lt; get_prev &gt;"> to get the previous callback object.</p><p>If no more callbacks exist in the queue, then null is returned. <link target="get_prev" name="get_prev" original="&lt; get_prev &gt;"> will continue to return null in this case until <link target="get_first" name="get_first" original="&lt; get_first &gt;"> or <link target="get_last" name="get_last" original="&lt; get_last &gt;"> has been used to reset the iterator.</p><p>The iterator class <link target="uvm_callback_iter" name="uvm_callback_iter" original="&lt; uvm_callback_iter &gt;"> may be used as an alternative, simplified, iterator interface.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: Debug
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(Debug)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Group)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary()
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body()
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicTitle: display
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | QualifiedName(display)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Summary(This function displays callback information for <i>obj</i>. )
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | | Body(<p>This function displays callback information for <i>obj</i>. If <i>obj</i> is null, then it displays callback information for all objects of type <i>T</i>, including typewide callbacks.</p>)
| | [uvm_callback.svh] | [uvm_callbacks #(T,CB)] | +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | TopicTitle: uvm_callback_iter
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | QualifiedName(uvm_pkg::uvm_callback_iter)
| | [uvm_callback.svh] | TopicType(class)
| | [uvm_callback.svh] | Keyword(CLASS)
| | [uvm_callback.svh] | NumChilderen(6)
| | [uvm_callback.svh] | Summary(The <i>uvm_callback_iter</i> class is an iterator class for iterating over callback queues of a specific callback type. )
| | [uvm_callback.svh] | Body(<p>The <i>uvm_callback_iter</i> class is an iterator class for iterating over callback queues of a specific callback type. The typical usage of the class is:</p><blockquote><pre>uvm_callback_iter#(mycomp,mycb) iter = new(this);
for(mycb cb = iter.first(); cb != null; cb = iter.next())
   cb.dosomething();
</pre></blockquote><p>The callback iteration macros, <link target="`uvm_do_callbacks" name="`uvm_do_callbacks" original="&lt; `uvm_do_callbacks &gt;"> and <link target="`uvm_do_callbacks_exit_on" name="`uvm_do_callbacks_exit_on" original="&lt; `uvm_do_callbacks_exit_on &gt;"> provide a simple method for iterating callbacks and executing the callback methods.</p>)
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | | Children
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: new
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::new)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Creates a new callback iterator object. )
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Creates a new callback iterator object. It is required that the object context be provided.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: first
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::first)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Returns the first valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. )
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Returns the first valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. If the queue is empty then null is returned.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: last
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::last)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Returns the last valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. )
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Returns the last valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. If the queue is empty then null is returned.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: next
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::next)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Returns the next valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. )
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Returns the next valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. If there are no more valid callbacks in the queue, then null is returned.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: prev
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::prev)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Returns the previous valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. )
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Returns the previous valid (enabled) callback of the callback type (or a derivative) that is in the queue of the context object. If there are no more valid callbacks in the queue, then null is returned.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicTitle: get_cb
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback_iter] | | QualifiedName(uvm_pkg::uvm_callback_iter::get_cb)
| | [uvm_callback.svh] | [uvm_callback_iter] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback_iter] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Summary(Returns the last callback accessed via a first() or next() call.)
| | [uvm_callback.svh] | [uvm_callback_iter] | | Body(<p>Returns the last callback accessed via a first() or next() call.</p>)
| | [uvm_callback.svh] | [uvm_callback_iter] | +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | TopicTitle: uvm_callback
| | [uvm_callback.svh] +-------------------------------------------------------------------
| | [uvm_callback.svh] | QualifiedName(uvm_pkg::uvm_callback)
| | [uvm_callback.svh] | TopicType(class)
| | [uvm_callback.svh] | Keyword(CLASS)
| | [uvm_callback.svh] | NumChilderen(4)
| | [uvm_callback.svh] | Summary(The <i>uvm_callback</i> class is the base class for user-defined callback classes. )
| | [uvm_callback.svh] | Body(<p>The <i>uvm_callback</i> class is the base class for user-defined callback classes. Typically, the component developer defines an application-specific callback class that extends from this class. In it, he defines one or more virtual methods, called a <i>callback interface</i>, that represent the hooks available for user override.</p><p>Methods intended for optional override should not be declared <i>pure.</i> Usually, all the callback methods are defined with empty implementations so users have the option of overriding any or all of them.</p><p>The prototypes for each hook method are completely application specific with no restrictions.</p>)
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | | Children
| | [uvm_callback.svh] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | TopicTitle: new
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | QualifiedName(uvm_pkg::uvm_callback::new)
| | [uvm_callback.svh] | [uvm_callback] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback] | | Summary(Creates a new uvm_callback object, giving it an optional <i>name</i>.)
| | [uvm_callback.svh] | [uvm_callback] | | Body(<p>Creates a new uvm_callback object, giving it an optional <i>name</i>.</p>)
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | TopicTitle: callback_mode
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | QualifiedName(uvm_pkg::uvm_callback::callback_mode)
| | [uvm_callback.svh] | [uvm_callback] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback] | | Summary(Enable/disable callbacks (modeled like rand_mode and constraint_mode).)
| | [uvm_callback.svh] | [uvm_callback] | | Body(<p>Enable/disable callbacks (modeled like rand_mode and constraint_mode).</p>)
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | TopicTitle: is_enabled
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | QualifiedName(uvm_pkg::uvm_callback::is_enabled)
| | [uvm_callback.svh] | [uvm_callback] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback] | | Summary(Returns 1 if the callback is enabled, 0 otherwise.)
| | [uvm_callback.svh] | [uvm_callback] | | Body(<p>Returns 1 if the callback is enabled, 0 otherwise.</p>)
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | TopicTitle: get_type_name
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] | [uvm_callback] | | QualifiedName(uvm_pkg::uvm_callback::get_type_name)
| | [uvm_callback.svh] | [uvm_callback] | | TopicType(function)
| | [uvm_callback.svh] | [uvm_callback] | | Keyword(Function)
| | [uvm_callback.svh] | [uvm_callback] | | NumChilderen(0)
| | [uvm_callback.svh] | [uvm_callback] | | Summary(Returns the type name of this callback object.)
| | [uvm_callback.svh] | [uvm_callback] | | Body(<p>Returns the type name of this callback object.</p>)
| | [uvm_callback.svh] | [uvm_callback] | +-------------------------------------------------------------------
| | [uvm_callback.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_callback_defines.svh
| +-------------------------------------------------------------------
| | [uvm_callback_defines.svh] +-------------------------------------------------------------------
| | [uvm_callback_defines.svh] | TopicTitle: Callback Macros
| | [uvm_callback_defines.svh] +-------------------------------------------------------------------
| | [uvm_callback_defines.svh] | QualifiedName(Callback Macros)
| | [uvm_callback_defines.svh] | TopicType(section)
| | [uvm_callback_defines.svh] | Keyword(Title)
| | [uvm_callback_defines.svh] | NumChilderen(0)
| | [uvm_callback_defines.svh] | Summary(These macros are used to register and execute callbacks extending from <i>uvm_callbacks</i>.)
| | [uvm_callback_defines.svh] | Body(<p>These macros are used to register and execute callbacks extending from <i>uvm_callbacks</i>.</p>)
| | [uvm_callback_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_cmdline_processor.svh
| +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | TopicTitle: uvm_cmdline_processor
| | [uvm_cmdline_processor.svh] +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | QualifiedName(uvm_pkg::uvm_cmdline_processor)
| | [uvm_cmdline_processor.svh] | TopicType(class)
| | [uvm_cmdline_processor.svh] | Keyword(Class)
| | [uvm_cmdline_processor.svh] | NumChilderen(29)
| | [uvm_cmdline_processor.svh] | Summary(This class provides an interface to the command line arguments that were provided for the given simulation. )
| | [uvm_cmdline_processor.svh] | Body(<p>This class provides an interface to the command line arguments that were provided for the given simulation.  The class is intended to be used as a singleton, but that isn't required.  The generation of the data structures which hold the command line argument information happens during construction of the class object.  A global variable called <i>uvm_cmdline_proc</i> is created at initialization time and may be used to access command line information.</p><p>The uvm_cmdline_processor class also provides support for setting various UVM variables from the command line such as components' verbosities and configuration settings for integral types and strings.  Each of these capablities is described in the Built-in UVM Aware Command Line Arguments section.</p>)
| | [uvm_cmdline_processor.svh] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | | Children
| | [uvm_cmdline_processor.svh] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Singleton
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Singleton)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_inst
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_inst)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(Returns the singleton instance of the UVM command line processor.)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>Returns the singleton instance of the UVM command line processor.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Basic Arguments
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Basic Arguments)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_args
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_args)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function returns a queue with all of the command line arguments that were used to start the simulation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function returns a queue with all of the command line arguments that were used to start the simulation. Note that element 0 of the array will always be the name of the executable which started the simulation.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_plusargs
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_plusargs)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function returns a queue with all of the plus arguments that were used to start the simulation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function returns a queue with all of the plus arguments that were used to start the simulation. Plusarguments may be used by the simulator vendor, or may be specific to a company or individiual user. Plusargs never have extra arguments (i.e. if there is a plusarg as the second argument on the command line, the third argument is unrelated); this is not necessarily the case with vendor specific dash arguments.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_uvmargs
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(get_uvmargs)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function returns a queue with all of the uvm arguments that were used to start the simulation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function returns a queue with all of the uvm arguments that were used to start the simulation. An UVM argument is taken to be any argument that starts with a - or + and uses the keyword UVM (case insensitive) as the first three letters of the argument.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_arg_matches
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_arg_matches)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function loads a queue with all of the arguments that match the input expression and returns the number of items that matched. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function loads a queue with all of the arguments that match the input expression and returns the number of items that matched. If the input expression is bracketed with //, then it is taken as an extended regular expression otherwise, it is taken as the beginning of an argument to match. For example:</p><blockquote><pre>string myargs[$]
initial begin
   void'(uvm_cmdline_proc.get_arg_matches(&quot;+foo&quot;,myargs)); //matches +foo, +foobar
                                                           //doesn't match +barfoo
   void'(uvm_cmdline_proc.get_arg_matches(&quot;/foo/&quot;,myargs)); //matches +foo, +foobar,
                                                            //foo.sv, barfoo, etc.
   void'(uvm_cmdline_proc.get_arg_matches(&quot;/^foo.*\.sv&quot;,myargs)); //matches foo.sv
                                                                  //and foo123.sv,
                                                                  //not barfoo.sv.</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Argument Values
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Argument Values)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_arg_value
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_arg_value)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function finds the first argument which matches the <i>match</i> arg and returns the suffix of the argument. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function finds the first argument which matches the <i>match</i> arg and returns the suffix of the argument. This is similar to the $value$plusargs system task, but does not take a formating string. The return value is the number of command line arguments that match the <i>match</i> string, and <i>value</i> is the value of the first match.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_arg_values
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_arg_values)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(This function finds all the arguments which matches the <i>match</i> arg and returns the suffix of the arguments in a list of values. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>This function finds all the arguments which matches the <i>match</i> arg and returns the suffix of the arguments in a list of values. The return value is the number of matches that were found (it is the same as values.size() ). For example if '+foo=1,yes,on +foo=5,no,off' was provided on the command line and the following code was executed:</p><blockquote><pre>string foo_values[$]
initial begin
   void'(uvm_cmdline_proc.get_arg_values(&quot;+foo=&quot;,foo_values));

</pre></blockquote><p>The foo_values queue would contain two entries.  These entries are shown here:</p><dl><de>   0</de><dd>&quot;1,yes,on&quot;</dd><de>   1</de><dd>&quot;5,no,off&quot;</dd></dl><p>Splitting the resultant string is left to user but using the uvm_split_string() function is recommended.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Tool information
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Tool information)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_tool_name
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_tool_name)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(Returns the simulation tool that is executing the simlation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>Returns the simulation tool that is executing the simlation. This is a vendor specific string.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: get_tool_version
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(uvm_pkg::uvm_cmdline_processor::get_tool_version)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Function)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(Returns the version of the simulation tool that is executing the simlation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p>Returns the version of the simulation tool that is executing the simlation. This is a vendor specific string.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Command Line Debug
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Command Line Debug)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_DUMP_CMDLINE_ARGS
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_DUMP_CMDLINE_ARGS)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_DUMP_CMDLINE_ARGS</i> allows the user to dump all command line arguments to the reporting mechanism. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_DUMP_CMDLINE_ARGS</i> allows the user to dump all command line arguments to the reporting mechanism.  The output in is tree format.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: Built-in UVM Aware Command Line Arguments
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(Built-in UVM Aware Command Line Arguments)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Group)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body()
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_TESTNAME
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_TESTNAME)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_TESTNAME=&lt;class name&gt;</i> allows the user to specify which uvm_test (or uvm_component) should be created via the factory and cycled through the UVM phases. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_TESTNAME=&lt;class name&gt;</i> allows the user to specify which uvm_test (or uvm_component) should be created via the factory and cycled through the UVM phases. If multiple of these settings are provided, the first occurrence is used and a warning is issued for subsequent settings.  For example:</p><blockquote><pre>&lt;sim command&gt; +UVM_TESTNAME=read_modify_write_test</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_VERBOSITY
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_VERBOSITY)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_VERBOSITY=&lt;verbosity&gt;</i> allows the user to specify the initial verbosity for all components. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_VERBOSITY=&lt;verbosity&gt;</i> allows the user to specify the initial verbosity for all components.  If multiple of these settings are provided, the first occurrence is used and a warning is issued for subsequent settings.  For example:</p><blockquote><pre>&lt;sim command&gt; +UVM_VERBOSITY=UVM_HIGH</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +uvm_set_verbosity
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+uvm_set_verbosity)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+uvm_set_verbosity=&lt;comp&gt;,&lt;id&gt;,&lt;verbosity&gt;,&lt;phase&gt;</i> and <i>+uvm_set_verbosity=&lt;comp&gt;,&lt;id&gt;,&lt;verbosity&gt;,time,&lt;time&gt;</i> allow the users to manipulate the verbosity of specific components at specific phases (and times during the &quot;run&quot; phases) of the simulation. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+uvm_set_verbosity=&lt;comp&gt;,&lt;id&gt;,&lt;verbosity&gt;,&lt;phase&gt;</i> and <i>+uvm_set_verbosity=&lt;comp&gt;,&lt;id&gt;,&lt;verbosity&gt;,time,&lt;time&gt;</i> allow the users to manipulate the verbosity of specific components at specific phases (and times during the &quot;run&quot; phases) of the simulation.  The <i>id</i> argument can be either <i>_ALL_</i> for all IDs or a specific message id.  Wildcarding is not supported for <i>id</i> due to performance concerns. Settings for non-&quot;run&quot; phases are executed in order of occurrence on the command line. Settings for &quot;run&quot; phases (times) are sorted by time and then executed in order of occurrence for settings of the same time.  For example:</p><blockquote><pre>&lt;sim command&gt; +uvm_set_verbosity=uvm_test_top.env0.agent1.*,_ALL_,UVM_FULL,time,800</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +uvm_set_action
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+uvm_set_action)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+uvm_set_action=&lt;comp&gt;,&lt;id&gt;,&lt;severity&gt;,&lt;action&gt;</i> provides the equivalent of various uvm_report_object's set_report_*_action APIs. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+uvm_set_action=&lt;comp&gt;,&lt;id&gt;,&lt;severity&gt;,&lt;action&gt;</i> provides the equivalent of various uvm_report_object's set_report_*_action APIs.  The special keyword, <i>_ALL_</i>, can be provided for both/either the <i>id</i> and/or <i>severity</i> arguments.  The action can be UVM_NO_ACTION or a | separated list of the other UVM message actions.  For example:</p><blockquote><pre>&lt;sim command&gt; +uvm_set_action=uvm_test_top.env0.*,_ALL_,UVM_ERROR,UVM_NO_ACTION</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +uvm_set_severity
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+uvm_set_severity)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+uvm_set_severity=&lt;comp&gt;,&lt;id&gt;,&lt;current severity&gt;,&lt;new severity&gt;</i> provides the equivalent of the various uvm_report_object's set_report_*_severity_override APIs. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+uvm_set_severity=&lt;comp&gt;,&lt;id&gt;,&lt;current severity&gt;,&lt;new severity&gt;</i> provides the equivalent of the various uvm_report_object's set_report_*_severity_override APIs. The special keyword, <i>_ALL_</i>, can be provided for both/either the <i>id</i> and/or <i>current severity</i> arguments.  For example:</p><blockquote><pre>&lt;sim command&gt; +uvm_set_severity=uvm_test_top.env0.*,BAD_CRC,UVM_ERROR,UVM_WARNING</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_TIMEOUT
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_TIMEOUT)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_TIMEOUT=&lt;timeout&gt;,&lt;overridable&gt;</i> allows users to change the global timeout of the UVM framework. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_TIMEOUT=&lt;timeout&gt;,&lt;overridable&gt;</i> allows users to change the global timeout of the UVM framework.  The <link target="overridable" name="overridable" original="&lt; overridable &gt;"> argument ('YES' or 'NO') specifies whether user code can subsequently change this value.  If set to 'NO' and the user code tries to change the global timeout value, an warning message will be generated.</p><blockquote><pre>&lt;sim command&gt; +UVM_TIMEOUT=200000,NO</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_MAX_QUIT_COUNT
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_MAX_QUIT_COUNT)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_MAX_QUIT_COUNT=&lt;count&gt;,&lt;overridable&gt;</i> allows users to change max quit count for the report server. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_MAX_QUIT_COUNT=&lt;count&gt;,&lt;overridable&gt;</i> allows users to change max quit count for the report server.  The <link target="overridable" name="overridable" original="&lt; overridable &gt;"> argument ('YES' or 'NO') specifies whether user code can subsequently change this value.  If set to 'NO' and the user code tries to change the max quit count value, an warning message will be generated.</p><blockquote><pre>&lt;sim command&gt; +UVM_MAX_QUIT_COUNT=5,NO</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_PHASE_TRACE
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_PHASE_TRACE)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_PHASE_TRACE</i> turns on tracing of phase executions. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_PHASE_TRACE</i> turns on tracing of phase executions.  Users simply need to put the argument on the command line.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_OBJECTION_TRACE
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_OBJECTION_TRACE)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_OBJECTION_TRACE</i> turns on tracing of objection activity. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_OBJECTION_TRACE</i> turns on tracing of objection activity.  Users simply need to put the argument on the command line.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_RESOURCE_DB_TRACE
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_RESOURCE_DB_TRACE)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_RESOURCE_DB_TRACE</i> turns on tracing of resource DB access. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_RESOURCE_DB_TRACE</i> turns on tracing of resource DB access. Users simply need to put the argument on the command line.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +UVM_CONFIG_DB_TRACE
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+UVM_CONFIG_DB_TRACE)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+UVM_CONFIG_DB_TRACE</i> turns on tracing of configuration DB access. )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+UVM_CONFIG_DB_TRACE</i> turns on tracing of configuration DB access. Users simply need to put the argument on the command line.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +uvm_set_inst_override, +uvm_set_type_override
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+uvm_set_inst_override, +uvm_set_type_override)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+uvm_set_inst_override=&lt;req_type&gt;,&lt;override_type&gt;,&lt;full_inst_path&gt;</i> and <i>+uvm_set_type_override=&lt;req_type&gt;,&lt;override_type&gt;[,&lt;replace&gt;]</i> work like the name based overrides in the factory--factory.set_inst_override_by_name() and factory.set_type_override_by_name(). )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+uvm_set_inst_override=&lt;req_type&gt;,&lt;override_type&gt;,&lt;full_inst_path&gt;</i> and <i>+uvm_set_type_override=&lt;req_type&gt;,&lt;override_type&gt;[,&lt;replace&gt;]</i> work like the name based overrides in the factory--factory.set_inst_override_by_name() and factory.set_type_override_by_name(). For uvm_set_type_override, the third argument is 0 or 1 (the default is 1 if this argument is left off); this argument specifies whether previous type overrides for the type should be replaced.  For example:</p><blockquote><pre>&lt;sim command&gt; +uvm_set_type_override=eth_packet,short_eth_packet</pre></blockquote>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicTitle: +uvm_set_config_int, +uvm_set_config_string
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | QualifiedName(+uvm_set_config_int, +uvm_set_config_string)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | TopicType(variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Keyword(Variable)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | NumChilderen(0)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Summary(<i>+uvm_set_config_int=&lt;comp&gt;,&lt;field&gt;,&lt;value&gt;</i> and <i>+uvm_set_config_string=&lt;comp&gt;,&lt;field&gt;,&lt;value&gt;</i> work like their procedural counterparts: set_config_int() and set_config_string(). )
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | | Body(<p><i>+uvm_set_config_int=&lt;comp&gt;,&lt;field&gt;,&lt;value&gt;</i> and <i>+uvm_set_config_string=&lt;comp&gt;,&lt;field&gt;,&lt;value&gt;</i> work like their procedural counterparts: set_config_int() and set_config_string(). For the value of int config settings, 'b (0b), 'o, 'd, 'h ('x or 0x) as the first two characters of the value are treated as base specifiers for interpreting the base of the number. Size specifiers are not used since SystemVerilog does not allow size specifiers in string to value conversions.  For example:</p><blockquote><pre>&lt;sim command&gt; +uvm_set_config_int=uvm_test_top.soc_env,mode,5
</pre></blockquote><p>No equivalent of set_config_object() exists since no way exists to pass an uvm_object into the simulation via the command line.</p>)
| | [uvm_cmdline_processor.svh] | [uvm_cmdline_processor] | +-------------------------------------------------------------------
| | [uvm_cmdline_processor.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_common_phases.svh
| +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: UVM Common Phases
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(UVM Common Phases)
| | [uvm_common_phases.svh] | TopicType(section)
| | [uvm_common_phases.svh] | Keyword(Title)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(The common phases are the set of function and task phases that all &lt;uvm_component&gt;s execute together. )
| | [uvm_common_phases.svh] | Body(<p>The common phases are the set of function and task phases that all &lt;uvm_component&gt;s execute together. All &lt;uvm_component&gt;s are always synchronized with respect to the common phases.</p><p>The common phases are executed in the sequence they are specified below.</p>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_build_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_build_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Create and configure of testbench structure)
| | [uvm_common_phases.svh] | Body(<p>Create and configure of testbench structure</p><p><link target="uvm_topdown_phase" name="uvm_topdown_phase" original="&lt; uvm_topdown_phase &gt;"> that calls the <link target="uvm_component::build_phase" name="uvm_component::build_phase" original="&lt; uvm_component::build_phase &gt;"> method.</p><h4 class=CHeading> Upon entry</h4><ul><li>The top-level components have been instantiated under <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;">.</li><li>Current simulation time is still equal to 0 but some &quot;delta cycles&quot; may have occurred</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Instantiate sub-components.</li><li>Instantiate register model.</li><li>Get configuration values for the component being built.</li><li>Set configuration values for sub-components.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All &lt;uvm_component&gt;s have been instantiated.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_connect_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_connect_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Establish cross-component connections.)
| | [uvm_common_phases.svh] | Body(<p>Establish cross-component connections.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::connect_phase" name="uvm_component::connect_phase" original="&lt; uvm_component::connect_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>All components have been instantiated.</li><li>Current simulation time is still equal to 0 but some &quot;delta cycles&quot; may have occurred.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Connect TLM ports and exports.</li><li>Connect TLM initiator sockets and target sockets.</li><li>Connect register model to adapter components.</li><li>Setup explicit phase domains.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All cross-component connections have been established.</li><li>All independent phase domains are set.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_end_of_elaboration_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_end_of_elaboration_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Fine-tune the testbench.)
| | [uvm_common_phases.svh] | Body(<p>Fine-tune the testbench.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::end_of_elaboration_phase" name="uvm_component::end_of_elaboration_phase" original="&lt; uvm_component::end_of_elaboration_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>The verification environment has been completely assembled.</li><li>Current simulation time is still equal to 0 but some &quot;delta cycles&quot; may have occurred.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Display environment topology.</li><li>Open files.</li><li>Define additional configuration settings for components.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>None.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_start_of_simulation_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_start_of_simulation_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Get ready for DUT to be simulated.)
| | [uvm_common_phases.svh] | Body(<p>Get ready for DUT to be simulated.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::start_of_simulation_phase" name="uvm_component::start_of_simulation_phase" original="&lt; uvm_component::start_of_simulation_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Other simulation engines, debuggers, hardware assisted platforms and all other run-time tools have been started and synchronized.</li><li>The verification environment has been completely configured and is ready to start.</li><li>Current simulation time is still equal to 0 but some &quot;delta cycles&quot; may have occurred.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Display environment topology</li><li>Set debugger breakpoint</li><li>Set initial run-time configuration values.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>None.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_run_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_run_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Stimulate the DUT.)
| | [uvm_common_phases.svh] | Body(<p>Stimulate the DUT.</p><p>This <link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> calls the <link target="uvm_component::run_phase" name="uvm_component::run_phase" original="&lt; uvm_component::run_phase &gt;"> virtual method. This phase runs in parallel to the runtime phases, <link target="uvm_pre_reset_phase" name="uvm_pre_reset_phase" original="&lt; uvm_pre_reset_phase &gt;"> through <link target="uvm_post_shutdown_phase" name="uvm_post_shutdown_phase" original="&lt; uvm_post_shutdown_phase &gt;">. All components in the testbench are synchronized with respect to the run phase regardles of the phase domain they belong to.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that power has been applied.</li><li>There should not have been any active clock edges before entry into this phase (e.g. x-&gt;1 transitions via initial blocks).</li><li>Current simulation time is still equal to 0 but some &quot;delta cycles&quot; may have occurred.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Components implement behavior that is exhibited for the entire run-time, across the various run-time phases.</li><li>Backward compatibility with OVM.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>The DUT no longer needs to be simulated, and</li><li>The <link target="uvm_post_shutdown_ph" name="uvm_post_shutdown_ph" original="&lt; uvm_post_shutdown_ph &gt;"> is ready to end</li></ul><p>The run phase terminates in one of two ways.</p><h4 class=CHeading> 1. All run_phase objections are dropped</h4><p>When all objections on the run_phase objection have been dropped, the phase ends and all of its threads are killed. If no component raises a run_phase objection immediately upon entering the phase, the phase ends immediately.</p><h4 class=CHeading> 2. Timeout</h4><p>The phase ends if the timeout expires before all objections are dropped. By default, the timeout is set to 9200 seconds. You may override this via <link target="set_global_timeout" name="set_global_timeout" original="&lt; set_global_timeout &gt;">.</p><p>If a timeout occurs in your simulation, or if simulation never ends despite completion of your test stimulus, then it usually indicates that a component continues to object to the end of a phase.</p>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_extract_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_extract_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Extract data from different points of the verficiation environment.)
| | [uvm_common_phases.svh] | Body(<p>Extract data from different points of the verficiation environment.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::extract_phase" name="uvm_component::extract_phase" original="&lt; uvm_component::extract_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>The DUT no longer needs to be simulated.</li><li>Simulation time will no longer advance.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Extract any remaining data and final state information from scoreboard and testbench components</li><li>Probe the DUT (via zero-time hierarchical references and/or backdoor accesses) for final state information.</li><li>Compute statistics and summaries.</li><li>Display final state information</li><li>Close files.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All data has been collected and summarized.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_check_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_check_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Check for any unexpected conditions in the verification environment.)
| | [uvm_common_phases.svh] | Body(<p>Check for any unexpected conditions in the verification environment.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::check_phase" name="uvm_component::check_phase" original="&lt; uvm_component::check_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>All data has been collected.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Check that no unaccounted-for data remain.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>Test is known to have passed or failed.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_report_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_report_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Report results of the test.)
| | [uvm_common_phases.svh] | Body(<p>Report results of the test.</p><p><link target="uvm_bottomup_phase" name="uvm_bottomup_phase" original="&lt; uvm_bottomup_phase &gt;"> that calls the <link target="uvm_component::report_phase" name="uvm_component::report_phase" original="&lt; uvm_component::report_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Test is known to have passed or failed.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Report test results.</li><li>Write results to file.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>End of test.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | TopicTitle: uvm_final_phase
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| | [uvm_common_phases.svh] | QualifiedName(uvm_pkg::uvm_final_phase)
| | [uvm_common_phases.svh] | TopicType(class)
| | [uvm_common_phases.svh] | Keyword(Class)
| | [uvm_common_phases.svh] | NumChilderen(0)
| | [uvm_common_phases.svh] | Summary(Tie up loose ends.)
| | [uvm_common_phases.svh] | Body(<p>Tie up loose ends.</p><p><link target="uvm_topdown_phase" name="uvm_topdown_phase" original="&lt; uvm_topdown_phase &gt;"> that calls the <link target="uvm_component::final_phase" name="uvm_component::final_phase" original="&lt; uvm_component::final_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>All test-related activity has completed.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Close files.</li><li>Terminate co-simulation engines.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>Ready to exit simulator.</li></ul>)
| | [uvm_common_phases.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_comparer.svh
| +-------------------------------------------------------------------
| | [uvm_comparer.svh] +-------------------------------------------------------------------
| | [uvm_comparer.svh] | TopicTitle: uvm_comparer
| | [uvm_comparer.svh] +-------------------------------------------------------------------
| | [uvm_comparer.svh] | QualifiedName(uvm_pkg::uvm_comparer)
| | [uvm_comparer.svh] | TopicType(class)
| | [uvm_comparer.svh] | Keyword(CLASS)
| | [uvm_comparer.svh] | NumChilderen(15)
| | [uvm_comparer.svh] | Summary(The uvm_comparer class provides a policy object for doing comparisons. )
| | [uvm_comparer.svh] | Body(<p>The uvm_comparer class provides a policy object for doing comparisons. The policies determine how miscompares are treated and counted. Results of a comparison are stored in the comparer object. The <link target="uvm_object::compare" name="uvm_object::compare" original="&lt; uvm_object::compare &gt;"> and <link target="uvm_object::do_compare" name="uvm_object::do_compare" original="&lt; uvm_object::do_compare &gt;"> methods are passed an uvm_comparer policy object.</p>)
| | [uvm_comparer.svh] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | | Children
| | [uvm_comparer.svh] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: policy
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::policy)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Determines whether comparison is UVM_DEEP, UVM_REFERENCE, or UVM_SHALLOW.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Determines whether comparison is UVM_DEEP, UVM_REFERENCE, or UVM_SHALLOW.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: show_max
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::show_max)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Sets the maximum number of messages to send to the messager for miscompares of an object.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Sets the maximum number of messages to send to the messager for miscompares of an object.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: verbosity
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::verbosity)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Sets the verbosity for printed messages.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Sets the verbosity for printed messages.</p><p>The verbosity setting is used by the messaging mechanism to determine whether messages should be suppressed or shown.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: sev
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::sev)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Sets the severity for printed messages.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Sets the severity for printed messages.</p><p>The severity setting is used by the messaging mechanism for printing and filtering messages.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: miscompares
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::miscompares)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This string is reset to an empty string when a comparison is started.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This string is reset to an empty string when a comparison is started.</p><p>The string holds the last set of miscompares that occurred during a comparison.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: physical
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::physical)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The abstract and physical settings allow an object to distinguish between two different classes of fields.</p><p>It is up to you, in the <link target="uvm_object::do_compare" name="uvm_object::do_compare" original="&lt; uvm_object::do_compare &gt;"> method, to test the setting of this field if you want to use the physical trait as a filter.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: abstract
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::abstract)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The abstract and physical settings allow an object to distinguish between two different classes of fields.</p><p>It is up to you, in the <link target="uvm_object::do_compare" name="uvm_object::do_compare" original="&lt; uvm_object::do_compare &gt;"> method, to test the setting of this field if you want to use the abstract trait as a filter.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: check_type
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::check_type)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This bit determines whether the type, given by <link target="uvm_object::get_type_name" name="uvm_object::get_type_name" original="&lt; uvm_object::get_type_name &gt;">, is used to verify that the types of two objects are the same.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This bit determines whether the type, given by <link target="uvm_object::get_type_name" name="uvm_object::get_type_name" original="&lt; uvm_object::get_type_name &gt;">, is used to verify that the types of two objects are the same.</p><p>This bit is used by the <link target="compare_object" name="compare_object" original="&lt; compare_object &gt;"> method. In some cases it is useful to set this to 0 when the two operands are related by inheritance but are different types.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: result
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::result)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Variable)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This bit stores the number of miscompares for a given compare operation. )
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This bit stores the number of miscompares for a given compare operation. You can use the result to determine the number of miscompares that were found.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: compare_field
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::compare_field)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Compares two integral values.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Compares two integral values.</p><p>The <i>name</i> input is used for purposes of storing and printing a miscompare.</p><p>The left-hand-side <i>lhs</i> and right-hand-side <i>rhs</i> objects are the two objects used for comparison.</p><p>The size variable indicates the number of bits to compare; size must be less than or equal to 4096.</p><p>The radix is used for reporting purposes, the default radix is hex.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: compare_field_int
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::compare_field_int)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This method is the same as <link target="compare_field" name="compare_field" original="&lt; compare_field &gt;"> except that the arguments are small integers, less than or equal to 64 bits. )
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This method is the same as <link target="compare_field" name="compare_field" original="&lt; compare_field &gt;"> except that the arguments are small integers, less than or equal to 64 bits. It is automatically called by <link target="compare_field" name="compare_field" original="&lt; compare_field &gt;"> if the operand size is less than or equal to 64.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: compare_field_real
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::compare_field_real)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(This method is the same as <link target="compare_field" name="compare_field" original="&lt; compare_field &gt;"> except that the arguments are real numbers.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>This method is the same as <link target="compare_field" name="compare_field" original="&lt; compare_field &gt;"> except that the arguments are real numbers.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: compare_object
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::compare_object)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Compares two class objects using the <link target="policy" name="policy" original="&lt; policy &gt;"> knob to determine whether the comparison should be deep, shallow, or reference.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Compares two class objects using the <link target="policy" name="policy" original="&lt; policy &gt;"> knob to determine whether the comparison should be deep, shallow, or reference.</p><p>The name input is used for purposes of storing and printing a miscompare.</p><p>The <i>lhs</i> and <i>rhs</i> objects are the two objects used for comparison.</p><p>The <i>check_type</i> determines whether or not to verify the object types match (the return from <i>lhs.get_type_name()</i> matches <i>rhs.get_type_name()</i>).</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: compare_string
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::compare_string)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Compares two string variables.)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Compares two string variables.</p><p>The <i>name</i> input is used for purposes of storing and printing a miscompare.</p><p>The <i>lhs</i> and <i>rhs</i> objects are the two objects used for comparison.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicTitle: print_msg
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] | [uvm_comparer] | | QualifiedName(uvm_pkg::uvm_comparer::print_msg)
| | [uvm_comparer.svh] | [uvm_comparer] | | TopicType(function)
| | [uvm_comparer.svh] | [uvm_comparer] | | Keyword(Function)
| | [uvm_comparer.svh] | [uvm_comparer] | | NumChilderen(0)
| | [uvm_comparer.svh] | [uvm_comparer] | | Summary(Causes the error count to be incremented and the message, <i>msg</i>, to be appended to the <link target="miscompares" name="miscompares" original="&lt; miscompares &gt;"> string (a newline is used to separate messages).)
| | [uvm_comparer.svh] | [uvm_comparer] | | Body(<p>Causes the error count to be incremented and the message, <i>msg</i>, to be appended to the <link target="miscompares" name="miscompares" original="&lt; miscompares &gt;"> string (a newline is used to separate messages).</p><p>If the message count is less than the <link target="show_max" name="show_max" original="&lt; show_max &gt;"> setting, then the message is printed to standard-out using the current verbosity and severity settings. See the <link target="verbosity" name="verbosity" original="&lt; verbosity &gt;"> and <link target="sev" name="sev" original="&lt; sev &gt;"> variables for more information.</p>)
| | [uvm_comparer.svh] | [uvm_comparer] | +-------------------------------------------------------------------
| | [uvm_comparer.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_component.svh
| +-------------------------------------------------------------------
| | [uvm_component.svh] +-------------------------------------------------------------------
| | [uvm_component.svh] | TopicTitle: uvm_component
| | [uvm_component.svh] +-------------------------------------------------------------------
| | [uvm_component.svh] | QualifiedName(uvm_pkg::uvm_component)
| | [uvm_component.svh] | TopicType(class)
| | [uvm_component.svh] | Keyword(CLASS)
| | [uvm_component.svh] | NumChilderen(93)
| | [uvm_component.svh] | Summary(The uvm_component class is the root base class for UVM components. )
| | [uvm_component.svh] | Body(<p>The uvm_component class is the root base class for UVM components. In addition to the features inherited from <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> and <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">, uvm_component provides the following interfaces:</p><dl><de> Hierarchy</de><dd>provides methods for searching and traversing the component hierarchy.</dd><de> Phasing</de><dd>defines a phased test flow that all components follow, with a group of standard phase methods and an API for custom phases and multiple independent phasing domains to mirror DUT behavior e.g. power</dd><de> Configuration</de><dd>provides methods for configuring component topology and other parameters ahead of and during component construction.</dd><de> Reporting</de><dd>provides a convenience interface to the <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;">. All messages, warnings, and errors are processed through this interface.</dd><de> Transaction recording</de><dd>provides methods for recording the transactions produced or consumed by the component to a transaction database (vendor specific).</dd><de> Factory</de><dd>provides a convenience interface to the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">. The factory is used to create new components and other objects based on type-wide and instance-specific configuration.</dd></dl><p>The uvm_component is automatically seeded during construction using UVM seeding, if enabled. All other objects must be manually reseeded, if appropriate. See <link target="uvm_object::reseed" name="uvm_object::reseed" original="&lt; uvm_object::reseed &gt;"> for more information.</p>)
| | [uvm_component.svh] | +-------------------------------------------------------------------
| | [uvm_component.svh] | | Children
| | [uvm_component.svh] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: new
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::new)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Creates a new component with the given leaf instance <i>name</i> and handle to to its <i>parent</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Creates a new component with the given leaf instance <i>name</i> and handle to to its <i>parent</i>.  If the component is a top-level component (i.e. it is created in a static module or interface), <i>parent</i> should be null.</p><p>The component will be inserted as a child of the <i>parent</i> object, if any. If <i>parent</i> already has a child by the given <i>name</i>, an error is produced.</p><p>If <i>parent</i> is null, then the component will become a child of the implicit top-level component, <i>uvm_top</i>.</p><p>All classes derived from uvm_component must call super.new(name,parent).</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Hierarchy Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Hierarchy Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods provide user access to information about the component hierarchy, i.e., topology.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods provide user access to information about the component hierarchy, i.e., topology.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_parent
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_parent)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Returns a handle to this component's parent, or null if it has no parent.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Returns a handle to this component's parent, or null if it has no parent.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_full_name
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_full_name)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Returns the full hierarchical name of this object. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Returns the full hierarchical name of this object. The default implementation concatenates the hierarchical name of the parent, if any, with the leaf name of this object, as given by <link target="uvm_object::get_name" name="uvm_object::get_name" original="&lt; uvm_object::get_name &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_children
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_children)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function populates the end of the <i>children</i> array with the list of this component's children.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function populates the end of the <i>children</i> array with the list of this component's children.</p><blockquote><pre>uvm_component array[$];
my_comp.get_children(array);
foreach(array[i])
  do_something(array[i]);</pre></blockquote>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_child
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_child)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_next_child
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_next_child)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_first_child
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_first_child)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods are used to iterate through this component's children, if any. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods are used to iterate through this component's children, if any. For example, given a component with an object handle, <i>comp</i>, the following code calls <link target="uvm_object::print" name="uvm_object::print" original="&lt; uvm_object::print &gt;"> for each child:</p><blockquote><pre>string name;
uvm_component child;
if (comp.get_first_child(name))
  do begin
    child = comp.get_child(name);
    child.print();
  end while (comp.get_next_child(name));</pre></blockquote>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_num_children
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_num_children)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Returns the number of this component's children.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Returns the number of this component's children.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: has_child
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::has_child)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Returns 1 if this component has a child with the given <i>name</i>, 0 otherwise.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Returns 1 if this component has a child with the given <i>name</i>, 0 otherwise.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: lookup
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::lookup)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Looks for a component with the given hierarchical <i>name</i> relative to this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Looks for a component with the given hierarchical <i>name</i> relative to this component. If the given <i>name</i> is preceded with a '.' (dot), then the search begins relative to the top level (absolute lookup). The handle of the matching component is returned, else null. The name must not contain wildcards.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_depth
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_depth)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Returns the component's depth from the root level. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Returns the component's depth from the root level. uvm_top has a depth of 0. The test and any other top level components have a depth of 1, and so on.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Phasing Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Phasing Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods implement an interface which allows all components to step through a standard schedule of phases, or a customized schedule, and also an API to allow independent phase domains which can jump like state machines to reflect behavior e.g. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods implement an interface which allows all components to step through a standard schedule of phases, or a customized schedule, and also an API to allow independent phase domains which can jump like state machines to reflect behavior e.g. power domains on the DUT in different portions of the testbench. The phase tasks and functions are the phase name with the _phase suffix. For example, the build phase function is <link target="build_phase" name="build_phase" original="&lt; build_phase &gt;">.</p><p>All processes associated with a task-based phase are killed when the phase ends. See <link target="uvm_phase::execute" name="uvm_phase::execute" original="&lt; uvm_phase::execute &gt;"> for more details.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: build_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::build_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_build_phase" name="uvm_build_phase" original="&lt; uvm_build_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_build_phase" name="uvm_build_phase" original="&lt; uvm_build_phase &gt;"> phase implementation method.</p><p>Any override should call super.build_phase(phase) to execute the automatic configuration of fields registed in the component by calling <link target="apply_config_settings" name="apply_config_settings" original="&lt; apply_config_settings &gt;">. To turn off automatic configuration for a component, do not call super.build_phase(phase).</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: connect_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::connect_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_connect_phase" name="uvm_connect_phase" original="&lt; uvm_connect_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_connect_phase" name="uvm_connect_phase" original="&lt; uvm_connect_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: end_of_elaboration_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::end_of_elaboration_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_end_of_elaboration_phase" name="uvm_end_of_elaboration_phase" original="&lt; uvm_end_of_elaboration_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_end_of_elaboration_phase" name="uvm_end_of_elaboration_phase" original="&lt; uvm_end_of_elaboration_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: start_of_simulation_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::start_of_simulation_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_start_of_simulation_phase" name="uvm_start_of_simulation_phase" original="&lt; uvm_start_of_simulation_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_start_of_simulation_phase" name="uvm_start_of_simulation_phase" original="&lt; uvm_start_of_simulation_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: run_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::run_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. Thn the phase will automatically ends once all objections are dropped using <i>phase.drop_objection()</i>.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>The run_phase task should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: pre_reset_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::pre_reset_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_pre_reset_phase" name="uvm_pre_reset_phase" original="&lt; uvm_pre_reset_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_pre_reset_phase" name="uvm_pre_reset_phase" original="&lt; uvm_pre_reset_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: reset_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::reset_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_reset_phase" name="uvm_reset_phase" original="&lt; uvm_reset_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_reset_phase" name="uvm_reset_phase" original="&lt; uvm_reset_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: post_reset_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::post_reset_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_post_reset_phase" name="uvm_post_reset_phase" original="&lt; uvm_post_reset_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_post_reset_phase" name="uvm_post_reset_phase" original="&lt; uvm_post_reset_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: pre_configure_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::pre_configure_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_pre_configure_phase" name="uvm_pre_configure_phase" original="&lt; uvm_pre_configure_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_pre_configure_phase" name="uvm_pre_configure_phase" original="&lt; uvm_pre_configure_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: configure_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::configure_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_configure_phase" name="uvm_configure_phase" original="&lt; uvm_configure_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_configure_phase" name="uvm_configure_phase" original="&lt; uvm_configure_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: post_configure_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::post_configure_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_post_configure_phase" name="uvm_post_configure_phase" original="&lt; uvm_post_configure_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_post_configure_phase" name="uvm_post_configure_phase" original="&lt; uvm_post_configure_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: pre_main_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::pre_main_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_pre_main_phase" name="uvm_pre_main_phase" original="&lt; uvm_pre_main_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_pre_main_phase" name="uvm_pre_main_phase" original="&lt; uvm_pre_main_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: main_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::main_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_main_phase" name="uvm_main_phase" original="&lt; uvm_main_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_main_phase" name="uvm_main_phase" original="&lt; uvm_main_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: post_main_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::post_main_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_post_main_phase" name="uvm_post_main_phase" original="&lt; uvm_post_main_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_post_main_phase" name="uvm_post_main_phase" original="&lt; uvm_post_main_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: pre_shutdown_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::pre_shutdown_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_pre_shutdown_phase" name="uvm_pre_shutdown_phase" original="&lt; uvm_pre_shutdown_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_pre_shutdown_phase" name="uvm_pre_shutdown_phase" original="&lt; uvm_pre_shutdown_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: shutdown_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::shutdown_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_shutdown_phase" name="uvm_shutdown_phase" original="&lt; uvm_shutdown_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_shutdown_phase" name="uvm_shutdown_phase" original="&lt; uvm_shutdown_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: post_shutdown_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::post_shutdown_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_post_shutdown_phase" name="uvm_post_shutdown_phase" original="&lt; uvm_post_shutdown_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_post_shutdown_phase" name="uvm_post_shutdown_phase" original="&lt; uvm_post_shutdown_phase &gt;"> phase implementation method.</p><p>This task returning or not does not indicate the end or persistence of this phase. It is necessary to raise an objection using <i>phase.raise_objection()</i> to cause the phase to persist. Once all components have dropped their respective objection using <i>phase.drop_objection()</i>, or if no components raises an objection, the phase is ended.</p><p>Any processes forked by this task continue to run after the task returns, but they will be killed once the phase ends.</p><p>This method should not be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: extract_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::extract_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_extract_phase" name="uvm_extract_phase" original="&lt; uvm_extract_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_extract_phase" name="uvm_extract_phase" original="&lt; uvm_extract_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: check_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::check_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_check_phase" name="uvm_check_phase" original="&lt; uvm_check_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_check_phase" name="uvm_check_phase" original="&lt; uvm_check_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: report_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::report_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_report_phase" name="uvm_report_phase" original="&lt; uvm_report_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_report_phase" name="uvm_report_phase" original="&lt; uvm_report_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: final_phase
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::final_phase)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="uvm_final_phase" name="uvm_final_phase" original="&lt; uvm_final_phase &gt;"> phase implementation method.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="uvm_final_phase" name="uvm_final_phase" original="&lt; uvm_final_phase &gt;"> phase implementation method.</p><p>This method should never be called directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: phase_started
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::phase_started)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Invoked at the start of each phase. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Invoked at the start of each phase. The <i>phase</i> argument specifies the phase being started. Any threads spawned in this callback are not affected when the phase ends.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: phase_ready_to_end
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::phase_ready_to_end)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Invoked when all objections to ending the given <i>phase</i> have been dropped, thus indicating that <i>phase</i> is ready to end. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Invoked when all objections to ending the given <i>phase</i> have been dropped, thus indicating that <i>phase</i> is ready to end. All this component's processes forked for the given phase will be killed upon return from this method. Components needing to consume delta cycles or advance time to perform a clean exit from the phase may raise the phase's objection.</p><blockquote><pre>phase.raise_objection(this,&quot;Reason&quot;);
</pre></blockquote><p>This effectively resets the wait-for-all-objections-dropped loop for <i>phase</i>. It is the responsibility of this component to drop the objection once it is ready for this phase to end (and processes killed).</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: phase_ended
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::phase_ended)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Invoked at the end of each phase. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Invoked at the end of each phase. The <i>phase</i> argument specifies the phase that is ending.  Any threads spawned in this callback are not affected when the phase ends.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_domain
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_domain)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Apply a phase domain to this component and, if <i>hier</i> is set, recursively to all its children.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Apply a phase domain to this component and, if <i>hier</i> is set, recursively to all its children.</p><p>Calls the virtual <link target="define_domain" name="define_domain" original="&lt; define_domain &gt;"> method, which derived components can override to augment or replace the domain definition of ita base class.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_domain
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_domain)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Return handle to the phase domain set on this component)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Return handle to the phase domain set on this component</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: define_domain
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::define_domain)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Builds custom phase schedules into the provided <i>domain</i> handle.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Builds custom phase schedules into the provided <i>domain</i> handle.</p><p>This method is called by <link target="set_domain" name="set_domain" original="&lt; set_domain &gt;">, which integrators use to specify this component belongs in a domain apart from the default 'uvm' domain.</p><p>Custom component base classes requiring a custom phasing schedule can augment or replace the domain definition they inherit by overriding <link target="defined_domain" name="defined_domain" original="&lt; defined_domain &gt;">. To augment, overrides would call super.define_domain(). To replace, overrides would not call super.define_domain().</p><p>The default implementation adds a copy of the <i>uvm</i> phasing schedule to the given <i>domain</i>, if one doesn't already exist, and only if the domain is currently empty.</p><p>Calling <link target="set_domain" name="set_domain" original="&lt; set_domain &gt;"> with the default <i>uvm</i> domain (see <link target="uvm_domain::get_uvm_domain" name="uvm_domain::get_uvm_domain" original="&lt; uvm_domain::get_uvm_domain &gt;">) on a component with no <i>define_domain</i> override effectively reverts the that component to using the default <i>uvm</i> domain. This may be useful if a branch of the testbench hierarchy defines a custom domain, but some child sub-branch should remain in the default <i>uvm</i> domain, call <link target="set_domain" name="set_domain" original="&lt; set_domain &gt;"> with a new domain instance handle with <i>hier</i> set. Then, in the sub-branch, call <link target="set_domain" name="set_domain" original="&lt; set_domain &gt;"> with the default <i>uvm</i> domain handle, obtained via <link target="uvm_domain::get_uvm_domain()" name="uvm_domain::get_uvm_domain()" original="&lt; uvm_domain::get_uvm_domain() &gt;">.</p><p>Alternatively, the integrator may define the graph in a new domain externally, then call <link target="set_domain" name="set_domain" original="&lt; set_domain &gt;"> to apply it to a component.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_phase_imp
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_phase_imp)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Override the default implementation for a phase on this component (tree) with a custom one, which must be created as a singleton object extending the default one and implementing required behavior in exec and traverse methods)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Override the default implementation for a phase on this component (tree) with a custom one, which must be created as a singleton object extending the default one and implementing required behavior in exec and traverse methods</p><p>The <i>hier</i> specifies whether to apply the custom functor to the whole tree or just this component.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: suspend
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::suspend)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Suspend this component.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Suspend this component.</p><p>This method must be implemented by the user to suspend the component according to the protocol and functionality it implements. A suspended component can be subsequently resumed using <link target="resume()" name="resume()" original="&lt; resume() &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: resume
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::resume)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Resume this component.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Resume this component.</p><p>This method must be implemented by the user to resume a component that was previously suspended using <link target="suspend()" name="suspend()" original="&lt; suspend() &gt;">. Some component may start in the suspended state and may need to be explicitly resumed.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: resolve_bindings
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::resolve_bindings)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Processes all port, export, and imp connections. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Processes all port, export, and imp connections. Checks whether each port's min and max connection requirements are met.</p><p>It is called just before the end_of_elaboration phase.</p><p>Users should not call directly.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Configuration Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Configuration Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Components can be designed to be user-configurable in terms of its topology (the type and number of children it has), mode of operation, and run-time parameters (knobs). )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Components can be designed to be user-configurable in terms of its topology (the type and number of children it has), mode of operation, and run-time parameters (knobs). The configuration interface accommodates this common need, allowing component composition and state to be modified without having to derive new classes or new class hierarchies for every configuration scenario.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_config_int
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_config_int)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_config_string
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_config_string)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_config_object
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_config_object)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Calling set_config_* causes configuration settings to be created and placed in a table internal to this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Calling set_config_* causes configuration settings to be created and placed in a table internal to this component. There are similar global methods that store settings in a global table. Each setting stores the supplied <i>inst_name</i>, <i>field_name</i>, and <i>value</i> for later use by descendent components during their construction. (The global table applies to all components and takes precedence over the component tables.)</p><p>When a descendant component calls a get_config_* method, the <i>inst_name</i> and <i>field_name</i> provided in the get call are matched against all the configuration settings stored in the global table and then in each component in the parent hierarchy, top-down. Upon the first match, the value stored in the configuration setting is returned. Thus, precedence is global, following by the top-level component, and so on down to the descendent component's parent.</p><p>These methods work in conjunction with the get_config_* methods to provide a configuration setting mechanism for integral, string, and uvm_object-based types. Settings of other types, such as virtual interfaces and arrays, can be indirectly supported by defining a class that contains them.</p><p>Both <i>inst_name</i> and <i>field_name</i> may contain wildcards.</p><ul><li>For set_config_int, <i>value</i> is an integral value that can be anything from 1 bit to 4096 bits.</li><li>For set_config_string, <i>value</i> is a string.</li><li>For set_config_object, <i>value</i> must be an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based object or null.  Its clone argument specifies whether the object should be cloned. If set, the object is cloned both going into the table (during the set) and coming out of the table (during the get), so that multiple components matched to the same setting (by way of wildcards) do not end up sharing the same object.</li></ul><p>See <link target="get_config_int" name="get_config_int" original="&lt; get_config_int &gt;">, <link target="get_config_string" name="get_config_string" original="&lt; get_config_string &gt;">, and <link target="get_config_object" name="get_config_object" original="&lt; get_config_object &gt;"> for information on getting the configurations set by these methods.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_config_int
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_config_int)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_config_string
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_config_string)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: get_config_object
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::get_config_object)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods retrieve configuration settings made by previous calls to their set_config_* counterparts. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods retrieve configuration settings made by previous calls to their set_config_* counterparts. As the methods' names suggest, there is direct support for integral types, strings, and objects.  Settings of other types can be indirectly supported by defining an object to contain them.</p><p>Configuration settings are stored in a global table and in each component instance. With each call to a get_config_* method, a top-down search is made for a setting that matches this component's full name and the given <i>field_name</i>. For example, say this component's full instance name is top.u1.u2. First, the global configuration table is searched. If that fails, then it searches the configuration table in component 'top', followed by top.u1.</p><p>The first instance/field that matches causes <i>value</i> to be written with the value of the configuration setting and 1 is returned. If no match is found, then <i>value</i> is unchanged and the 0 returned.</p><p>Calling the get_config_object method requires special handling. Because <i>value</i> is an output of type <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">, you must provide an uvm_object handle to assign to (<u>not</u> a derived class handle). After the call, you can then $cast to the actual type.</p><p>For example, the following code illustrates how a component designer might call upon the configuration mechanism to assign its <i>data</i> object property, whose type myobj_t derives from uvm_object.</p><blockquote><pre>class mycomponent extends uvm_component;

  local myobj_t data;

  function void build_phase(uvm_phase phase);
    uvm_object tmp;
    super.build_phase(phase);
    if(get_config_object(&quot;data&quot;, tmp))
      if (!$cast(data, tmp))
        $display(&quot;error! config setting for 'data' not of type myobj_t&quot;);
      endfunction
    ...
</pre></blockquote><p>The above example overrides the <link target="build_phase" name="build_phase" original="&lt; build_phase &gt;"> method. If you want to retain any base functionality, you must call super.build_phase(uvm_phase phase).</p><p>The <i>clone</i> bit clones the data inbound. The get_config_object method can also clone the data outbound.</p><p>See Members for information on setting the global configuration table.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: check_config_usage
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::check_config_usage)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Check all configuration settings in a components configuration table to determine if the setting has been used, overridden or not used. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Check all configuration settings in a components configuration table to determine if the setting has been used, overridden or not used. When <i>recurse</i> is 1 (default), configuration for this and all child components are recursively checked. This function is automatically called in the check phase, but can be manually called at any time.</p><p>To get all configuration information prior to the run phase, do something like this in your top object:</p><blockquote><pre>function void start_of_simulation_phase(uvm_phase phase);
  check_config_usage();
endfunction</pre></blockquote>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: apply_config_settings
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::apply_config_settings)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Searches for all config settings matching this component's instance path. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Searches for all config settings matching this component's instance path. For each match, the appropriate set_*_local method is called using the matching config setting's field_name and value. Provided the set_*_local method is implemented, the component property associated with the field_name is assigned the given value.</p><p>This function is called by <link target="uvm_component::build_phase" name="uvm_component::build_phase" original="&lt; uvm_component::build_phase &gt;">.</p><p>The apply_config_settings method determines all the configuration settings targeting this component and calls the appropriate set_*_local method to set each one. To work, you must override one or more set_*_local methods to accommodate setting of your component's specific properties. Any properties registered with the optional `uvm_*_field macros do not require special handling by the set_*_local methods; the macros provide the set_*_local functionality for you.</p><p>If you do not want apply_config_settings to be called for a component, then the build_phase() method should be overloaded and you should not call super.build_phase(phase). Likewise, apply_config_settings can be overloaded to customize automated configuration.</p><p>When the <i>verbose</i> bit is set, all overrides are printed as they are applied. If the component's <link target="print_config_matches" name="print_config_matches" original="&lt; print_config_matches &gt;"> property is set, then apply_config_settings is automatically called with <i>verbose</i> = 1.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_config_settings
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_config_settings)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Called without arguments, print_config_settings prints all configuration information for this component, as set by previous calls to set_config_*. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Called without arguments, print_config_settings prints all configuration information for this component, as set by previous calls to set_config_*. The settings are printing in the order of their precedence.</p><p>If <i>field</i> is specified and non-empty, then only configuration settings matching that field, if any, are printed. The field may not contain wildcards.</p><p>If <i>comp</i> is specified and non-null, then the configuration for that component is printed.</p><p>If <i>recurse</i> is set, then configuration information for all <i>comp</i>'s children and below are printed as well.</p><p>This function has been deprecated.  Use print_config instead.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_config
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_config)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Print_config_settings prints all configuration information for this component, as set by previous calls to set_config_* and exports to the resources pool. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Print_config_settings prints all configuration information for this component, as set by previous calls to set_config_* and exports to the resources pool.  The settings are printing in the order of their precedence.</p><p>If <i>recurse</i> is set, then configuration information for all children and below are printed as well.</p><p>if <i>audit</i> is set then the audit trail for each resource is printed along with the resource name and value</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_config_with_audit
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_config_with_audit)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Operates the same as print_config except that the audit bit is forced to 1. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Operates the same as print_config except that the audit bit is forced to 1.  This interface makes user code a bit more readable as it avoids multiple arbitrary bit settings in the argument list.</p><p>If <i>recurse</i> is set, then configuration information for all children and below are printed as well.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_config_matches
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_config_matches)
| | [uvm_component.svh] | [uvm_component] | | TopicType(variable)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Variable)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Setting this static variable causes get_config_* to print info about matching configuration settings as they are being applied.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Setting this static variable causes get_config_* to print info about matching configuration settings as they are being applied.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Objection Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Objection Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods provide object level hooks into the <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> mechanism.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods provide object level hooks into the <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> mechanism.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: raised
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::raised)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <i>raised</i> callback is called when this or a descendant of this component instance raises the specfied <i>objection</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <i>raised</i> callback is called when this or a descendant of this component instance raises the specfied <i>objection</i>. The <i>source_obj</i> is the object that originally raised the objection. The <i>description</i> is optionally provided by the <i>source_obj</i> to give a reason for raising the objection. The <i>count</i> indicates the number of objections raised by the <i>source_obj</i>.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: dropped
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::dropped)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <i>dropped</i> callback is called when this or a descendant of this component instance drops the specfied <i>objection</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <i>dropped</i> callback is called when this or a descendant of this component instance drops the specfied <i>objection</i>. The <i>source_obj</i> is the object that originally dropped the objection. The <i>description</i> is optionally provided by the <i>source_obj</i> to give a reason for dropping the objection. The <i>count</i> indicates the number of objections dropped by the the <i>source_obj</i>.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: all_dropped
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::all_dropped)
| | [uvm_component.svh] | [uvm_component] | | TopicType(task)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Task)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <i>all_droppped</i> callback is called when all objections have been dropped by this component and all its descendants. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <i>all_droppped</i> callback is called when all objections have been dropped by this component and all its descendants.  The <i>source_obj</i> is the object that dropped the last objection. The <i>description</i> is optionally provided by the <i>source_obj</i> to give a reason for raising the objection. The <i>count</i> indicates the number of objections dropped by the the <i>source_obj</i>.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Factory Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Factory Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The factory interface provides convenient access to a portion of UVM's <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;"> interface. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The factory interface provides convenient access to a portion of UVM's <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;"> interface. For creating new objects and components, the preferred method of accessing the factory is via the object or component wrapper (see <link target="uvm_component_registry #(T,Tname)" name="uvm_component_registry #(T,Tname)" original="&lt; uvm_component_registry #(T,Tname) &gt;"> and <link target="uvm_object_registry #(T,Tname)" name="uvm_object_registry #(T,Tname)" original="&lt; uvm_object_registry #(T,Tname) &gt;">). The wrapper also provides functions for setting type and instance overrides.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: create_component
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::create_component)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::create_component_by_name" name="uvm_factory::create_component_by_name" original="&lt; uvm_factory::create_component_by_name &gt;">, this method calls upon the factory to create a new child component whose type corresponds to the preregistered type name, <i>requested_type_name</i>, and instance name, <i>name</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::create_component_by_name" name="uvm_factory::create_component_by_name" original="&lt; uvm_factory::create_component_by_name &gt;">, this method calls upon the factory to create a new child component whose type corresponds to the preregistered type name, <i>requested_type_name</i>, and instance name, <i>name</i>. This method is equivalent to:</p><blockquote><pre>factory.create_component_by_name(requested_type_name,
                                 get_full_name(), name, this);
</pre></blockquote><p>If the factory determines that a type or instance override exists, the type of the component created may be different than the requested type. See <link target="set_type_override" name="set_type_override" original="&lt; set_type_override &gt;"> and <link target="set_inst_override" name="set_inst_override" original="&lt; set_inst_override &gt;">. See also <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;"> for details on factory operation.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: create_object
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::create_object)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::create_object_by_name" name="uvm_factory::create_object_by_name" original="&lt; uvm_factory::create_object_by_name &gt;">, this method calls upon the factory to create a new object whose type corresponds to the preregistered type name, <i>requested_type_name</i>, and instance name, <i>name</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::create_object_by_name" name="uvm_factory::create_object_by_name" original="&lt; uvm_factory::create_object_by_name &gt;">, this method calls upon the factory to create a new object whose type corresponds to the preregistered type name, <i>requested_type_name</i>, and instance name, <i>name</i>. This method is equivalent to:</p><blockquote><pre>factory.create_object_by_name(requested_type_name,
                              get_full_name(), name);
</pre></blockquote><p>If the factory determines that a type or instance override exists, the type of the object created may be different than the requested type.  See <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;"> for details on factory operation.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_type_override_by_type
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_type_override_by_type)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::set_type_override_by_type" name="uvm_factory::set_type_override_by_type" original="&lt; uvm_factory::set_type_override_by_type &gt;">, this method registers a factory override for components and objects created at this level of hierarchy or below. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::set_type_override_by_type" name="uvm_factory::set_type_override_by_type" original="&lt; uvm_factory::set_type_override_by_type &gt;">, this method registers a factory override for components and objects created at this level of hierarchy or below. This method is equivalent to:</p><blockquote><pre>factory.set_type_override_by_type(original_type, override_type,replace);
</pre></blockquote><p>The <i>relative_inst_path</i> is relative to this component and may include wildcards. The <i>original_type</i> represents the type that is being overridden. In subsequent calls to <link target="uvm_factory::create_object_by_type" name="uvm_factory::create_object_by_type" original="&lt; uvm_factory::create_object_by_type &gt;"> or <link target="uvm_factory::create_component_by_type" name="uvm_factory::create_component_by_type" original="&lt; uvm_factory::create_component_by_type &gt;">, if the requested_type matches the <i>original_type</i> and the instance paths match, the factory will produce the <i>override_type</i>.</p><p>The original and override type arguments are lightweight proxies to the types they represent. See <link target="set_inst_override_by_type" name="set_inst_override_by_type" original="&lt; set_inst_override_by_type &gt;"> for information on usage.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_inst_override_by_type
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_inst_override_by_type)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::set_inst_override_by_type" name="uvm_factory::set_inst_override_by_type" original="&lt; uvm_factory::set_inst_override_by_type &gt;">, this method registers a factory override for components and objects created at this level of hierarchy or below. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::set_inst_override_by_type" name="uvm_factory::set_inst_override_by_type" original="&lt; uvm_factory::set_inst_override_by_type &gt;">, this method registers a factory override for components and objects created at this level of hierarchy or below. In typical usage, this method is equivalent to:</p><blockquote><pre>factory.set_inst_override_by_type({get_full_name(),&quot;.&quot;,
                                   relative_inst_path},
                                   original_type,
                                   override_type);
</pre></blockquote><p>The <i>relative_inst_path</i> is relative to this component and may include wildcards. The <i>original_type</i> represents the type that is being overridden. In subsequent calls to <link target="uvm_factory::create_object_by_type" name="uvm_factory::create_object_by_type" original="&lt; uvm_factory::create_object_by_type &gt;"> or <link target="uvm_factory::create_component_by_type" name="uvm_factory::create_component_by_type" original="&lt; uvm_factory::create_component_by_type &gt;">, if the requested_type matches the <i>original_type</i> and the instance paths match, the factory will produce the <i>override_type</i>.</p><p>The original and override types are lightweight proxies to the types they represent. They can be obtained by calling <i>type::get_type()</i>, if implemented by <i>type</i>, or by directly calling <i>type::type_id::get()</i>, where <i>type</i> is the user type and <i>type_id</i> is the name of the typedef to <link target="uvm_object_registry #(T,Tname)" name="uvm_object_registry #(T,Tname)" original="&lt; uvm_object_registry #(T,Tname) &gt;"> or <link target="uvm_component_registry #(T,Tname)" name="uvm_component_registry #(T,Tname)" original="&lt; uvm_component_registry #(T,Tname) &gt;">.</p><p>If you are employing the `uvm_*_utils macros, the typedef and the get_type method will be implemented for you. For details on the utils macros refer to <link target="Utility and Field Macros for Components and Objects" name="Utility and Field Macros for Components and Objects" original="&lt; Utility and Field Macros for Components and Objects &gt;">.</p><h4 class=CHeading> The following example shows `uvm_*_utils usage</h4><blockquote><pre>class comp extends uvm_component;
  `uvm_component_utils(comp)
  ...
endclass

class mycomp extends uvm_component;
  `uvm_component_utils(mycomp)
  ...
endclass

class block extends uvm_component;
  `uvm_component_utils(block)
  comp c_inst;
  virtual function void build_phase(uvm_phase phase);
    set_inst_override_by_type(&quot;c_inst&quot;,comp::get_type(),
                                       mycomp::get_type());
  endfunction
  ...
endclass</pre></blockquote>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_type_override
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_type_override)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::set_type_override_by_name" name="uvm_factory::set_type_override_by_name" original="&lt; uvm_factory::set_type_override_by_name &gt;">, this method configures the factory to create an object of type <i>override_type_name</i> whenever the factory is asked to produce a type represented by <i>original_type_name</i>. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::set_type_override_by_name" name="uvm_factory::set_type_override_by_name" original="&lt; uvm_factory::set_type_override_by_name &gt;">, this method configures the factory to create an object of type <i>override_type_name</i> whenever the factory is asked to produce a type represented by <i>original_type_name</i>.  This method is equivalent to:</p><blockquote><pre>factory.set_type_override_by_name(original_type_name,
                                  override_type_name, replace);
</pre></blockquote><p>The <i>original_type_name</i> typically refers to a preregistered type in the factory. It may, however, be any arbitrary string. Subsequent calls to create_component or create_object with the same string and matching instance path will produce the type represented by override_type_name. The <i>override_type_name</i> must refer to a preregistered type in the factory.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_inst_override
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_inst_override)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(A convenience function for <link target="uvm_factory::set_inst_override_by_name" name="uvm_factory::set_inst_override_by_name" original="&lt; uvm_factory::set_inst_override_by_name &gt;">, this method registers a factory override for components created at this level of hierarchy or below. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>A convenience function for <link target="uvm_factory::set_inst_override_by_name" name="uvm_factory::set_inst_override_by_name" original="&lt; uvm_factory::set_inst_override_by_name &gt;">, this method registers a factory override for components created at this level of hierarchy or below. In typical usage, this method is equivalent to:</p><blockquote><pre>factory.set_inst_override_by_name({get_full_name(),&quot;.&quot;,
                                   relative_inst_path},
                                    original_type_name,
                                   override_type_name);
</pre></blockquote><p>The <i>relative_inst_path</i> is relative to this component and may include wildcards. The <i>original_type_name</i> typically refers to a preregistered type in the factory. It may, however, be any arbitrary string. Subsequent calls to create_component or create_object with the same string and matching instance path will produce the type represented by <i>override_type_name</i>. The <i>override_type_name</i> must refer to a preregistered type in the factory.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_override_info
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_override_info)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This factory debug method performs the same lookup process as create_object and create_component, but instead of creating an object, it prints information about what type of object would be created given the provided arguments.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This factory debug method performs the same lookup process as create_object and create_component, but instead of creating an object, it prints information about what type of object would be created given the provided arguments.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Hierarchical Reporting Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Hierarchical Reporting Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This interface provides versions of the set_report_* methods in the <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> base class that are applied recursively to this component and all its children.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This interface provides versions of the set_report_* methods in the <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> base class that are applied recursively to this component and all its children.</p><p>When a report is issued and its associated action has the LOG bit set, the report will be sent to its associated FILE descriptor.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_id_verbosity_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_id_verbosity_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_severity_id_verbosity_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_severity_id_verbosity_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods recursively associate the specified verbosity with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods recursively associate the specified verbosity with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. An verbosity associated with a particular severity-id pair takes precedence over an verbosity associated with id, which takes precedence over an an verbosity associated with a severity.</p><p>For a list of severities and their default verbosities, refer to <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_severity_action_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_severity_action_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_id_action_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_id_action_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_severity_id_action_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_severity_id_action_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods recursively associate the specified action with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods recursively associate the specified action with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. An action associated with a particular severity-id pair takes precedence over an action associated with id, which takes precedence over an an action associated with a severity.</p><p>For a list of severities and their default actions, refer to <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_default_file_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_default_file_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_severity_file_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_severity_file_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_id_file_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_id_file_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary()
| | [uvm_component.svh] | [uvm_component] | | Body()
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_severity_id_file_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_severity_id_file_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods recursively associate the specified FILE descriptor with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods recursively associate the specified FILE descriptor with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. A FILE associated with a particular severity-id pair takes precedence over a FILE associated with id, which take precedence over an a FILE associated with a severity, which takes precedence over the default FILE descriptor.</p><p>For a list of severities and other information related to the report mechanism, refer to <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: set_report_verbosity_level_hier
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::set_report_verbosity_level_hier)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This method recursively sets the maximum verbosity level for reports for this component and all those below it. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This method recursively sets the maximum verbosity level for reports for this component and all those below it. Any report from this component subtree whose verbosity exceeds this maximum will be ignored.</p><p>See <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;"> for a list of predefined message verbosity levels and their meaning.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: pre_abort
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::pre_abort)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This callback is executed when the message system is executing a <link target="UVM_EXIT" name="UVM_EXIT" original="&lt; UVM_EXIT &gt;"> action. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This callback is executed when the message system is executing a <link target="UVM_EXIT" name="UVM_EXIT" original="&lt; UVM_EXIT &gt;"> action. The exit action causes an immediate termination of the simulation, but the pre_abort callback hook gives components an opportunity to provide additional information to the user before the termination happens. For example, a test may want to executed the report function of a particular component even when an error condition has happened to force a premature termination you would write a function like:</p><blockquote><pre>function void mycomponent::pre_abort();
  report();
endfunction
</pre></blockquote><p>The pre_abort() callback hooks are called in a bottom-up fashion.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: Recording Interface
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(Recording Interface)
| | [uvm_component.svh] | [uvm_component] | | TopicType(group)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Group)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(These methods comprise the component-based transaction recording interface. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>These methods comprise the component-based transaction recording interface. The methods can be used to record the transactions that this component &quot;sees&quot;, i.e. produces or consumes.</p><p>The API and implementation are subject to change once a vendor-independent use-model is determined.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: accept_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::accept_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks the acceptance of a transaction, <i>tr</i>, by this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks the acceptance of a transaction, <i>tr</i>, by this component. Specifically, it performs the following actions:</p><ul><li>Calls the <i>tr</i>'s <link target="uvm_transaction::accept_tr" name="uvm_transaction::accept_tr" original="&lt; uvm_transaction::accept_tr &gt;"> method, passing to it the <i>accept_time</i> argument.</li><li>Calls this component's <link target="do_accept_tr" name="do_accept_tr" original="&lt; do_accept_tr &gt;"> method to allow for any post-begin action in derived classes.</li><li>Triggers the component's internal accept_tr event. Any processes waiting on this event will resume in the next delta cycle.</li></ul>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: do_accept_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::do_accept_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;"> method calls this function to accommodate any user-defined post-accept action. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;"> method calls this function to accommodate any user-defined post-accept action. Implementations should call super.do_accept_tr to ensure correct operation.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: begin_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::begin_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks the start of a transaction, <i>tr</i>, by this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks the start of a transaction, <i>tr</i>, by this component. Specifically, it performs the following actions:</p><ul><li>Calls <i>tr</i>'s <link target="uvm_transaction::begin_tr" name="uvm_transaction::begin_tr" original="&lt; uvm_transaction::begin_tr &gt;"> method, passing to it the <i>begin_time</i> argument. The <i>begin_time</i> should be greater than or equal to the accept time. By default, when <i>begin_time</i> = 0, the current simulation time is used.</li></ul><p>If recording is enabled (recording_detail != UVM_OFF), then a new database-transaction is started on the component's transaction stream given by the stream argument. No transaction properties are recorded at this time.</p><ul><li>Calls the component's <link target="do_begin_tr" name="do_begin_tr" original="&lt; do_begin_tr &gt;"> method to allow for any post-begin action in derived classes.</li><li>Triggers the component's internal begin_tr event. Any processes waiting on this event will resume in the next delta cycle.</li></ul><p>A handle to the transaction is returned. The meaning of this handle, as well as the interpretation of the arguments <i>stream_name</i>, <i>label</i>, and <i>desc</i> are vendor specific.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: begin_child_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::begin_child_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks the start of a child transaction, <i>tr</i>, by this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks the start of a child transaction, <i>tr</i>, by this component. Its operation is identical to that of <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;">, except that an association is made between this transaction and the provided parent transaction. This association is vendor-specific.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: do_begin_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::do_begin_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> methods call this function to accommodate any user-defined post-begin action. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> methods call this function to accommodate any user-defined post-begin action. Implementations should call super.do_begin_tr to ensure correct operation.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: end_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::end_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks the end of a transaction, <i>tr</i>, by this component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks the end of a transaction, <i>tr</i>, by this component. Specifically, it performs the following actions:</p><ul><li>Calls <i>tr</i>'s <link target="uvm_transaction::end_tr" name="uvm_transaction::end_tr" original="&lt; uvm_transaction::end_tr &gt;"> method, passing to it the <i>end_time</i> argument. The <i>end_time</i> must at least be greater than the begin time. By default, when <i>end_time</i> = 0, the current simulation time is used.</li></ul><p>The transaction's properties are recorded to the database-transaction on which it was started, and then the transaction is ended. Only those properties handled by the transaction's do_record method (and optional `uvm_*_field macros) are recorded.</p><ul><li>Calls the component's <link target="do_end_tr" name="do_end_tr" original="&lt; do_end_tr &gt;"> method to accommodate any post-end action in derived classes.</li><li>Triggers the component's internal end_tr event. Any processes waiting on this event will resume in the next delta cycle.</li></ul><p>The <i>free_handle</i> bit indicates that this transaction is no longer needed. The implementation of free_handle is vendor-specific.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: do_end_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::do_end_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(The <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;"> method calls this function to accommodate any user-defined post-end action. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>The <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;"> method calls this function to accommodate any user-defined post-end action. Implementations should call super.do_end_tr to ensure correct operation.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: record_error_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::record_error_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks an error transaction by a component. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks an error transaction by a component. Properties of the given uvm_object, <i>info</i>, as implemented in its <link target="uvm_object::do_record" name="uvm_object::do_record" original="&lt; uvm_object::do_record &gt;"> method, are recorded to the transaction database.</p><p>An <i>error_time</i> of 0 indicates to use the current simulation time. The <i>keep_active</i> bit determines if the handle should remain active. If 0, then a zero-length error transaction is recorded. A handle to the database-transaction is returned.</p><p>Interpretation of this handle, as well as the strings <i>stream_name</i>, <i>label</i>, and <i>desc</i>, are vendor-specific.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: record_event_tr
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::record_event_tr)
| | [uvm_component.svh] | [uvm_component] | | TopicType(function)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Function)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This function marks an event transaction by a component.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This function marks an event transaction by a component.</p><p>An <i>event_time</i> of 0 indicates to use the current simulation time.</p><p>A handle to the transaction is returned. The <i>keep_active</i> bit determines if the handle may be used for other vendor-specific purposes.</p><p>The strings for <i>stream_name</i>, <i>label</i>, and <i>desc</i> are vendor-specific identifiers for the transaction.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: print_enabled
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::print_enabled)
| | [uvm_component.svh] | [uvm_component] | | TopicType(variable)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Variable)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(This bit determines if this component should automatically be printed as a child of its parent object.)
| | [uvm_component.svh] | [uvm_component] | | Body(<p>This bit determines if this component should automatically be printed as a child of its parent object.</p><p>By default, all children are printed. However, this bit allows a parent component to disable the printing of specific children.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | TopicTitle: recorder
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] | [uvm_component] | | QualifiedName(uvm_pkg::uvm_component::recorder)
| | [uvm_component.svh] | [uvm_component] | | TopicType(variable)
| | [uvm_component.svh] | [uvm_component] | | Keyword(Variable)
| | [uvm_component.svh] | [uvm_component] | | NumChilderen(0)
| | [uvm_component.svh] | [uvm_component] | | Summary(Specifies the <link target="uvm_recorder" name="uvm_recorder" original="&lt; uvm_recorder &gt;"> object to use for <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and other methods in the <link target="Recording Interface" name="Recording Interface" original="&lt; Recording Interface &gt;">. )
| | [uvm_component.svh] | [uvm_component] | | Body(<p>Specifies the <link target="uvm_recorder" name="uvm_recorder" original="&lt; uvm_recorder &gt;"> object to use for <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and other methods in the <link target="Recording Interface" name="Recording Interface" original="&lt; Recording Interface &gt;">. Default is <link target="uvm_default_recorder" name="uvm_default_recorder" original="&lt; uvm_default_recorder &gt;">.</p>)
| | [uvm_component.svh] | [uvm_component] | +-------------------------------------------------------------------
| | [uvm_component.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_config_db.svh
| +-------------------------------------------------------------------
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | TopicTitle: UVM Configuration Database
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | QualifiedName(UVM Configuration Database)
| | [uvm_config_db.svh] | TopicType(section)
| | [uvm_config_db.svh] | Keyword(Title)
| | [uvm_config_db.svh] | NumChilderen(0)
| | [uvm_config_db.svh] | Summary(Topic: Intro)
| | [uvm_config_db.svh] | Body(<p>Topic: Intro</p><p>The <link target="uvm_config_db" name="uvm_config_db" original="&lt; uvm_config_db &gt;"> class provides a convenience interface on top of the <link target="uvm_resource_db" name="uvm_resource_db" original="&lt; uvm_resource_db &gt;"> to simplify the basic interface that is used for configuring <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> instances.</p><p>If the run-time <i>+UVM_CONFIG_DB_TRACE</i> command line option is specified, all configuration DB accesses (read and write) are displayed.</p>)
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | TopicTitle: uvm_config_db
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | QualifiedName(uvm_pkg::uvm_config_db)
| | [uvm_config_db.svh] | TopicType(class)
| | [uvm_config_db.svh] | Keyword(class)
| | [uvm_config_db.svh] | NumChilderen(4)
| | [uvm_config_db.svh] | Summary(All of the functions in uvm_config_db#(T) are static, so they must be called using the :: operator. )
| | [uvm_config_db.svh] | Body(<p>All of the functions in uvm_config_db#(T) are static, so they must be called using the :: operator.  For example:</p><blockquote><pre>uvm_config_db#(int)::set(this, &quot;*&quot;, &quot;A&quot;);
</pre></blockquote><p>The parameter value &quot;int&quot; identifies the configuration type as an int property.</p><p>The <link target="set" name="set" original="&lt; set &gt;"> and <link target="get" name="get" original="&lt; get &gt;"> methods provide the same api and semantics as the set/get_config_* functions in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">.</p>)
| | [uvm_config_db.svh] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | | Children
| | [uvm_config_db.svh] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicTitle: get
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | QualifiedName(uvm_pkg::uvm_config_db::get)
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | Keyword(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db] | | Summary(Get the value for <i>field_name</i> in <i>inst_name</i>, using component <i>cntxt</i> as the starting search point. )
| | [uvm_config_db.svh] | [uvm_config_db] | | Body(<p>Get the value for <i>field_name</i> in <i>inst_name</i>, using component <i>cntxt</i> as the starting search point. <i>inst_name</i> is an explicit instance name relative to <i>cntxt</i> and may be an empty string if the <i>cntxt</i> is the instance that the configuration object applies to. <i>field_name</i> is the specific field in the scope that is being searched for.</p><p>The basic get_config_* methods from <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> are mapped to this function as:</p><blockquote><pre>get_config_int(...) =&gt; uvm_config_db#(uvm_bitstream_t)::get(cntxt,...)
get_config_string(...) =&gt; uvm_config_db#(string)::get(cntxt,...)
get_config_object(...) =&gt; uvm_config_db#(uvm_object)::get(cntxt,...)</pre></blockquote>)
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicTitle: set
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | QualifiedName(uvm_pkg::uvm_config_db::set)
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | Keyword(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db] | | Summary(Create a new or update an existing configuration setting for <i>field_name</i> in <i>inst_name</i> from <i>cntxt</i>. )
| | [uvm_config_db.svh] | [uvm_config_db] | | Body(<p>Create a new or update an existing configuration setting for <i>field_name</i> in <i>inst_name</i> from <i>cntxt</i>. The setting is made at <i>cntxt</i>, with the full name of <i>cntxt</i> added to the <i>inst_name</i>. If <i>cntxt</i> is null then <i>inst_name</i> provides the complete scope information of the setting. <i>field_name</i> is the target field. Both <i>inst_name</i> and <i>field_name</i> may be glob style or regular expression style expressions.</p><p>If a setting is made at build time, the <i>cntxt</i> hierarchy is used to determine the setting's precedence in the database. Settings from hierarchically higher levels have higher precedence. Settings from the same level of hierarchy have a last setting wins semantic. A precedence setting of <link target="uvm_resource_base::default_precedence" name="uvm_resource_base::default_precedence" original="&lt; uvm_resource_base::default_precedence &gt;">  is used for uvm_top, and each hierarcical level below the top is decremented by 1.</p><p>After build time, all settings use the default precedence and thus have a last wins semantic. So, if at run time, a low level component makes a runtime setting of some field, that setting will have precedence over a setting from the test level that was made earlier in the simulation.</p><p>The basic set_config_* methods from <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> are mapped to this function as:</p><blockquote><pre>set_config_int(...) =&gt; uvm_config_db#(uvm_bitstream_t)::set(cntxt,...)
set_config_string(...) =&gt; uvm_config_db#(string)::set(cntxt,...)
set_config_object(...) =&gt; uvm_config_db#(uvm_object)::set(cntxt,...)</pre></blockquote>)
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicTitle: exists
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | QualifiedName(uvm_pkg::uvm_config_db::exists)
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | Keyword(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db] | | Summary(Check if a value for <i>field_name</i> is available in <i>inst_name</i>, using component <i>cntxt</i> as the starting search point. )
| | [uvm_config_db.svh] | [uvm_config_db] | | Body(<p>Check if a value for <i>field_name</i> is available in <i>inst_name</i>, using component <i>cntxt</i> as the starting search point. <i>inst_name</i> is an explicit instance name relative to <i>cntxt</i> and may be an empty string if the <i>cntxt</i> is the instance that the configuration object applies to. <i>field_name</i> is the specific field in the scope that is being searched for. The <i>spell_chk</i> arg can be set to 1 to turn spell checking on if it is expected that the field should exist in the database. The function returns 1 if a config parameter exists and 0 if it doesn't exist.</p>)
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicTitle: wait_modified
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db] | | QualifiedName(uvm_pkg::uvm_config_db::wait_modified)
| | [uvm_config_db.svh] | [uvm_config_db] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db] | | Keyword(Function)
| | [uvm_config_db.svh] | [uvm_config_db] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db] | | Summary(Wait for a configuration setting to be set for <i>field_name</i> in <i>cntxt</i> and <i>inst_name</i>. )
| | [uvm_config_db.svh] | [uvm_config_db] | | Body(<p>Wait for a configuration setting to be set for <i>field_name</i> in <i>cntxt</i> and <i>inst_name</i>. The task blocks until a new configuration setting is applied that effects the specified field.</p>)
| | [uvm_config_db.svh] | [uvm_config_db] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | TopicTitle: uvm_config_db_options
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| | [uvm_config_db.svh] | QualifiedName(uvm_pkg::uvm_config_db_options)
| | [uvm_config_db.svh] | TopicType(class)
| | [uvm_config_db.svh] | Keyword(Class)
| | [uvm_config_db.svh] | NumChilderen(3)
| | [uvm_config_db.svh] | Summary(Provides a namespace for managing options for the configuration DB facility. )
| | [uvm_config_db.svh] | Body(<p>Provides a namespace for managing options for the configuration DB facility.  The only thing allowed in this class is static local data members and static functions for manipulating and retrieving the value of the data members.  The static local data members represent options and settings that control the behavior of the configuration DB facility.</p>)
| | [uvm_config_db.svh] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | | Children
| | [uvm_config_db.svh] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicTitle: turn_on_tracing
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | QualifiedName(uvm_pkg::uvm_config_db_options::turn_on_tracing)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Keyword(Function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Summary(Turn tracing on for the configuration database. )
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Body(<p>Turn tracing on for the configuration database. This causes all reads and writes to the database to display information about the accesses. Tracing is off by default.</p><p>This method is implicitly called by the <i>+UVM_CONFIG_DB_TRACE</i>.</p>)
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicTitle: turn_off_tracing
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | QualifiedName(uvm_pkg::uvm_config_db_options::turn_off_tracing)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Keyword(Function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Summary(Turn tracing off for the configuration database.)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Body(<p>Turn tracing off for the configuration database.</p>)
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicTitle: is_tracing
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] | [uvm_config_db_options] | | QualifiedName(uvm_pkg::uvm_config_db_options::is_tracing)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | TopicType(function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Keyword(Function)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | NumChilderen(0)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Summary(Returns 1 if the tracing facility is on and 0 if it is off.)
| | [uvm_config_db.svh] | [uvm_config_db_options] | | Body(<p>Returns 1 if the tracing facility is on and 0 if it is off.</p>)
| | [uvm_config_db.svh] | [uvm_config_db_options] | +-------------------------------------------------------------------
| | [uvm_config_db.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_domain.svh
| +-------------------------------------------------------------------
| | [uvm_domain.svh] +-------------------------------------------------------------------
| | [uvm_domain.svh] | TopicTitle: uvm_domain
| | [uvm_domain.svh] +-------------------------------------------------------------------
| | [uvm_domain.svh] | QualifiedName(uvm_pkg::uvm_domain)
| | [uvm_domain.svh] | TopicType(class)
| | [uvm_domain.svh] | Keyword(Class)
| | [uvm_domain.svh] | NumChilderen(7)
| | [uvm_domain.svh] | Summary(Phasing schedule node representing an independent branch of the schedule. )
| | [uvm_domain.svh] | Body(<p>Phasing schedule node representing an independent branch of the schedule. Handle used to assign domains to components or hierarchies in the testbench</p>)
| | [uvm_domain.svh] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | | Children
| | [uvm_domain.svh] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: get_domains
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::get_domains)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Provides a list of all domains in the provided <i>domains</i> argument.)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Provides a list of all domains in the provided <i>domains</i> argument.</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: get_uvm_schedule
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::get_uvm_schedule)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Get the &quot;UVM&quot; schedule, which consists of the run-time phases that all components execute when participating in the &quot;UVM&quot; domain.)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Get the &quot;UVM&quot; schedule, which consists of the run-time phases that all components execute when participating in the &quot;UVM&quot; domain.</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: get_common_domain
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::get_common_domain)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Get the &quot;common&quot; domain, which consists of the common phases that all components execute in sync with each other. )
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Get the &quot;common&quot; domain, which consists of the common phases that all components execute in sync with each other. Phases in the &quot;common&quot; domain are build, connect, end_of_elaboration, start_of_simulation, run, extract, check, report, and final.</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: add_uvm_phases
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::add_uvm_phases)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Appends to the given <i>schedule</i> the built-in UVM phases.)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Appends to the given <i>schedule</i> the built-in UVM phases.</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: get_uvm_domain
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::get_uvm_domain)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Get a handle to the singleton <i>uvm</i> domain)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Get a handle to the singleton <i>uvm</i> domain</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: new
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::new)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(Create a new instance of a phase domain.)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>Create a new instance of a phase domain.</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | TopicTitle: jump
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] | [uvm_domain] | | QualifiedName(uvm_pkg::uvm_domain::jump)
| | [uvm_domain.svh] | [uvm_domain] | | TopicType(function)
| | [uvm_domain.svh] | [uvm_domain] | | Keyword(Function)
| | [uvm_domain.svh] | [uvm_domain] | | NumChilderen(0)
| | [uvm_domain.svh] | [uvm_domain] | | Summary(jumps all active phases of this domain to to-phase if there is a path between active-phase and to-phase)
| | [uvm_domain.svh] | [uvm_domain] | | Body(<p>jumps all active phases of this domain to to-phase if there is a path between active-phase and to-phase</p>)
| | [uvm_domain.svh] | [uvm_domain] | +-------------------------------------------------------------------
| | [uvm_domain.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_driver.svh
| +-------------------------------------------------------------------
| | [uvm_driver.svh] +-------------------------------------------------------------------
| | [uvm_driver.svh] | TopicTitle: uvm_driver #(REQ,RSP)
| | [uvm_driver.svh] +-------------------------------------------------------------------
| | [uvm_driver.svh] | QualifiedName(uvm_driver #(REQ,RSP))
| | [uvm_driver.svh] | TopicType(class)
| | [uvm_driver.svh] | Keyword(CLASS)
| | [uvm_driver.svh] | NumChilderen(1)
| | [uvm_driver.svh] | Summary(The base class for drivers that initiate requests for new transactions via a uvm_seq_item_pull_port. )
| | [uvm_driver.svh] | Body(<p>The base class for drivers that initiate requests for new transactions via a uvm_seq_item_pull_port. The ports are typically connected to the exports of an appropriate sequencer component.</p><p>This driver operates in pull mode. Its ports are typically connected to the corresponding exports in a pull sequencer as follows:</p><blockquote><pre>driver.seq_item_port.connect(sequencer.seq_item_export);
driver.rsp_port.connect(sequencer.rsp_export);
</pre></blockquote><p>The <i>rsp_port</i> needs connecting only if the driver will use it to write responses to the analysis export in the sequencer.</p>)
| | [uvm_driver.svh] | +-------------------------------------------------------------------
| | [uvm_driver.svh] | | Children
| | [uvm_driver.svh] | +-------------------------------------------------------------------
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | TopicTitle: new
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | TopicType(function)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | Keyword(Function)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_driver.svh] | [uvm_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_driver.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_env.svh
| +-------------------------------------------------------------------
| | [uvm_env.svh] +-------------------------------------------------------------------
| | [uvm_env.svh] | TopicTitle: uvm_env
| | [uvm_env.svh] +-------------------------------------------------------------------
| | [uvm_env.svh] | QualifiedName(uvm_pkg::uvm_env)
| | [uvm_env.svh] | TopicType(class)
| | [uvm_env.svh] | Keyword(CLASS)
| | [uvm_env.svh] | NumChilderen(1)
| | [uvm_env.svh] | Summary(The base class for hierarchical containers of other components that together comprise a complete environment. )
| | [uvm_env.svh] | Body(<p>The base class for hierarchical containers of other components that together comprise a complete environment. The environment may initially consist of the entire testbench. Later, it can be reused as a sub-environment in even larger system-level environments.</p>)
| | [uvm_env.svh] | +-------------------------------------------------------------------
| | [uvm_env.svh] | | Children
| | [uvm_env.svh] | +-------------------------------------------------------------------
| | [uvm_env.svh] | [uvm_env] | +-------------------------------------------------------------------
| | [uvm_env.svh] | [uvm_env] | | TopicTitle: new
| | [uvm_env.svh] | [uvm_env] | +-------------------------------------------------------------------
| | [uvm_env.svh] | [uvm_env] | | QualifiedName(uvm_pkg::uvm_env::new)
| | [uvm_env.svh] | [uvm_env] | | TopicType(function)
| | [uvm_env.svh] | [uvm_env] | | Keyword(Function)
| | [uvm_env.svh] | [uvm_env] | | NumChilderen(0)
| | [uvm_env.svh] | [uvm_env] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_env.svh] | [uvm_env] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_env.svh] | [uvm_env] | +-------------------------------------------------------------------
| | [uvm_env.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_event.svh
| +-------------------------------------------------------------------
| | [uvm_event.svh] +-------------------------------------------------------------------
| | [uvm_event.svh] | TopicTitle: uvm_event
| | [uvm_event.svh] +-------------------------------------------------------------------
| | [uvm_event.svh] | QualifiedName(uvm_pkg::uvm_event)
| | [uvm_event.svh] | TopicType(class)
| | [uvm_event.svh] | Keyword(CLASS)
| | [uvm_event.svh] | NumChilderen(17)
| | [uvm_event.svh] | Summary(The uvm_event class is a wrapper class around the SystemVerilog event construct. )
| | [uvm_event.svh] | Body(<p>The uvm_event class is a wrapper class around the SystemVerilog event construct.  It provides some additional services such as setting callbacks and maintaining the number of waiters.</p>)
| | [uvm_event.svh] | +-------------------------------------------------------------------
| | [uvm_event.svh] | | Children
| | [uvm_event.svh] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: new
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::new)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Creates a new event object.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Creates a new event object.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_on
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_on)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Waits for the event to be activated for the first time.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Waits for the event to be activated for the first time.</p><p>If the event has already been triggered, this task returns immediately. If <i>delta</i> is set, the caller will be forced to wait a single delta #0 before returning. This prevents the caller from returning before previously waiting processes have had a chance to resume.</p><p>Once an event has been triggered, it will be remain &quot;on&quot; until the event is <link target="reset" name="reset" original="&lt; reset &gt;">.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_off
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_off)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(If the event has already triggered and is &quot;on&quot;, this task waits for the event to be turned &quot;off&quot; via a call to <link target="reset" name="reset" original="&lt; reset &gt;">.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>If the event has already triggered and is &quot;on&quot;, this task waits for the event to be turned &quot;off&quot; via a call to <link target="reset" name="reset" original="&lt; reset &gt;">.</p><p>If the event has not already been triggered, this task returns immediately. If <i>delta</i> is set, the caller will be forced to wait a single delta #0 before returning. This prevents the caller from returning before previously waiting processes have had a chance to resume.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_trigger
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_trigger)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Waits for the event to be triggered.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Waits for the event to be triggered.</p><p>If one process calls wait_trigger in the same delta as another process calls <link target="trigger" name="trigger" original="&lt; trigger &gt;">, a race condition occurs. If the call to wait occurs before the trigger, this method will return in this delta. If the wait occurs after the trigger, this method will not return until the next trigger, which may never occur and thus cause deadlock.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_ptrigger
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_ptrigger)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Waits for a persistent trigger of the event. )
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Waits for a persistent trigger of the event. Unlike <link target="wait_trigger" name="wait_trigger" original="&lt; wait_trigger &gt;">, this views the trigger as persistent within a given time-slice and thus avoids certain race conditions. If this method is called after the trigger but within the same time-slice, the caller returns immediately.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_trigger_data
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_trigger_data)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(This method calls <link target="wait_trigger" name="wait_trigger" original="&lt; wait_trigger &gt;"> followed by <link target="get_trigger_data" name="get_trigger_data" original="&lt; get_trigger_data &gt;">.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>This method calls <link target="wait_trigger" name="wait_trigger" original="&lt; wait_trigger &gt;"> followed by <link target="get_trigger_data" name="get_trigger_data" original="&lt; get_trigger_data &gt;">.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: wait_ptrigger_data
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::wait_ptrigger_data)
| | [uvm_event.svh] | [uvm_event] | | TopicType(task)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Task)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(This method calls <link target="wait_ptrigger" name="wait_ptrigger" original="&lt; wait_ptrigger &gt;"> followed by <link target="get_trigger_data" name="get_trigger_data" original="&lt; get_trigger_data &gt;">.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>This method calls <link target="wait_ptrigger" name="wait_ptrigger" original="&lt; wait_ptrigger &gt;"> followed by <link target="get_trigger_data" name="get_trigger_data" original="&lt; get_trigger_data &gt;">.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: trigger
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::trigger)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Triggers the event, resuming all waiting processes.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Triggers the event, resuming all waiting processes.</p><p>An optional <i>data</i> argument can be supplied with the enable to provide trigger-specific information.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: get_trigger_data
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::get_trigger_data)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Gets the data, if any, provided by the last call to <link target="trigger" name="trigger" original="&lt; trigger &gt;">.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Gets the data, if any, provided by the last call to <link target="trigger" name="trigger" original="&lt; trigger &gt;">.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: get_trigger_time
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::get_trigger_time)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Gets the time that this event was last triggered. )
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Gets the time that this event was last triggered. If the event has not been triggered, or the event has been reset, then the trigger time will be 0.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: is_on
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::is_on)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Indicates whether the event has been triggered since it was last reset.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Indicates whether the event has been triggered since it was last reset.</p><p>A return of 1 indicates that the event has triggered.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: is_off
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::is_off)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Indicates whether the event has been triggered or been reset.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Indicates whether the event has been triggered or been reset.</p><p>A return of 1 indicates that the event has not been triggered.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: reset
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::reset)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Resets the event to its off state. )
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Resets the event to its off state. If <i>wakeup</i> is set, then all processes currently waiting for the event are activated before the reset.</p><p>No callbacks are called during a reset.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: add_callback
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::add_callback)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Registers a callback object, <i>cb</i>, with this event. )
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Registers a callback object, <i>cb</i>, with this event. The callback object may include pre_trigger and post_trigger functionality. If <i>append</i> is set to 1, the default, <i>cb</i> is added to the back of the callback list. Otherwise, <i>cb</i> is placed at the front of the callback list.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: delete_callback
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::delete_callback)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Unregisters the given callback, <i>cb</i>, from this event.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Unregisters the given callback, <i>cb</i>, from this event.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: cancel
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::cancel)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Decrements the number of waiters on the event.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Decrements the number of waiters on the event.</p><p>This is used if a process that is waiting on an event is disabled or activated by some other means.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | TopicTitle: get_num_waiters
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] | [uvm_event] | | QualifiedName(uvm_pkg::uvm_event::get_num_waiters)
| | [uvm_event.svh] | [uvm_event] | | TopicType(function)
| | [uvm_event.svh] | [uvm_event] | | Keyword(Function)
| | [uvm_event.svh] | [uvm_event] | | NumChilderen(0)
| | [uvm_event.svh] | [uvm_event] | | Summary(Returns the number of processes waiting on the event.)
| | [uvm_event.svh] | [uvm_event] | | Body(<p>Returns the number of processes waiting on the event.</p>)
| | [uvm_event.svh] | [uvm_event] | +-------------------------------------------------------------------
| | [uvm_event.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_event_callback.svh
| +-------------------------------------------------------------------
| | [uvm_event_callback.svh] +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | TopicTitle: uvm_event_callback
| | [uvm_event_callback.svh] +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | QualifiedName(uvm_pkg::uvm_event_callback)
| | [uvm_event_callback.svh] | TopicType(class)
| | [uvm_event_callback.svh] | Keyword(CLASS)
| | [uvm_event_callback.svh] | NumChilderen(3)
| | [uvm_event_callback.svh] | Summary(The uvm_event_callback class is an abstract class that is used to create callback objects which may be attached to <link target="uvm_events" name="uvm_events" original="&lt; uvm_events &gt;">. )
| | [uvm_event_callback.svh] | Body(<p>The uvm_event_callback class is an abstract class that is used to create callback objects which may be attached to <link target="uvm_events" name="uvm_events" original="&lt; uvm_events &gt;">. To use, you derive a new class and override any or both <link target="pre_trigger" name="pre_trigger" original="&lt; pre_trigger &gt;"> and <link target="post_trigger" name="post_trigger" original="&lt; post_trigger &gt;">.</p><p>Callbacks are an alternative to using processes that wait on events. When a callback is attached to an event, that callback object's callback function is called each time the event is triggered.</p>)
| | [uvm_event_callback.svh] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | | Children
| | [uvm_event_callback.svh] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicTitle: new
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | QualifiedName(uvm_pkg::uvm_event_callback::new)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicType(function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Keyword(Function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | NumChilderen(0)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Summary(Creates a new callback object.)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Body(<p>Creates a new callback object.</p>)
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicTitle: pre_trigger
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | QualifiedName(uvm_pkg::uvm_event_callback::pre_trigger)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicType(function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Keyword(Function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | NumChilderen(0)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Summary(This callback is called just before triggering the associated event. )
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Body(<p>This callback is called just before triggering the associated event. In a derived class, override this method to implement any pre-trigger functionality.</p><p>If your callback returns 1, then the event will not trigger and the post-trigger callback is not called. This provides a way for a callback to prevent the event from triggering.</p><p>In the function, <i>e</i> is the <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is being triggered, and <i>data</i> is the optional data associated with the event trigger.</p>)
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicTitle: post_trigger
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] | [uvm_event_callback] | | QualifiedName(uvm_pkg::uvm_event_callback::post_trigger)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | TopicType(function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Keyword(Function)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | NumChilderen(0)
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Summary(This callback is called after triggering the associated event. )
| | [uvm_event_callback.svh] | [uvm_event_callback] | | Body(<p>This callback is called after triggering the associated event. In a derived class, override this method to implement any post-trigger functionality.</p><p>In the function, <i>e</i> is the <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is being triggered, and <i>data</i> is the optional data associated with the event trigger.</p>)
| | [uvm_event_callback.svh] | [uvm_event_callback] | +-------------------------------------------------------------------
| | [uvm_event_callback.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_exports.svh
| +-------------------------------------------------------------------
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | TopicTitle: TLM Export Classes
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | QualifiedName(TLM Export Classes)
| | [uvm_exports.svh] | TopicType(section)
| | [uvm_exports.svh] | Keyword(Title)
| | [uvm_exports.svh] | NumChilderen(0)
| | [uvm_exports.svh] | Summary(The following classes define the TLM export classes.)
| | [uvm_exports.svh] | Body(<p>The following classes define the TLM export classes.</p>)
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | TopicTitle: uvm_*_export #(T)
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | QualifiedName(uvm_*_export #(T))
| | [uvm_exports.svh] | TopicType(class)
| | [uvm_exports.svh] | Keyword(CLASS)
| | [uvm_exports.svh] | NumChilderen(1)
| | [uvm_exports.svh] | Summary(The unidirectional uvm_*_export is a port that <i>forwards</i> or <i>promotes</i> an interface implementation from a child component to its parent. )
| | [uvm_exports.svh] | Body(<p>The unidirectional uvm_*_export is a port that <i>forwards</i> or <i>promotes</i> an interface implementation from a child component to its parent. An export can be connected to any compatible child export or imp port. It must ultimately be connected to at least one implementation of its associated interface.</p><p>The interface type represented by the asterisk is any of the following</p><blockquote><pre>blocking_put
nonblocking_put
put

blocking_get
nonblocking_get
get

blocking_peek
nonblocking_peek
peek

blocking_get_peek
nonblocking_get_peek
get_peek
</pre></blockquote><p>Type parameters</p><dl><de> T</de><dd>The type of transaction to be communicated by the export</dd></dl><p>Exports are connected to interface implementations directly via <link target="uvm_*_imp #(T,IMP)" name="uvm_*_imp #(T,IMP)" original="&lt; uvm_*_imp #(T,IMP) &gt;"> ports or indirectly via other <link target="uvm_*_export #(T)" name="uvm_*_export #(T)" original="&lt; uvm_*_export #(T) &gt;"> exports.</p>)
| | [uvm_exports.svh] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | | Children
| | [uvm_exports.svh] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(T)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | TopicTitle: new
| | [uvm_exports.svh] | [uvm_*_export #(T)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | QualifiedName(new)
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | TopicType(function)
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | Keyword(Function)
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | NumChilderen(0)
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_exports.svh] | [uvm_*_export #(T)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>min_size</i> and <i>max_size</i> specify the minimum and maximum number of interfaces that must have been supplied to this port by the end of elaboration.</p><blockquote><pre>function new (string name,
              uvm_component parent,
              int min_size=1,
              int max_size=1)</pre></blockquote>)
| | [uvm_exports.svh] | [uvm_*_export #(T)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | TopicTitle: uvm_*_export #(REQ,RSP)
| | [uvm_exports.svh] +-------------------------------------------------------------------
| | [uvm_exports.svh] | QualifiedName(uvm_*_export #(REQ,RSP))
| | [uvm_exports.svh] | TopicType(class)
| | [uvm_exports.svh] | Keyword(CLASS)
| | [uvm_exports.svh] | NumChilderen(1)
| | [uvm_exports.svh] | Summary(The bidirectional uvm_*_export is a port that <i>forwards</i> or <i>promotes</i> an interface implementation from a child component to its parent. )
| | [uvm_exports.svh] | Body(<p>The bidirectional uvm_*_export is a port that <i>forwards</i> or <i>promotes</i> an interface implementation from a child component to its parent. An export can be connected to any compatible child export or imp port. It must ultimately be connected to at least one implementation of its associated interface.</p><p>The interface type represented by the asterisk is any of the following</p><blockquote><pre>blocking_transport
nonblocking_transport
transport

blocking_master
nonblocking_master
master

blocking_slave
nonblocking_slave
slave
</pre></blockquote><p>Type parameters</p><dl><de> REQ</de><dd>The type of request transaction to be communicated by the export</dd><de> RSP</de><dd>The type of response transaction to be communicated by the export</dd></dl><p>Exports are connected to interface implementations directly via <link target="uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)" name="uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)" original="&lt; uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP) &gt;"> ports or indirectly via other <link target="uvm_*_export #(REQ,RSP)" name="uvm_*_export #(REQ,RSP)" original="&lt; uvm_*_export #(REQ,RSP) &gt;"> exports.</p>)
| | [uvm_exports.svh] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | | Children
| | [uvm_exports.svh] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | TopicTitle: new
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | TopicType(function)
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | Keyword(Function)
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>min_size</i> and <i>max_size</i> specify the minimum and maximum number of interfaces that must have been supplied to this port by the end of elaboration.</p><blockquote><pre>function new (string name,
              uvm_component parent,
              int min_size=1,
              int max_size=1)</pre></blockquote>)
| | [uvm_exports.svh] | [uvm_*_export #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_exports.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_factory.svh
| +-------------------------------------------------------------------
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | TopicTitle: UVM Factory
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | QualifiedName(UVM Factory)
| | [uvm_factory.svh] | TopicType(section)
| | [uvm_factory.svh] | Keyword(Title)
| | [uvm_factory.svh] | NumChilderen(0)
| | [uvm_factory.svh] | Summary(This page covers the classes that define the UVM factory facility.)
| | [uvm_factory.svh] | Body(<p>This page covers the classes that define the UVM factory facility.</p>)
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | TopicTitle: uvm_factory
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | QualifiedName(uvm_pkg::uvm_factory)
| | [uvm_factory.svh] | TopicType(class)
| | [uvm_factory.svh] | Keyword(CLASS)
| | [uvm_factory.svh] | NumChilderen(20)
| | [uvm_factory.svh] | Summary(As the name implies, uvm_factory is used to manufacture (create) UVM objects and components. )
| | [uvm_factory.svh] | Body(<p>As the name implies, uvm_factory is used to manufacture (create) UVM objects and components. Only one instance of the factory is present in a given simulation (termed a singleton). Object and component types are registered with the factory using lightweight proxies to the actual objects and components being created. The <link target="uvm_object_registry #(T,Tname)" name="uvm_object_registry #(T,Tname)" original="&lt; uvm_object_registry #(T,Tname) &gt;"> and <link target="uvm_component_registry #(T,Tname)" name="uvm_component_registry #(T,Tname)" original="&lt; uvm_component_registry #(T,Tname) &gt;"> class are used to proxy <link target="uvm_objects" name="uvm_objects" original="&lt; uvm_objects &gt;"> and <link target="uvm_components" name="uvm_components" original="&lt; uvm_components &gt;">.</p><p>The factory provides both name-based and type-based interfaces.</p><dl><de> type-based</de><dd>The type-based interface is far less prone to errors in usage. When errors do occur, they are caught at compile-time.</dd><de> name-based</de><dd>The name-based interface is dominated by string arguments that can be misspelled and provided in the wrong order. Errors in name-based requests might only be caught at the time of the call, if at all. Further, the name-based interface is not portable across simulators when used with parameterized classes.</dd></dl><p>See <link target="Usage" name="Usage" original="&lt; Usage &gt;"> section for details on configuring and using the factory.</p>)
| | [uvm_factory.svh] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | | Children
| | [uvm_factory.svh] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: get()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(get())
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Get the factory singleton)
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Get the factory singleton</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: Registering Types
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(Registering Types)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(group)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Group)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: register
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::register)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Registers the given proxy object, <i>obj</i>, with the factory. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Registers the given proxy object, <i>obj</i>, with the factory. The proxy object is a lightweight substitute for the component or object it represents. When the factory needs to create an object of a given type, it calls the proxy's create_object or create_component method to do so.</p><p>When doing name-based operations, the factory calls the proxy's get_type_name method to match against the <i>requested_type_name</i> argument in subsequent calls to <link target="create_component_by_name" name="create_component_by_name" original="&lt; create_component_by_name &gt;"> and <link target="create_object_by_name" name="create_object_by_name" original="&lt; create_object_by_name &gt;">. If the proxy object's get_type_name method returns the empty string, name-based lookup is effectively disabled.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: Type & Instance Overrides
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(Type & Instance Overrides)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(group)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Group)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: set_inst_override_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::set_inst_override_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: set_inst_override_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::set_inst_override_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Configures the factory to create an object of the override's type whenever a request is made to create an object of the original type using a context that matches <i>full_inst_path</i>. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Configures the factory to create an object of the override's type whenever a request is made to create an object of the original type using a context that matches <i>full_inst_path</i>. The original type is typically a super class of the override type.</p><p>When overriding by type, the <i>original_type</i> and <i>override_type</i> are handles to the types' proxy objects. Preregistration is not required.</p><p>When overriding by name, the <i>original_type_name</i> typically refers to a preregistered type in the factory. It may, however, be any arbitrary string. Future calls to any of the create_* methods with the same string and matching instance path will produce the type represented by <i>override_type_name</i>, which must be preregistered with the factory.</p><p>The <i>full_inst_path</i> is matched against the contentation of {<i>parent_inst_path</i>, &quot;.&quot;, <i>name</i>} provided in future create requests. The <i>full_inst_path</i> may include wildcards (* and ?) such that a single instance override can be applied in multiple contexts. A <i>full_inst_path</i> of &quot;*&quot; is effectively a type override, as it will match all contexts.</p><p>When the factory processes instance overrides, the instance queue is processed in order of override registrations, and the first override match prevails. Thus, more specific overrides should be registered first, followed by more general overrides.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: set_type_override_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::set_type_override_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: set_type_override_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::set_type_override_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Configures the factory to create an object of the override's type whenever a request is made to create an object of the original type, provided no instance override applies. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Configures the factory to create an object of the override's type whenever a request is made to create an object of the original type, provided no instance override applies. The original type is typically a super class of the override type.</p><p>When overriding by type, the <i>original_type</i> and <i>override_type</i> are handles to the types' proxy objects. Preregistration is not required.</p><p>When overriding by name, the <i>original_type_name</i> typically refers to a preregistered type in the factory. It may, however, be any arbitrary string. Future calls to any of the create_* methods with the same string and matching instance path will produce the type represented by <i>override_type_name</i>, which must be preregistered with the factory.</p><p>When <i>replace</i> is 1, a previous override on <i>original_type_name</i> is replaced, otherwise a previous override, if any, remains intact.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: Creation
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(Creation)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(group)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Group)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: create_object_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::create_object_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: create_component_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::create_component_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: create_object_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::create_object_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: create_component_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::create_component_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Creates and returns a component or object of the requested type, which may be specified by type or by name. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Creates and returns a component or object of the requested type, which may be specified by type or by name. A requested component must be derived from the <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> base class, and a requested object must be derived from the <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> base class.</p><p>When requesting by type, the <i>requested_type</i> is a handle to the type's proxy object. Preregistration is not required.</p><p>When requesting by name, the <i>request_type_name</i> is a string representing the requested type, which must have been registered with the factory with that name prior to the request. If the factory does not recognize the <i>requested_type_name</i>, an error is produced and a null handle returned.</p><p>If the optional <i>parent_inst_path</i> is provided, then the concatenation, {<i>parent_inst_path</i>, &quot;.&quot;,~name~}, forms an instance path (context) that is used to search for an instance override. The <i>parent_inst_path</i> is typically obtained by calling the <link target="uvm_component::get_full_name" name="uvm_component::get_full_name" original="&lt; uvm_component::get_full_name &gt;"> on the parent.</p><p>If no instance override is found, the factory then searches for a type override.</p><p>Once the final override is found, an instance of that component or object is returned in place of the requested type. New components will have the given <i>name</i> and <i>parent</i>. New objects will have the given <i>name</i>, if provided.</p><p>Override searches are recursively applied, with instance overrides taking precedence over type overrides. If <i>foo</i> overrides <i>bar</i>, and <i>xyz</i> overrides <i>foo</i>, then a request for <i>bar</i> will produce <i>xyz</i>. Recursive loops will result in an error, in which case the type returned will be that which formed the loop. Using the previous example, if <i>bar</i> overrides <i>xyz</i>, then <i>bar</i> is returned after the error is issued.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: Debug
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(Debug)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(group)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Group)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: debug_create_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::debug_create_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: debug_create_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::debug_create_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(These methods perform the same search algorithm as the create_* methods, but they do not create new objects. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>These methods perform the same search algorithm as the create_* methods, but they do not create new objects. Instead, they provide detailed information about what type of object it would return, listing each override that was applied to arrive at the result. Interpretation of the arguments are exactly as with the create_* methods.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: find_override_by_type
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::find_override_by_type)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary()
| | [uvm_factory.svh] | [uvm_factory] | | Body()
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: find_override_by_name
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::find_override_by_name)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(These methods return the proxy to the object that would be created given the arguments. )
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>These methods return the proxy to the object that would be created given the arguments. The <i>full_inst_path</i> is typically derived from the parent's instance path and the leaf name of the object to be created, i.e. { parent.get_full_name(), &quot;.&quot;, name }.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: print
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(uvm_pkg::uvm_factory::print)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Prints the state of the uvm_factory, including registered types, instance overrides, and type overrides.)
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Prints the state of the uvm_factory, including registered types, instance overrides, and type overrides.</p><p>When <i>all_types</i> is 0, only type and instance overrides are displayed. When <i>all_types</i> is 1 (default), all registered user-defined types are printed as well, provided they have names associated with them. When <i>all_types</i> is 2, the UVM types (prefixed with uvm_) are included in the list of registered types.</p>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | TopicTitle: Usage
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_factory] | | QualifiedName(Usage)
| | [uvm_factory.svh] | [uvm_factory] | | TopicType(group)
| | [uvm_factory.svh] | [uvm_factory] | | Keyword(Group)
| | [uvm_factory.svh] | [uvm_factory] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_factory] | | Summary(Using the factory involves three basic operations)
| | [uvm_factory.svh] | [uvm_factory] | | Body(<p>Using the factory involves three basic operations</p><dl><de> 1</de><dd>Registering objects and components types with the factory</dd><de> 2</de><dd>Designing components to use the factory to create objects or components</dd><de> 3</de><dd>Configuring the factory with type and instance overrides, both within and outside components</dd></dl><p>We'll briefly cover each of these steps here. More reference information can be found at <link target="Utility Macros" name="Utility Macros" original="&lt; Utility Macros &gt;">, <link target="uvm_component_registry #(T,Tname)" name="uvm_component_registry #(T,Tname)" original="&lt; uvm_component_registry #(T,Tname) &gt;">, <link target="uvm_object_registry #(T,Tname)" name="uvm_object_registry #(T,Tname)" original="&lt; uvm_object_registry #(T,Tname) &gt;">, <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">.</p><h4 class=CHeading> 1 -- Registering objects and component types with the factory</h4><p>When defining <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> and <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">-based classes, simply invoke the appropriate macro. Use of macros are required to ensure portability across different vendors' simulators.</p><p>Objects that are not parameterized are declared as</p><blockquote><pre>class packet extends uvm_object;
  `uvm_object_utils(packet)
endclass

class packetD extends packet;
  `uvm_object_utils(packetD)
endclass
</pre></blockquote><p>Objects that are parameterized are declared as</p><blockquote><pre>class packet #(type T=int, int WIDTH=32) extends uvm_object;
  `uvm_object_param_utils(packet #(T,WIDTH))
 endclass
</pre></blockquote><p>Components that are not parameterized are declared as</p><blockquote><pre>class comp extends uvm_component;
  `uvm_component_utils(comp)
endclass
</pre></blockquote><p>Components that are parameterized are declared as</p><blockquote><pre>class comp #(type T=int, int WIDTH=32) extends uvm_component;
  `uvm_component_param_utils(comp #(T,WIDTH))
endclass
</pre></blockquote><p>The `uvm_*_utils macros for simple, non-parameterized classes will register the type with the factory and define the get_type, get_type_name, and create virtual methods inherited from <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">. It will also define a static type_name variable in the class, which will allow you to determine the type without having to allocate an instance.</p><p>The `uvm_*_param_utils macros for parameterized classes differ from `uvm_*_utils classes in the following ways:</p><ul><li>The get_type_name method and static type_name variable are not defined. You will need to implement these manually.</li><li>A type name is not associated with the type when registeriing with the factory, so the factory's *_by_name operations will not work with parameterized classes.</li><li>The factory's <link target="print" name="print" original="&lt; print &gt;">, <link target="debug_create_by_type" name="debug_create_by_type" original="&lt; debug_create_by_type &gt;">, and <link target="debug_create_by_name" name="debug_create_by_name" original="&lt; debug_create_by_name &gt;"> methods, which depend on type names to convey information, will list parameterized types as <link target="unknown" name="unknown" original="&lt; unknown &gt;">.</li></ul><p>It is worth noting that environments that exclusively use the type-based factory methods (<b>_by_type) do not require type registration. The factory's type-based methods will register the types involved &quot;on the fly,&quot; when first used. However, registering with the `uvm_</b>_utils macros enables name-based factory usage and implements some useful utility functions.</p><h4 class=CHeading> 2 -- Designing components that defer creation to the factory</h4><p>Having registered your objects and components with the factory, you can now make requests for new objects and components via the factory. Using the factory instead of allocating them directly (via new) allows different objects to be substituted for the original without modifying the requesting class. The following code defines a driver class that is parameterized.</p><blockquote><pre>class driverB #(type T=uvm_object) extends uvm_driver;

  // parameterized classes must use the _param_utils version
  `uvm_component_param_utils(driverB #(T))

  // our packet type; this can be overridden via the factory
  T pkt;

  // standard component constructor
  function new(string name, uvm_component parent=null);
    super.new(name,parent);
  endfunction

  // get_type_name not implemented by macro for parameterized classes
  const static string type_name = {&quot;driverB #(&quot;,T::type_name,&quot;)&quot;};
  virtual function string get_type_name();
    return type_name;
  endfunction

  // using the factory allows pkt overrides from outside the class
  virtual function void build_phase(uvm_phase phase);
    pkt = packet::type_id::create(&quot;pkt&quot;,this);
  endfunction

  // print the packet so we can confirm its type when printing
  virtual function void do_print(uvm_printer printer);
    printer.print_object(&quot;pkt&quot;,pkt);
  endfunction

endclass
</pre></blockquote><p>For purposes of illustrating type and instance overrides, we define two subtypes of the <i>driverB</i> class. The subtypes are also parameterized, so we must again provide an implementation for <link target="uvm_object::get_type_name" name="uvm_object::get_type_name" original="&lt; uvm_object::get_type_name &gt;">, which we recommend writing in terms of a static string constant.</p><blockquote><pre>class driverD1 #(type T=uvm_object) extends driverB #(T);

  `uvm_component_param_utils(driverD1 #(T))

  function new(string name, uvm_component parent=null);
    super.new(name,parent);
  endfunction

  const static string type_name = {&quot;driverD1 #(&quot;,T::type_name,&quot;)&quot;};
  virtual function string get_type_name();
    ...return type_name;
  endfunction

endclass

class driverD2 #(type T=uvm_object) extends driverB #(T);

  `uvm_component_param_utils(driverD2 #(T))

  function new(string name, uvm_component parent=null);
    super.new(name,parent);
  endfunction

  const static string type_name = {&quot;driverD2 #(&quot;,T::type_name,&quot;)&quot;};
  virtual function string get_type_name();
    return type_name;
  endfunction

endclass

// typedef some specializations for convenience
typedef driverB  #(packet) B_driver;   // the base driver
typedef driverD1 #(packet) D1_driver;  // a derived driver
typedef driverD2 #(packet) D2_driver;  // another derived driver
</pre></blockquote><p>Next, we'll define a agent component, which requires a utils macro for non-parameterized types. Before creating the drivers using the factory, we override <i>driver0</i>'s packet type to be <i>packetD</i>.</p><blockquote><pre>class agent extends uvm_agent;

  `uvm_component_utils(agent)
  ...
  B_driver driver0;
  B_driver driver1;

  function new(string name, uvm_component parent=null);
    super.new(name,parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);

    // override the packet type for driver0 and below
    packet::type_id::set_inst_override(packetD::get_type(),&quot;driver0.*&quot;);

    // create using the factory; actual driver types may be different
    driver0 = B_driver::type_id::create(&quot;driver0&quot;,this);
    driver1 = B_driver::type_id::create(&quot;driver1&quot;,this);

  endfunction

endclass
</pre></blockquote><p>Finally we define an environment class, also not parameterized. Its build method shows three methods for setting an instance override on a grandchild component with relative path name, <i>agent1.driver1</i>, all equivalent.</p><blockquote><pre>class env extends uvm_env;

  `uvm_component_utils(env)

  agent agent0;
  agent agent1;

  function new(string name, uvm_component parent=null);
    super.new(name,parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);

    // three methods to set an instance override for agent1.driver1
    // - via component convenience method...
    set_inst_override_by_type(&quot;agent1.driver1&quot;,
                              B_driver::get_type(),
                              D2_driver::get_type());

    // - via the component's proxy (same approach as create)...
    B_driver::type_id::set_inst_override(D2_driver::get_type(),
                                         &quot;agent1.driver1&quot;,this);

    // - via a direct call to a factory method...
    factory.set_inst_override_by_type(B_driver::get_type(),
                                      D2_driver::get_type(),
                                      {get_full_name(),&quot;.agent1.driver1&quot;});

    // create agents using the factory; actual agent types may be different
    agent0 = agent::type_id::create(&quot;agent0&quot;,this);
    agent1 = agent::type_id::create(&quot;agent1&quot;,this);

  endfunction

  // at end_of_elaboration, print topology and factory state to verify
  virtual function void end_of_elaboration_phase(uvm_phase phase);
    uvm_top.print_topology();
  endfunction

  virtual task run_phase(uvm_phase phase);
    #100 global_stop_request();
  endfunction

endclass
</pre></blockquote><h4 class=CHeading> 3 -- Configuring the factory with type and instance overrides</h4><p>In the previous step, we demonstrated setting instance overrides and creating components using the factory within component classes. Here, we will demonstrate setting overrides from outside components, as when initializing the environment prior to running the test.</p><blockquote><pre>module top;

  env env0;

  initial begin

    // Being registered first, the following overrides take precedence
    // over any overrides made within env0's construction &amp; build.

    // Replace all base drivers with derived drivers...
    B_driver::type_id::set_type_override(D_driver::get_type());

    // ...except for agent0.driver0, whose type remains a base driver.
    //     (Both methods below have the equivalent result.)

    // - via the component's proxy (preferred)
    B_driver::type_id::set_inst_override(B_driver::get_type(),
                                         &quot;env0.agent0.driver0&quot;);

    // - via a direct call to a factory method
    factory.set_inst_override_by_type(B_driver::get_type(),
                                      B_driver::get_type(),
                                  {get_full_name(),&quot;env0.agent0.driver0&quot;});

    // now, create the environment; our factory configuration will
    // govern what topology gets created
    env0 = new(&quot;env0&quot;);

    // run the test (will execute build phase)
    run_test();

  end

endmodule
</pre></blockquote><p>When the above example is run, the resulting topology (displayed via a call to <link target="uvm_root::print_topology" name="uvm_root::print_topology" original="&lt; uvm_root::print_topology &gt;"> in env's <link target="uvm_component::end_of_elaboration_phase" name="uvm_component::end_of_elaboration_phase" original="&lt; uvm_component::end_of_elaboration_phase &gt;"> method) is similar to the following:</p><blockquote><pre># UVM_INFO @ 0 [RNTST] Running test ...
# UVM_INFO @ 0 [UVMTOP] UVM testbench topology:
# ----------------------------------------------------------------------
# Name                     Type                Size                Value
# ----------------------------------------------------------------------
# env0                     env                 -                  env0@2
#   agent0                 agent               -                agent0@4
#     driver0              driverB #(packet)   -               driver0@8
#       pkt                packet              -                  pkt@21
#     driver1              driverD #(packet)   -              driver1@14
#       pkt                packet              -                  pkt@23
#   agent1                 agent               -                agent1@6
#     driver0              driverD #(packet)   -              driver0@24
#       pkt                packet              -                  pkt@37
#     driver1              driverD2 #(packet)  -              driver1@30
#       pkt                packet              -                  pkt@39
# ----------------------------------------------------------------------
</pre></blockquote>)
| | [uvm_factory.svh] | [uvm_factory] | +-------------------------------------------------------------------
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | TopicTitle: uvm_object_wrapper
| | [uvm_factory.svh] +-------------------------------------------------------------------
| | [uvm_factory.svh] | QualifiedName(uvm_pkg::uvm_object_wrapper)
| | [uvm_factory.svh] | TopicType(class)
| | [uvm_factory.svh] | Keyword(CLASS)
| | [uvm_factory.svh] | NumChilderen(3)
| | [uvm_factory.svh] | Summary(The uvm_object_wrapper provides an abstract interface for creating object and component proxies. )
| | [uvm_factory.svh] | Body(<p>The uvm_object_wrapper provides an abstract interface for creating object and component proxies. Instances of these lightweight proxies, representing every <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based and <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">-based object available in the test environment, are registered with the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">. When the factory is called upon to create an object or component, it finds and delegates the request to the appropriate proxy.</p>)
| | [uvm_factory.svh] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | | Children
| | [uvm_factory.svh] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicTitle: create_object
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | QualifiedName(uvm_pkg::uvm_object_wrapper::create_object)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Summary(Creates a new object with the optional <i>name</i>. )
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Body(<p>Creates a new object with the optional <i>name</i>. An object proxy (e.g., <link target="uvm_object_registry #(T,Tname)" name="uvm_object_registry #(T,Tname)" original="&lt; uvm_object_registry #(T,Tname) &gt;">) implements this method to create an object of a specific type, T.</p>)
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicTitle: create_component
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | QualifiedName(uvm_pkg::uvm_object_wrapper::create_component)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Summary(Creates a new component, passing to its constructor the given <i>name</i> and <i>parent</i>. )
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Body(<p>Creates a new component, passing to its constructor the given <i>name</i> and <i>parent</i>. A component proxy (e.g. <link target="uvm_component_registry #(T,Tname)" name="uvm_component_registry #(T,Tname)" original="&lt; uvm_component_registry #(T,Tname) &gt;">) implements this method to create a component of a specific type, T.</p>)
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicTitle: get_type_name
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] | [uvm_object_wrapper] | | QualifiedName(uvm_pkg::uvm_object_wrapper::get_type_name)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | TopicType(function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Keyword(Function)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | NumChilderen(0)
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Summary(Derived classes implement this method to return the type name of the object created by <link target="create_component" name="create_component" original="&lt; create_component &gt;"> or <link target="create_object" name="create_object" original="&lt; create_object &gt;">. )
| | [uvm_factory.svh] | [uvm_object_wrapper] | | Body(<p>Derived classes implement this method to return the type name of the object created by <link target="create_component" name="create_component" original="&lt; create_component &gt;"> or <link target="create_object" name="create_object" original="&lt; create_object &gt;">. The factory uses this name when matching against the requested type in name-based lookups.</p>)
| | [uvm_factory.svh] | [uvm_object_wrapper] | +-------------------------------------------------------------------
| | [uvm_factory.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_globals.svh
| +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: Globals
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(Globals)
| | [uvm_globals.svh] | TopicType(section)
| | [uvm_globals.svh] | Keyword(Title)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: Simulation Control
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(Simulation Control)
| | [uvm_globals.svh] | TopicType(group)
| | [uvm_globals.svh] | Keyword(Group)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: run_test
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(run_test)
| | [uvm_globals.svh] | TopicType(task)
| | [uvm_globals.svh] | Keyword(Task)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Convenience function for uvm_top.run_test(). )
| | [uvm_globals.svh] | Body(<p>Convenience function for uvm_top.run_test(). See <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;"> for more information.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: Reporting
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(Reporting)
| | [uvm_globals.svh] | TopicType(group)
| | [uvm_globals.svh] | Keyword(Group)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_report_enabled
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_report_enabled)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Returns 1 if the configured verbosity in <i>uvm_top</i> is greater than <i>verbosity</i> and the action associated with the given <i>severity</i> and <i>id</i> is not UVM_NO_ACTION, else returns 0.)
| | [uvm_globals.svh] | Body(<p>Returns 1 if the configured verbosity in <i>uvm_top</i> is greater than <i>verbosity</i> and the action associated with the given <i>severity</i> and <i>id</i> is not UVM_NO_ACTION, else returns 0.</p><p>See also <link target="uvm_report_object::uvm_report_enabled" name="uvm_report_object::uvm_report_enabled" original="&lt; uvm_report_object::uvm_report_enabled &gt;">.</p><p>Static methods of an extension of uvm_report_object, e.g. uvm_compoent-based objects, can not call <i>uvm_report_enabled</i> because the call will resolve to the <link target="uvm_report_object::uvm_report_enabled" name="uvm_report_object::uvm_report_enabled" original="&lt; uvm_report_object::uvm_report_enabled &gt;">, which is non-static. Static methods can not call non-static methods of the same class.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_report_info
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_report_info)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_report_warning
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_report_warning)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_report_error
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_report_error)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_report_fatal
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_report_fatal)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(These methods, defined in package scope, are convenience functions that delegate to the corresponding component methods in <i>uvm_top</i>. )
| | [uvm_globals.svh] | Body(<p>These methods, defined in package scope, are convenience functions that delegate to the corresponding component methods in <i>uvm_top</i>. They can be used in module-based code to use the same reporting mechanism as class-based components. See <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> for details on the reporting mechanism.</p><p><b>Note:</b> Verbosity is ignored for warnings, errors, and fatals to ensure users do not inadvertently filter them out. It remains in the methods for backward compatibility.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: Configuration
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(Configuration)
| | [uvm_globals.svh] | TopicType(group)
| | [uvm_globals.svh] | Keyword(Group)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: set_config_int
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(set_config_int)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(This is the global version of set_config_int in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. )
| | [uvm_globals.svh] | Body(<p>This is the global version of set_config_int in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. This function places the configuration setting for an integral field in a global override table, which has highest precedence over any component-level setting.  See <link target="uvm_component::set_config_int" name="uvm_component::set_config_int" original="&lt; uvm_component::set_config_int &gt;"> for details on setting configuration.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: set_config_object
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(set_config_object)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(This is the global version of set_config_object in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. )
| | [uvm_globals.svh] | Body(<p>This is the global version of set_config_object in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. This function places the configuration setting for an object field in a global override table, which has highest precedence over any component-level setting.  See <link target="uvm_component::set_config_object" name="uvm_component::set_config_object" original="&lt; uvm_component::set_config_object &gt;"> for details on setting configuration.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: set_config_string
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(set_config_string)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(This is the global version of set_config_string in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. )
| | [uvm_globals.svh] | Body(<p>This is the global version of set_config_string in <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. This function places the configuration setting for an string field in a global override table, which has highest precedence over any component-level setting.  See <link target="uvm_component::set_config_string" name="uvm_component::set_config_string" original="&lt; uvm_component::set_config_string &gt;"> for details on setting configuration.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: Miscellaneous
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(Miscellaneous)
| | [uvm_globals.svh] | TopicType(group)
| | [uvm_globals.svh] | Keyword(Group)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary()
| | [uvm_globals.svh] | Body()
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_is_match
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_is_match)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Returns 1 if the two strings match, 0 otherwise.)
| | [uvm_globals.svh] | Body(<p>Returns 1 if the two strings match, 0 otherwise.</p><p>The first string, <i>expr</i>, is a string that may contain '*' and '?' characters. A * matches zero or more characters, and ? matches any single character. The 2nd argument, <i>str</i>, is the string begin matched against. It must not contain any wildcards.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_string_to_bits
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_string_to_bits)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Converts an input string to its bit-vector equivalent. )
| | [uvm_globals.svh] | Body(<p>Converts an input string to its bit-vector equivalent. Max bit-vector length is approximately 14000 characters.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_bits_to_string
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_bits_to_string)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Converts an input bit-vector to its string equivalent. )
| | [uvm_globals.svh] | Body(<p>Converts an input bit-vector to its string equivalent. Max bit-vector length is approximately 14000 characters.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_wait_for_nba_region
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_wait_for_nba_region)
| | [uvm_globals.svh] | TopicType(task)
| | [uvm_globals.svh] | Keyword(Task)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Callers of this task will not return until the NBA region, thus allowing other processes any number of delta cycles (#0) to settle out before continuing. )
| | [uvm_globals.svh] | Body(<p>Callers of this task will not return until the NBA region, thus allowing other processes any number of delta cycles (#0) to settle out before continuing. See <link target="uvm_sequencer_base::wait_for_sequences" name="uvm_sequencer_base::wait_for_sequences" original="&lt; uvm_sequencer_base::wait_for_sequences &gt;"> for example usage.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | TopicTitle: uvm_split_string
| | [uvm_globals.svh] +-------------------------------------------------------------------
| | [uvm_globals.svh] | QualifiedName(uvm_split_string)
| | [uvm_globals.svh] | TopicType(function)
| | [uvm_globals.svh] | Keyword(Function)
| | [uvm_globals.svh] | NumChilderen(0)
| | [uvm_globals.svh] | Summary(Returns a queue of strings, <i>values</i>, that is the result of the <i>str</i> split based on the <i>sep</i>. )
| | [uvm_globals.svh] | Body(<p>Returns a queue of strings, <i>values</i>, that is the result of the <i>str</i> split based on the <i>sep</i>.  For example:</p><blockquote><pre>uvm_split_string(&quot;1,on,false&quot;, &quot;,&quot;, splits);
</pre></blockquote><p>Results in the 'splits' queue containing the three elements: 1, on and false.</p>)
| | [uvm_globals.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_hdl.svh
| +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: UVM HDL Backdoor Access support routines.
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(UVM HDL Backdoor Access support routines.)
| | [uvm_hdl.svh] | TopicType(section)
| | [uvm_hdl.svh] | Keyword(TITLE)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(These routines provide an interface to the DPI/PLI implementation of backdoor access used by registers.)
| | [uvm_hdl.svh] | Body(<p>These routines provide an interface to the DPI/PLI implementation of backdoor access used by registers.</p><p>If you DON'T want to use the DPI HDL API, then compile your SystemVerilog code with the vlog switch</p><blockquote><pre>vlog ... +define+UVM_HDL_NO_DPI ...</pre></blockquote>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: UVM_HDL_MAX_WIDTH
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(UVM_HDL_MAX_WIDTH)
| | [uvm_hdl.svh] | TopicType(variable)
| | [uvm_hdl.svh] | Keyword(VARIABLE)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Sets the maximum size bit vector for backdoor access. )
| | [uvm_hdl.svh] | Body(<p>Sets the maximum size bit vector for backdoor access. This parameter will be looked up by the DPI-C code using: vpi_handle_by_name( &quot;uvm_pkg::UVM_HDL_MAX_WIDTH&quot;, 0);</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_check_path
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_check_path)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Checks that the given HDL <i>path</i> exists. )
| | [uvm_hdl.svh] | Body(<p>Checks that the given HDL <i>path</i> exists. Returns 0 if NOT found, 1 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_deposit
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_deposit)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Sets the given HDL <i>path</i> to the specified <i>value</i>. )
| | [uvm_hdl.svh] | Body(<p>Sets the given HDL <i>path</i> to the specified <i>value</i>. Returns 1 if the call succeeded, 0 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_force
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_force)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Forces the <i>value</i> on the given <i>path</i>. )
| | [uvm_hdl.svh] | Body(<p>Forces the <i>value</i> on the given <i>path</i>. Returns 1 if the call succeeded, 0 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_force_time
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_force_time)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Forces the <i>value</i> on the given <i>path</i> for the specified amount of <i>force_time</i>. )
| | [uvm_hdl.svh] | Body(<p>Forces the <i>value</i> on the given <i>path</i> for the specified amount of <i>force_time</i>. If <i>force_time</i> is 0, <link target="uvm_hdl_deposit" name="uvm_hdl_deposit" original="&lt; uvm_hdl_deposit &gt;"> is called. Returns 1 if the call succeeded, 0 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_release_and_read
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_release_and_read)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Releases a value previously set with <link target="uvm_hdl_force" name="uvm_hdl_force" original="&lt; uvm_hdl_force &gt;">. )
| | [uvm_hdl.svh] | Body(<p>Releases a value previously set with <link target="uvm_hdl_force" name="uvm_hdl_force" original="&lt; uvm_hdl_force &gt;">. Returns 1 if the call succeeded, 0 otherwise. <i>value</i> is set to the HDL value after the release. For 'reg', the value will still be the forced value until it has bee procedurally reassigned. For 'wire', the value will change immediately to the resolved value of its continuous drivers, if any. If none, its value remains as forced until the next direct assignment.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_release
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_release)
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Releases a value previously set with <link target="uvm_hdl_force" name="uvm_hdl_force" original="&lt; uvm_hdl_force &gt;">. )
| | [uvm_hdl.svh] | Body(<p>Releases a value previously set with <link target="uvm_hdl_force" name="uvm_hdl_force" original="&lt; uvm_hdl_force &gt;">. Returns 1 if the call succeeded, 0 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | TopicTitle: uvm_hdl_read()
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| | [uvm_hdl.svh] | QualifiedName(uvm_hdl_read())
| | [uvm_hdl.svh] | TopicType(function)
| | [uvm_hdl.svh] | Keyword(Function)
| | [uvm_hdl.svh] | NumChilderen(0)
| | [uvm_hdl.svh] | Summary(Gets the value at the given <i>path</i>. )
| | [uvm_hdl.svh] | Body(<p>Gets the value at the given <i>path</i>. Returns 1 if the call succeeded, 0 otherwise.</p>)
| | [uvm_hdl.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_heartbeat.svh
| +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | TopicTitle: uvm_heartbeat
| | [uvm_heartbeat.svh] +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | QualifiedName(uvm_pkg::uvm_heartbeat)
| | [uvm_heartbeat.svh] | TopicType(class)
| | [uvm_heartbeat.svh] | Keyword(Class)
| | [uvm_heartbeat.svh] | NumChilderen(7)
| | [uvm_heartbeat.svh] | Summary(Heartbeats provide a way for environments to easily ensure that their descendants are alive. )
| | [uvm_heartbeat.svh] | Body(<p>Heartbeats provide a way for environments to easily ensure that their descendants are alive. A uvm_heartbeat is associated with a specific objection object. A component that is being tracked by the heartbeat object must raise (or drop) the synchronizing objection during the heartbeat window. The synchronizing objection must be a <link target="uvm_callbacks_objection" name="uvm_callbacks_objection" original="&lt; uvm_callbacks_objection &gt;"> type.</p><p>The uvm_heartbeat object has a list of participating objects. The heartbeat can be configured so that all components (UVM_ALL_ACTIVE), exactly one (UVM_ONE_ACTIVE), or any component (UVM_ANY_ACTIVE) must trigger the objection in order to satisfy the heartbeat condition.</p>)
| | [uvm_heartbeat.svh] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | | Children
| | [uvm_heartbeat.svh] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: new
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::new)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Creates a new heartbeat instance associated with <i>cntxt</i>. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Creates a new heartbeat instance associated with <i>cntxt</i>. The context is the hierarchical location that the heartbeat objections will flow through and be monitored at. The <i>objection</i> associated with the heartbeat is optional, if it is left null but it must be set before the heartbeat monitor will activate.</p><blockquote><pre>uvm_callbacks_objection myobjection = new(&quot;myobjection&quot;); //some shared objection
class myenv extends uvm_env;
   uvm_heartbeat hb = new(&quot;hb&quot;, this, myobjection);
   ...
endclass</pre></blockquote>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: set_mode
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::set_mode)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Sets or retrieves the heartbeat mode. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Sets or retrieves the heartbeat mode. The current value for the heartbeat mode is returned. If an argument is specified to change the mode then the mode is changed to the new value.</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: set_heartbeat
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::set_heartbeat)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Sets up the heartbeat event and assigns a list of objects to watch. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Sets up the heartbeat event and assigns a list of objects to watch. The monitoring is started as soon as this method is called. Once the monitoring has been started with a specific event, providing a new monitor event results in an error. To change trigger events, you must first <link target="stop" name="stop" original="&lt; stop &gt;"> the monitor and then <link target="start" name="start" original="&lt; start &gt;"> with a new event trigger.</p><p>If the trigger event <i>e</i> is null and there was no previously set trigger event, then the monitoring is not started. Monitoring can be started by explicitly calling <link target="start" name="start" original="&lt; start &gt;">.</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: add
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::add)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Add a single component to the set of components to be monitored. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Add a single component to the set of components to be monitored. This does not cause monitoring to be started. If monitoring is currently active then this component will be immediately added to the list of components and will be expected to participate in the currently active event window.</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: remove
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::remove)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Remove a single component to the set of components being monitored. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Remove a single component to the set of components being monitored. Monitoring is not stopped, even if the last component has been removed (an explicit stop is required).</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: start
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::start)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Starts the heartbeat monitor. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Starts the heartbeat monitor. If <i>e</i> is null then whatever event was previously set is used. If no event was previously set then a warning is issued. It is an error if the monitor is currently running and <i>e</i> is specifying a different trigger event from the current event.</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicTitle: stop
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | QualifiedName(uvm_pkg::uvm_heartbeat::stop)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | TopicType(function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Keyword(Function)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | NumChilderen(0)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Summary(Stops the heartbeat monitor. )
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | | Body(<p>Stops the heartbeat monitor. Current state information is reset so that if <link target="start" name="start" original="&lt; start &gt;"> is called again the process will wait for the first event trigger to start the monitoring.</p>)
| | [uvm_heartbeat.svh] | [uvm_heartbeat] | +-------------------------------------------------------------------
| | [uvm_heartbeat.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_imps.svh
| +-------------------------------------------------------------------
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | TopicTitle: uvm_*_imp ports
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | QualifiedName(uvm_*_imp ports)
| | [uvm_imps.svh] | TopicType(section)
| | [uvm_imps.svh] | Keyword(Title)
| | [uvm_imps.svh] | NumChilderen(0)
| | [uvm_imps.svh] | Summary(The following defines the TLM implementation (imp) classes.)
| | [uvm_imps.svh] | Body(<p>The following defines the TLM implementation (imp) classes.</p>)
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | TopicTitle: uvm_*_imp #(T,IMP)
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | QualifiedName(uvm_*_imp #(T,IMP))
| | [uvm_imps.svh] | TopicType(class)
| | [uvm_imps.svh] | Keyword(CLASS)
| | [uvm_imps.svh] | NumChilderen(1)
| | [uvm_imps.svh] | Summary(Unidirectional implementation (imp) port classes--An imp port provides access to an implementation of the associated interface to all connected <i>ports</i> and <i>exports</i>. )
| | [uvm_imps.svh] | Body(<p>Unidirectional implementation (imp) port classes--An imp port provides access to an implementation of the associated interface to all connected <i>ports</i> and <i>exports</i>. Each imp port instance <i>must</i> be connected to the component instance that implements the associated interface, typically the imp port's parent. All other connections-- e.g. to other ports and exports-- are prohibited.</p><p>The asterisk in <i>uvm_</b>_imp~ may be any of the following</p><blockquote><pre>blocking_put
nonblocking_put
put

blocking_get
nonblocking_get
get

blocking_peek
nonblocking_peek
peek

blocking_get_peek
nonblocking_get_peek
get_peek
</pre></blockquote><p>Type parameters</p><dl><de> T</de><dd>The type of transaction to be communicated by the imp</dd><de> IMP</de><dd>The type of the component implementing the interface. That is, the class to which this imp will delegate.</dd></dl><p>The interface methods are implemented in a component of type <i>IMP</i>, a handle to which is passed in a constructor argument.  The imp port delegates all interface calls to this component.</p>)
| | [uvm_imps.svh] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | | Children
| | [uvm_imps.svh] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | TopicTitle: new
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | QualifiedName(new)
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | TopicType(function)
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | Keyword(Function)
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | NumChilderen(0)
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | Summary(Creates a new unidirectional imp port with the given <i>name</i> and <i>parent</i>. )
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | | Body(<p>Creates a new unidirectional imp port with the given <i>name</i> and <i>parent</i>. The <i>parent</i> must implement the interface associated with this port. Its type must be the type specified in the imp's type-parameter, <i>IMP</i>.</p><blockquote><pre>function new (string name, IMP parent);</pre></blockquote>)
| | [uvm_imps.svh] | [uvm_*_imp #(T,IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | TopicTitle: uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)
| | [uvm_imps.svh] +-------------------------------------------------------------------
| | [uvm_imps.svh] | QualifiedName(uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP))
| | [uvm_imps.svh] | TopicType(class)
| | [uvm_imps.svh] | Keyword(CLASS)
| | [uvm_imps.svh] | NumChilderen(1)
| | [uvm_imps.svh] | Summary(Bidirectional implementation (imp) port classes--An imp port provides access to an implementation of the associated interface to all connected <i>ports</i> and <i>exports</i>. )
| | [uvm_imps.svh] | Body(<p>Bidirectional implementation (imp) port classes--An imp port provides access to an implementation of the associated interface to all connected <i>ports</i> and <i>exports</i>. Each imp port instance <i>must</i> be connected to the component instance that implements the associated interface, typically the imp port's parent. All other connections-- e.g. to other ports and exports-- are prohibited.</p><p>The interface represented by the asterisk is any of the following</p><blockquote><pre>blocking_transport
nonblocking_transport
transport

blocking_master
nonblocking_master
master

blocking_slave
nonblocking_slave
slave
</pre></blockquote><p>Type parameters</p><dl><de> REQ</de><dd>Request transaction type</dd><de> RSP</de><dd>Response transaction type</dd><de> IMP</de><dd>Component type that implements the interface methods, typically the the parent of this imp port.</dd><de> REQ_IMP</de><dd>Component type that implements the request side of the interface. Defaults to IMP. For master and slave imps only.</dd><de> RSP_IMP</de><dd>Component type that implements the response side of the interface. Defaults to IMP. For master and slave imps only.</dd></dl><p>The interface methods are implemented in a component of type <i>IMP</i>, a handle to which is passed in a constructor argument.  The imp port delegates all interface calls to this component.</p><p>The master and slave imps have two modes of operation.</p><ul><li>A single component of type IMP implements the entire interface for both requests and responses.</li><li>Two sibling components of type REQ_IMP and RSP_IMP implement the request and response interfaces, respectively.  In this case, the IMP parent instantiates this imp port <i>and</i> the REQ_IMP and RSP_IMP components.</li></ul><p>The second mode is needed when a component instantiates more than one imp port, as in the <link target="uvm_tlm_req_rsp_channel #(REQ,RSP)" name="uvm_tlm_req_rsp_channel #(REQ,RSP)" original="&lt; uvm_tlm_req_rsp_channel #(REQ,RSP) &gt;"> channel.</p>)
| | [uvm_imps.svh] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | | Children
| | [uvm_imps.svh] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | TopicTitle: new
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | QualifiedName(new)
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | TopicType(function)
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | Keyword(Function)
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | NumChilderen(0)
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | Summary(Creates a new bidirectional imp port with the given <i>name</i> and <i>parent</i>. )
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | | Body(<p>Creates a new bidirectional imp port with the given <i>name</i> and <i>parent</i>. The <i>parent</i>, whose type is specified by <i>IMP</i> type parameter, must implement the interface associated with this port.</p><p>Transport imp constructor</p><blockquote><pre>function new(string name, IMP imp)
</pre></blockquote><p>Master and slave imp constructor</p><p>The optional <i>req_imp</i> and <i>rsp_imp</i> arguments, available to master and slave imp ports, allow the requests and responses to be handled by different subcomponents. If they are specified, they must point to the underlying component that implements the request and response methods, respectively.</p><blockquote><pre>function new(string name, IMP imp,
                          REQ_IMP req_imp=imp, RSP_IMP rsp_imp=imp)</pre></blockquote>)
| | [uvm_imps.svh] | [uvm_*_imp #(REQ, RSP, IMP, REQ_IMP, RSP_IMP)] | +-------------------------------------------------------------------
| | [uvm_imps.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_in_order_comparator.svh
| +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | TopicTitle: Comparators
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | QualifiedName(Comparators)
| | [uvm_in_order_comparator.svh] | TopicType(section)
| | [uvm_in_order_comparator.svh] | Keyword(Title)
| | [uvm_in_order_comparator.svh] | NumChilderen(0)
| | [uvm_in_order_comparator.svh] | Summary(The following classes define comparators for objects and built-in types.)
| | [uvm_in_order_comparator.svh] | Body(<p>The following classes define comparators for objects and built-in types.</p>)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | TopicTitle: uvm_in_order_comparator #(T,comp_type,convert,pair_type)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | QualifiedName(uvm_in_order_comparator #(T,comp_type,convert,pair_type))
| | [uvm_in_order_comparator.svh] | TopicType(class)
| | [uvm_in_order_comparator.svh] | Keyword(CLASS)
| | [uvm_in_order_comparator.svh] | NumChilderen(1)
| | [uvm_in_order_comparator.svh] | Summary(Compares two streams of data objects of the type parameter, T. )
| | [uvm_in_order_comparator.svh] | Body(<p>Compares two streams of data objects of the type parameter, T. These transactions may either be classes or built-in types. To be successfully compared, the two streams of data must be in the same order. Apart from that, there are no assumptions made about the relative timing of the two streams of data.</p><p>Type parameters</p><dl><de>   T</de><dd>Specifies the type of transactions to be compared.</dd><de>   comp_type</de><dd>A policy class to compare the two transaction streams. It must provide the static method &quot;function bit comp(T a, T b)&quot; which returns <i>TRUE</i> if <i>a</i> and <i>b</i> are the same.</dd><de>   convert</de><dd>A policy class to convert the transactions being compared to a string. It must provide the static method &quot;function string convert2string(T a)&quot;.</dd><de>  pair_type</de><dd>A policy class to allow pairs of transactions to be handled as a single <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> type.</dd></dl><p>Built in types (such as ints, bits, logic, and structs) can be compared using the default values for comp_type, convert, and pair_type. For convenience, you can use the subtype, <link target="uvm_in_order_built_in_comparator #(T)" name="uvm_in_order_built_in_comparator #(T)" original="&lt; uvm_in_order_built_in_comparator #(T) &gt;"> for built-in types.</p><p>When T is a <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">, you can use the convenience subtype <link target="uvm_in_order_class_comparator #(T)" name="uvm_in_order_class_comparator #(T)" original="&lt; uvm_in_order_class_comparator #(T) &gt;">.</p><p>Comparisons are commutative, meaning it does not matter which data stream is connected to which export, before_export or after_export.</p><p>Comparisons are done in order and as soon as a transaction is received from both streams. Internal fifos are used to buffer incoming transactions on one stream until a transaction to compare arrives on the other stream.</p>)
| | [uvm_in_order_comparator.svh] | +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | | Children
| | [uvm_in_order_comparator.svh] | +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | TopicTitle: flush
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | QualifiedName(flush)
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | TopicType(function)
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | Keyword(Function)
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | NumChilderen(0)
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | Summary(This method sets m_matches and m_mismatches back to zero. )
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | | Body(<p>This method sets m_matches and m_mismatches back to zero. The <link target="uvm_tlm_fifo::flush" name="uvm_tlm_fifo::flush" original="&lt; uvm_tlm_fifo::flush &gt;"> takes care of flushing the FIFOs.</p>)
| | [uvm_in_order_comparator.svh] | [uvm_in_order_comparator #(T,comp_type,convert,pair_type)] | +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | TopicTitle: uvm_in_order_built_in_comparator #(T)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | QualifiedName(uvm_in_order_built_in_comparator #(T))
| | [uvm_in_order_comparator.svh] | TopicType(class)
| | [uvm_in_order_comparator.svh] | Keyword(CLASS)
| | [uvm_in_order_comparator.svh] | NumChilderen(0)
| | [uvm_in_order_comparator.svh] | Summary(This class uses the uvm_built_in_* comparison, converter, and pair classes. )
| | [uvm_in_order_comparator.svh] | Body(<p>This class uses the uvm_built_in_* comparison, converter, and pair classes. Use this class for built-in types (int, bit, string, etc.)</p>)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | TopicTitle: uvm_in_order_class_comparator #(T)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| | [uvm_in_order_comparator.svh] | QualifiedName(uvm_in_order_class_comparator #(T))
| | [uvm_in_order_comparator.svh] | TopicType(class)
| | [uvm_in_order_comparator.svh] | Keyword(CLASS)
| | [uvm_in_order_comparator.svh] | NumChilderen(0)
| | [uvm_in_order_comparator.svh] | Summary(This class uses the uvm_class_* comparison, converter, and pair classes. )
| | [uvm_in_order_comparator.svh] | Body(<p>This class uses the uvm_class_* comparison, converter, and pair classes. Use this class for comparing user-defined objects of type T, which must provide compare() and convert2string() method.</p>)
| | [uvm_in_order_comparator.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem.svh
| +-------------------------------------------------------------------
| | [uvm_mem.svh] +-------------------------------------------------------------------
| | [uvm_mem.svh] | TopicTitle: uvm_mem
| | [uvm_mem.svh] +-------------------------------------------------------------------
| | [uvm_mem.svh] | QualifiedName(uvm_pkg::uvm_mem)
| | [uvm_mem.svh] | TopicType(class)
| | [uvm_mem.svh] | Keyword(CLASS)
| | [uvm_mem.svh] | NumChilderen(61)
| | [uvm_mem.svh] | Summary(Memory abstraction base class)
| | [uvm_mem.svh] | Body(<p>Memory abstraction base class</p><p>A memory is a collection of contiguous locations. A memory may be accessible via more than one address map.</p><p>Unlike registers, memories are not mirrored because of the potentially large data space: tests that walk the entire memory space would negate any benefit from sparse memory modelling techniques. Rather than relying on a mirror, it is recommended that backdoor access be used instead.</p>)
| | [uvm_mem.svh] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | | Children
| | [uvm_mem.svh] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Initialization
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Initialization)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: new
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::new)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Create a new instance and type-specific configuration)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Create a new instance and type-specific configuration</p><p>Creates an instance of a memory abstraction class with the specified name.</p><p><i>size</i> specifies the total number of memory locations. <i>n_bits</i> specifies the total number of bits in each memory location. <i>access</i> specifies the access policy of this memory and may be one of &quot;RW for RAMs and &quot;RO&quot; for ROMs.</p><p><i>has_coverage</i> specifies which functional coverage models are present in the extension of the register abstraction class. Multiple functional coverage models may be specified by adding their symbolic names, as defined by the <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> type.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: configure
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::configure)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Instance-specific configuration)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Instance-specific configuration</p><p>Specify the parent block of this memory.</p><p>If this memory is implemented in a single HDL variable, it's name is specified as the <i>hdl_path</i>. Otherwise, if the memory is implemented as a concatenation of variables (usually one per bank), then the HDL path must be specified using the <link target="add_hdl_path()" name="add_hdl_path()" original="&lt; add_hdl_path() &gt;"> or <link target="add_hdl_path_slice()" name="add_hdl_path_slice()" original="&lt; add_hdl_path_slice() &gt;"> method.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: set_offset
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::set_offset)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Modify the offset of the memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Modify the offset of the memory</p><p>The offset of a memory within an address map is set using the <link target="uvm_reg_map::add_mem()" name="uvm_reg_map::add_mem()" original="&lt; uvm_reg_map::add_mem() &gt;"> method. This method is used to modify that offset dynamically.</p><p>Note: Modifying the offset of a memory will make the abstract model diverge from the specification that was used to create it.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: mam
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::mam)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(variable)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(variable)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Memory allocation manager)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Memory allocation manager</p><p>Memory allocation manager for the memory corresponding to this abstraction class instance. Can be used to allocate regions of consecutive addresses of specific sizes, such as DMA buffers, or to locate virtual register array.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Introspection
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Introspection)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_name
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(get_name)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get the simple name)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get the simple name</p><p>Return the simple object name of this memory.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_full_name
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_full_name)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get the hierarchical name)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this memory. The base of the hierarchical name is the root block.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_parent
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_parent)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get the parent block)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get the parent block</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_n_maps
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_n_maps)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the number of address maps this memory is mapped in)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the number of address maps this memory is mapped in</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: is_in_map
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::is_in_map)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Return TRUE if this memory is in the specified address <i>map</i>)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Return TRUE if this memory is in the specified address <i>map</i></p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_maps
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_maps)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns all of the address <i>maps</i> where this memory is mapped)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns all of the address <i>maps</i> where this memory is mapped</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_rights
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_rights)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the access rights of this memory.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the access rights of this memory.</p><p>Returns &quot;RW&quot;, &quot;RO&quot; or &quot;WO&quot;. The access rights of a memory is always &quot;RW&quot;, unless it is a shared memory with access restriction in a particular address map.</p><p>If no address map is specified and the memory is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued and &quot;RW&quot; is returned.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_access
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_access)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the access policy of the memory when written and read via an address map.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the access policy of the memory when written and read via an address map.</p><p>If the memory is mapped in more than one address map, an address <i>map</i> must be specified. If access restrictions are present when accessing a memory through the specified address map, the access mode returned takes the access restrictions into account. For example, a read-write memory accessed through a domain with read-only restrictions would return &quot;RO&quot;.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_size
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_size)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the number of unique memory locations in this memory.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the number of unique memory locations in this memory.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_n_bytes
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_n_bytes)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Return the width, in number of bytes, of each memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Return the width, in number of bytes, of each memory location</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_n_bits
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_n_bits)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the width, in number of bits, of each memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the width, in number of bits, of each memory location</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_max_size
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_max_size)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the maximum width, in number of bits, of all memories)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the maximum width, in number of bits, of all memories</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_virtual_registers
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_virtual_registers)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Return the virtual registers in this memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Return the virtual registers in this memory</p><p>Fills the specified array with the abstraction class for all of the virtual registers implemented in this memory. The order in which the virtual registers are located in the array is not specified.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_virtual_fields
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_virtual_fields)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Return  the virtual fields in the memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Return  the virtual fields in the memory</p><p>Fills the specified dynamic array with the abstraction class for all of the virtual fields implemented in this memory. The order in which the virtual fields are located in the array is not specified.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_vreg_by_name
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_vreg_by_name)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Find the named virtual register)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Find the named virtual register</p><p>Finds a virtual register with the specified name implemented in this memory and returns its abstraction class instance. If no virtual register with the specified name is found, returns <i>null</i>.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_vfield_by_name
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_vfield_by_name)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Find the named virtual field)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Find the named virtual field</p><p>Finds a virtual field with the specified name implemented in this memory and returns its abstraction class instance. If no virtual field with the specified name is found, returns <i>null</i>.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_vreg_by_offset
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_vreg_by_offset)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Find the virtual register implemented at the specified offset)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Find the virtual register implemented at the specified offset</p><p>Finds the virtual register implemented in this memory at the specified <i>offset</i> in the specified address <i>map</i> and returns its abstraction class instance. If no virtual register at the offset is found, returns <i>null</i>.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_offset
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_offset)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the base offset of a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the base offset of a memory location</p><p>Returns the base offset of the specified location in this memory in an address <i>map</i>.</p><p>If no address map is specified and the memory is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_address
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_address)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the base external physical address of a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the base external physical address of a memory location</p><p>Returns the base external physical address of the specified location in this memory if accessed through the specified address <i>map</i>.</p><p>If no address map is specified and the memory is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_addresses
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_addresses)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Identifies the external physical address(es) of a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Identifies the external physical address(es) of a memory location</p><p>Computes all of the external physical addresses that must be accessed to completely read or write the specified location in this memory. The addressed are specified in little endian order. Returns the number of bytes transfered on each access.</p><p>If no address map is specified and the memory is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: HDL Access
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(HDL Access)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: write
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::write)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Write the specified value in a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Write the specified value in a memory location</p><p>Write <i>value</i> in the memory location that corresponds to this abstraction class instance at the specified <i>offset</i> using the specified access <i>path</i>. If the memory is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access). If a back-door access path is used, the effect of writing the register through a physical access is mimicked. For example, a read-only memory will not be written.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: read
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::read)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Read the current value from a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Read the current value from a memory location</p><p>Read and return <i>value</i> from the memory location that corresponds to this abstraction class instance at the specified <i>offset</i> using the specified access <i>path</i>. If the register is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: burst_write
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::burst_write)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Write the specified values in memory locations)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Write the specified values in memory locations</p><p>Burst-write the specified <i>values</i> in the memory locations beginning at the specified <i>offset</i>. If the memory is mapped in more than one address map, an address <i>map</i> must be specified if not using the backdoor. If a back-door access path is used, the effect of writing the register through a physical access is mimicked. For example, a read-only memory will not be written.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: burst_read
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::burst_read)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Read values from memory locations)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Read values from memory locations</p><p>Burst-read into <i>values</i> the data the memory locations beginning at the specified <i>offset</i>. If the memory is mapped in more than one address map, an address <i>map</i> must be specified if not using the backdoor. If a back-door access path is used, the effect of writing the register through a physical access is mimicked. For example, a read-only memory will not be written.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: poke
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::poke)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Deposit the specified value in a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Deposit the specified value in a memory location</p><p>Deposit the value in the DUT memory location corresponding to this abstraction class instance at the secified <i>offset</i>, as-is, using a back-door access.</p><p>Uses the HDL path for the design abstraction specified by <i>kind</i>.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: peek
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::peek)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Read the current value from a memory location)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Read the current value from a memory location</p><p>Sample the value in the DUT memory location corresponding to this absraction class instance at the specified <i>offset</i> using a back-door access. The memory location value is sampled, not modified.</p><p>Uses the HDL path for the design abstraction specified by <i>kind</i>.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Frontdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Frontdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: set_frontdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::set_frontdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Set a user-defined frontdoor for this memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Set a user-defined frontdoor for this memory</p><p>By default, memorys are mapped linearly into the address space of the address maps that instantiate them. If memorys are accessed using a different mechanism, a user-defined access mechanism must be defined and associated with the corresponding memory abstraction class</p><p>If the memory is mapped in multiple address maps, an address <i>map</i> must be specified.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_frontdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_frontdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the user-defined frontdoor for this memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the user-defined frontdoor for this memory</p><p>If null, no user-defined frontdoor has been defined. A user-defined frontdoor is defined by using the <link target="uvm_mem::set_frontdoor()" name="uvm_mem::set_frontdoor()" original="&lt; uvm_mem::set_frontdoor() &gt;"> method.</p><p>If the memory is mapped in multiple address maps, an address <i>map</i> must be specified.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Backdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Backdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: set_backdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::set_backdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Set a user-defined backdoor for this memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Set a user-defined backdoor for this memory</p><p>By default, memories are accessed via the built-in string-based DPI routines if an HDL path has been specified using the <link target="uvm_mem::configure()" name="uvm_mem::configure()" original="&lt; uvm_mem::configure() &gt;"> or <link target="uvm_mem::add_hdl_path()" name="uvm_mem::add_hdl_path()" original="&lt; uvm_mem::add_hdl_path() &gt;"> method. If this default mechanism is not suitable (e.g. because the memory is not implemented in pure SystemVerilog) a user-defined access mechanism must be defined and associated with the corresponding memory abstraction class</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_backdoor
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_backdoor)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Returns the user-defined backdoor for this memory)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Returns the user-defined backdoor for this memory</p><p>If null, no user-defined backdoor has been defined. A user-defined backdoor is defined by using the <link target="uvm_reg::set_backdoor()" name="uvm_reg::set_backdoor()" original="&lt; uvm_reg::set_backdoor() &gt;"> method.</p><p>If <i>inherit</i> is TRUE, returns the backdoor of the parent block if none have been specified for this memory.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: clear_hdl_path
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::clear_hdl_path)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Delete HDL paths)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Delete HDL paths</p><p>Remove any previously specified HDL path to the memory instance for the specified design abstraction.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: add_hdl_path
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::add_hdl_path)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Add an HDL path)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Add an HDL path</p><p>Add the specified HDL path to the memory instance for the specified design abstraction. This method may be called more than once for the same design abstraction if the memory is physically duplicated in the design abstraction</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: add_hdl_path_slice
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::add_hdl_path_slice)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Add the specified HDL slice to the HDL path for the specified design abstraction. )
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Add the specified HDL slice to the HDL path for the specified design abstraction. If <i>first</i> is TRUE, starts the specification of a duplicate HDL implementation of the memory.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: has_hdl_path
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::has_hdl_path)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Check if a HDL path is specified)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Check if a HDL path is specified</p><p>Returns TRUE if the memory instance has a HDL path defined for the specified design abstraction. If no design abstraction is specified, uses the default design abstraction specified for the parent block.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_hdl_path
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_hdl_path)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get the incremental HDL path(s))
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get the incremental HDL path(s)</p><p>Returns the HDL path(s) defined for the specified design abstraction in the memory instance. Returns only the component of the HDL paths that corresponds to the memory, not a full hierarchical path</p><p>If no design asbtraction is specified, the default design abstraction for the parent block is used.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_full_hdl_path
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_full_hdl_path)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get the full hierarchical HDL path(s))
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get the full hierarchical HDL path(s)</p><p>Returns the full hierarchical HDL path(s) defined for the specified design abstraction in the memory instance. There may be more than one path returned even if only one path was defined for the memory instance, if any of the parent components have more than one path defined for the same design abstraction</p><p>If no design asbtraction is specified, the default design abstraction for each ancestor block is used to get each incremental path.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_hdl_path_kinds
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_hdl_path_kinds)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Get design abstractions for which HDL paths have been defined)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Get design abstractions for which HDL paths have been defined</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: backdoor_read
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::backdoor_read)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(User-define backdoor read access)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>User-define backdoor read access</p><p>Override the default string-based DPI backdoor access read for this memory type. By default calls <link target="uvm_mem::backdoor_read_func()" name="uvm_mem::backdoor_read_func()" original="&lt; uvm_mem::backdoor_read_func() &gt;">.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: backdoor_write
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::backdoor_write)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(User-defined backdoor read access)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>User-defined backdoor read access</p><p>Override the default string-based DPI backdoor access write for this memory type.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: backdoor_read_func
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::backdoor_read_func)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(User-defined backdoor read access)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>User-defined backdoor read access</p><p>Override the default string-based DPI backdoor access read for this memory type.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Callbacks
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Callbacks)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: pre_write
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::pre_write)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Called before memory write.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Called before memory write.</p><p>If the <i>offset</i>, <i>value</i>, access <i>path</i>, or address <i>map</i> are modified, the updated offset, data value, access path or address map will be used to perform the memory operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The registered callback methods are invoked after the invocation of this method.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: post_write
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::post_write)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Called after memory write.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Called after memory write.</p><p>If the <i>status</i> is modified, the updated status will be returned by the memory operation.</p><p>The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: pre_read
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::pre_read)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Called before memory read.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Called before memory read.</p><p>If the <i>offset</i>, access <i>path</i> or address <i>map</i> are modified, the updated offset, access path or address map will be used to perform the memory operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The registered callback methods are invoked after the invocation of this method.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: post_read
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::post_read)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(task)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Task)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Called after memory read.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Called after memory read.</p><p>If the readback data or <i>status</i> is modified, the updated readback //data or status will be returned by the memory operation.</p><p>The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: Coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(Coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(group)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Group)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary()
| | [uvm_mem.svh] | [uvm_mem] | | Body()
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: build_coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::build_coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Check if all of the specified coverage model must be built.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Check if all of the specified coverage model must be built.</p><p>Check which of the specified coverage model must be built in this instance of the memory abstraction class, as specified by calls to <link target="uvm_reg::include_coverage()" name="uvm_reg::include_coverage()" original="&lt; uvm_reg::include_coverage() &gt;">.</p><p>Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">. Returns the sum of all coverage models to be built in the memory model.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: add_coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::add_coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Specify that additional coverage models are available.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Specify that additional coverage models are available.</p><p>Add the specified coverage model to the coverage models available in this class. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p><p>This method shall be called only in the constructor of subsequently derived classes.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: has_coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::has_coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Check if memory has coverage model(s))
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Check if memory has coverage model(s)</p><p>Returns TRUE if the memory abstraction class contains a coverage model for all of the models specified. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: set_coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::set_coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Turns on coverage measurement.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Turns on coverage measurement.</p><p>Turns the collection of functional coverage measurements on or off for this memory. The functional coverage measurement is turned on for every coverage model specified using <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> symbolic identifers. Multiple functional coverage models can be specified by adding the functional coverage model identifiers. All other functional coverage models are turned off. Returns the sum of all functional coverage models whose measurements were previously on.</p><p>This method can only control the measurement of functional coverage models that are present in the memory abstraction classes, then enabled during construction. See the <link target="uvm_mem::has_coverage()" name="uvm_mem::has_coverage()" original="&lt; uvm_mem::has_coverage() &gt;"> method to identify the available functional coverage models.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: get_coverage
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::get_coverage)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Check if coverage measurement is on.)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Check if coverage measurement is on.</p><p>Returns TRUE if measurement for all of the specified functional coverage models are currently on. Multiple functional coverage models can be specified by adding the functional coverage model identifiers.</p><p>See <link target="uvm_mem::set_coverage()" name="uvm_mem::set_coverage()" original="&lt; uvm_mem::set_coverage() &gt;"> for more details.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | TopicTitle: sample
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] | [uvm_mem] | | QualifiedName(uvm_pkg::uvm_mem::sample)
| | [uvm_mem.svh] | [uvm_mem] | | TopicType(function)
| | [uvm_mem.svh] | [uvm_mem] | | Keyword(Function)
| | [uvm_mem.svh] | [uvm_mem] | | NumChilderen(0)
| | [uvm_mem.svh] | [uvm_mem] | | Summary(Functional coverage measurement method)
| | [uvm_mem.svh] | [uvm_mem] | | Body(<p>Functional coverage measurement method</p><p>This method is invoked by the memory abstraction class whenever an address within one of its address map is succesfully read or written. The specified offset is the offset within the memory, not an absolute address.</p><p>Empty by default, this method may be extended by the abstraction class generator to perform the required sampling in any provided functional coverage model.</p>)
| | [uvm_mem.svh] | [uvm_mem] | +-------------------------------------------------------------------
| | [uvm_mem.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_access_seq.svh
| +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | TopicTitle: Memory Access Test Sequence
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | QualifiedName(Memory Access Test Sequence)
| | [uvm_mem_access_seq.svh] | TopicType(section)
| | [uvm_mem_access_seq.svh] | Keyword(TITLE)
| | [uvm_mem_access_seq.svh] | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | Summary()
| | [uvm_mem_access_seq.svh] | Body()
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | TopicTitle: uvm_mem_single_access_seq
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | QualifiedName(uvm_pkg::uvm_mem_single_access_seq)
| | [uvm_mem_access_seq.svh] | TopicType(class)
| | [uvm_mem_access_seq.svh] | Keyword(class)
| | [uvm_mem_access_seq.svh] | NumChilderen(1)
| | [uvm_mem_access_seq.svh] | Summary(Verify the accessibility of a memory by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the written value.)
| | [uvm_mem_access_seq.svh] | Body(<p>Verify the accessibility of a memory by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the written value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, or &quot;NO_MEM_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the memory, the memory is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.mem0.get_full_name()},
                           &quot;NO_MEM_TESTS&quot;, 1, this);
</pre></blockquote><p>Memories without an available backdoor cannot be tested.</p><p>The DUT should be idle and not modify the memory during this test.</p>)
| | [uvm_mem_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | | Children
| | [uvm_mem_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | TopicTitle: mem
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_single_access_seq::mem)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | TopicType(variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | Keyword(Variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | Summary(The memory to be tested)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | | Body(<p>The memory to be tested</p>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | TopicTitle: uvm_mem_access_seq
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | QualifiedName(uvm_pkg::uvm_mem_access_seq)
| | [uvm_mem_access_seq.svh] | TopicType(class)
| | [uvm_mem_access_seq.svh] | Keyword(class)
| | [uvm_mem_access_seq.svh] | NumChilderen(5)
| | [uvm_mem_access_seq.svh] | Summary(Verify the accessibility of all memories in a block by executing the <link target="uvm_mem_single_access_seq" name="uvm_mem_single_access_seq" original="&lt; uvm_mem_single_access_seq &gt;"> sequence on every memory within it.)
| | [uvm_mem_access_seq.svh] | Body(<p>Verify the accessibility of all memories in a block by executing the <link target="uvm_mem_single_access_seq" name="uvm_mem_single_access_seq" original="&lt; uvm_mem_single_access_seq &gt;"> sequence on every memory within it.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, or &quot;NO_MEM_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block, the block is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_MEM_TESTS&quot;, 1, this);</pre></blockquote>)
| | [uvm_mem_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | | Children
| | [uvm_mem_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicTitle: model
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | QualifiedName(model)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicType(variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Keyword(Variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Summary(The block to be tested. )
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicTitle: mem_seq
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_access_seq::mem_seq)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicType(variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Keyword(Variable)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Summary(The sequence used to test one memory)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Body(<p>The sequence used to test one memory</p>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicTitle: body
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_access_seq::body)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicType(task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Keyword(Task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Summary(Execute the Memory Access sequence. )
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Body(<p>Execute the Memory Access sequence. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicTitle: do_block
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_access_seq::do_block)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicType(task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Keyword(Task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Summary(Test all of the memories in a given <i>block</i>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Body(<p>Test all of the memories in a given <i>block</i></p>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicTitle: reset_blk
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_access_seq::reset_blk)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | TopicType(task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Keyword(Task)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | NumChilderen(0)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_mem_access_seq.svh] | [uvm_mem_access_seq] | +-------------------------------------------------------------------
| | [uvm_mem_access_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_mam.svh
| +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | TopicTitle: Memory Allocation Manager
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | QualifiedName(Memory Allocation Manager)
| | [uvm_mem_mam.svh] | TopicType(section)
| | [uvm_mem_mam.svh] | Keyword(Title)
| | [uvm_mem_mam.svh] | NumChilderen(0)
| | [uvm_mem_mam.svh] | Summary(Manages the exclusive allocation of consecutive memory locations called <i>regions</i>. )
| | [uvm_mem_mam.svh] | Body(<p>Manages the exclusive allocation of consecutive memory locations called <i>regions</i>. The regions can subsequently be accessed like little memories of their own, without knowing in which memory or offset they are actually located.</p><p>The memory allocation manager should be used by any application-level process that requires reserved space in the memory, such as DMA buffers.</p><p>A region will remain reserved until it is explicitly released.</p>)
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | TopicTitle: uvm_mem_mam
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | QualifiedName(uvm_pkg::uvm_mem_mam)
| | [uvm_mem_mam.svh] | TopicType(class)
| | [uvm_mem_mam.svh] | Keyword(CLASS)
| | [uvm_mem_mam.svh] | NumChilderen(13)
| | [uvm_mem_mam.svh] | Summary(Memory allocation manager)
| | [uvm_mem_mam.svh] | Body(<p>Memory allocation manager</p><p>Memory allocation management utility class similar to C's malloc() and free(). A single instance of this class is used to manage a single, contiguous address space.</p>)
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | | Children
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: Initialization
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(Initialization)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: default_alloc
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::default_alloc)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Region allocation policy)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Region allocation policy</p><p>This object is repeatedly randomized when allocating new regions.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: new
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::new)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Create a new manager instance)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Create a new manager instance</p><p>Create an instance of a memory allocation manager with the specified name and configuration. This instance manages all memory region allocation within the address range specified in the configuration descriptor.</p><p>If a reference to a memory abstraction class is provided, the memory locations within the regions can be accessed through the region descriptor, using the <link target="uvm_mem_region::read()" name="uvm_mem_region::read()" original="&lt; uvm_mem_region::read() &gt;"> and <link target="uvm_mem_region::write()" name="uvm_mem_region::write()" original="&lt; uvm_mem_region::write() &gt;"> methods.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: reconfigure
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::reconfigure)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Reconfigure the manager)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Reconfigure the manager</p><p>Modify the maximum and minimum addresses of the address space managed by the allocation manager, allocation mode, or locality. The number of bytes per memory location cannot be modified once an allocation manager has been constructed. All currently allocated regions must fall within the new address space.</p><p>Returns the previous configuration.</p><p>if no new configuration is specified, simply returns the current configuration.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: Memory Management
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(Memory Management)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: reserve_region
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::reserve_region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Reserve a specific memory region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Reserve a specific memory region</p><p>Reserve a memory region of the specified number of bytes starting at the specified offset. A descriptor of the reserved region is returned. If the specified region cannot be reserved, null is returned.</p><p>It may not be possible to reserve a region because it overlaps with an already-allocated region or it lies outside the address range managed by the memory manager.</p><p>Regions can be reserved to create &quot;holes&quot; in the managed address space.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: request_region
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::request_region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Request and reserve a memory region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Request and reserve a memory region</p><p>Request and reserve a memory region of the specified number of bytes starting at a random location. If an policy is specified, it is randomized to determine the start offset of the region. If no policy is specified, the policy found in the <link target="uvm_mem_mam::default_alloc" name="uvm_mem_mam::default_alloc" original="&lt; uvm_mem_mam::default_alloc &gt;"> class property is randomized.</p><p>A descriptor of the allocated region is returned. If no region can be allocated, <i>null</i> is returned.</p><p>It may not be possible to allocate a region because there is no area in the memory with enough consecutive locations to meet the size requirements or because there is another contradiction when randomizing the policy.</p><p>If the memory allocation is configured to <i>THRIFTY</i> or <i>NEARBY</i>, a suitable region is first sought procedurally.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: release_region
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::release_region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Release the specified region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Release the specified region</p><p>Release a previously allocated memory region. An error is issued if the specified region has not been previously allocated or is no longer allocated.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: release_all_regions
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::release_all_regions)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Forcibly release all allocated memory regions.)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Forcibly release all allocated memory regions.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: Introspection
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(Introspection)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Group)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body()
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: convert2string
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::convert2string)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Image of the state of the manager)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Image of the state of the manager</p><p>Create a human-readable description of the state of the memory manager and the currently allocated regions.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: for_each
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::for_each)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Iterate over all currently allocated regions)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Iterate over all currently allocated regions</p><p>If reset is <i>TRUE</i>, reset the iterator and return the first allocated region. Returns <i>null</i> when there are no additional allocated regions to iterate on.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicTitle: get_memory
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | QualifiedName(uvm_pkg::uvm_mem_mam::get_memory)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Summary(Get the managed memory implementation)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | | Body(<p>Get the managed memory implementation</p><p>Return the reference to the memory abstraction class for the memory implementing the locations managed by this instance of the allocation manager. Returns <i>null</i> if no memory abstraction class was specified at construction time.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | TopicTitle: uvm_mem_region
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | QualifiedName(uvm_pkg::uvm_mem_region)
| | [uvm_mem_mam.svh] | TopicType(class)
| | [uvm_mem_mam.svh] | Keyword(CLASS)
| | [uvm_mem_mam.svh] | NumChilderen(13)
| | [uvm_mem_mam.svh] | Summary(Allocated memory region descriptor)
| | [uvm_mem_mam.svh] | Body(<p>Allocated memory region descriptor</p><p>Each instance of this class describes an allocated memory region. Instances of this class are created only by the memory manager, and returned by the <link target="uvm_mem_mam::reserve_region()" name="uvm_mem_mam::reserve_region()" original="&lt; uvm_mem_mam::reserve_region() &gt;"> and <link target="uvm_mem_mam::request_region()" name="uvm_mem_mam::request_region()" original="&lt; uvm_mem_mam::request_region() &gt;"> methods.</p>)
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | | Children
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_start_offset
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_start_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Get the start offset of the region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Get the start offset of the region</p><p>Return the address offset, within the memory, where this memory region starts.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_end_offset
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_end_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Get the end offset of the region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Get the end offset of the region</p><p>Return the address offset, within the memory, where this memory region ends.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_len
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_len)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Size of the memory region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Size of the memory region</p><p>Return the number of consecutive memory locations (not necessarily bytes) in the allocated region.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_n_bytes
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_n_bytes)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Number of bytes in the region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Number of bytes in the region</p><p>Return the number of consecutive bytes in the allocated region. If the managed memory contains more than one byte per address, the number of bytes in an allocated region may be greater than the number of requested or reserved bytes.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: release_region
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::release_region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Release this region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Release this region</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_memory
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_memory)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Get the memory where the region resides)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Get the memory where the region resides</p><p>Return a reference to the memory abstraction class for the memory implementing this allocated memory region. Returns <i>null</i> if no memory abstraction class was specified for the allocation manager that allocated this region.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: get_virtual_registers
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::get_virtual_registers)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Function)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Get the virtual register array in this region)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Get the virtual register array in this region</p><p>Return a reference to the virtual register array abstraction class implemented in this region. Returns <i>null</i> if the memory region is not known to implement virtual registers.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: write
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::write)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Write to a memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Write to a memory location in the region.</p><p>Write to the memory location that corresponds to the specified <i>offset</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::write()" name="uvm_mem::write()" original="&lt; uvm_mem::write() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: read
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::read)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Read from a memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Read from a memory location in the region.</p><p>Read from the memory location that corresponds to the specified <i>offset</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::read()" name="uvm_mem::read()" original="&lt; uvm_mem::read() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: burst_write
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::burst_write)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Write to a set of memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Write to a set of memory location in the region.</p><p>Write to the memory locations that corresponds to the specified <i>burst</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::burst_write()" name="uvm_mem::burst_write()" original="&lt; uvm_mem::burst_write() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: burst_read
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::burst_read)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Read from a set of memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Read from a set of memory location in the region.</p><p>Read from the memory locations that corresponds to the specified <i>burst</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::burst_read()" name="uvm_mem::burst_read()" original="&lt; uvm_mem::burst_read() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: poke
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::poke)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Deposit in a memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Deposit in a memory location in the region.</p><p>Deposit the specified value in the memory location that corresponds to the specified <i>offset</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::poke()" name="uvm_mem::poke()" original="&lt; uvm_mem::poke() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicTitle: peek
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | QualifiedName(uvm_pkg::uvm_mem_region::peek)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | TopicType(task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Keyword(Task)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Summary(Sample a memory location in the region.)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | | Body(<p>Sample a memory location in the region.</p><p>Sample the memory location that corresponds to the specified <i>offset</i> within this region. Requires that the memory abstraction class be associated with the memory allocation manager that allocated this region.</p><p>See <link target="uvm_mem::peek()" name="uvm_mem::peek()" original="&lt; uvm_mem::peek() &gt;"> for more details.</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_region] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | TopicTitle: uvm_mem_mam_policy
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | QualifiedName(uvm_pkg::uvm_mem_mam_policy)
| | [uvm_mem_mam.svh] | TopicType(class)
| | [uvm_mem_mam.svh] | Keyword(Class)
| | [uvm_mem_mam.svh] | NumChilderen(5)
| | [uvm_mem_mam.svh] | Summary(An instance of this class is randomized to determine the starting offset of a randomly allocated memory region. )
| | [uvm_mem_mam.svh] | Body(<p>An instance of this class is randomized to determine the starting offset of a randomly allocated memory region. This class can be extended to provide additional constraints on the starting offset, such as word alignment or location of the region within a memory page. If a procedural region allocation policy is required, it can be implemented in the pre/post_randomize() method.</p>)
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | | Children
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicTitle: len
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | QualifiedName(uvm_pkg::uvm_mem_mam_policy::len)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Summary(Number of addresses required)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Body(<p>Number of addresses required</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicTitle: start_offset
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | QualifiedName(uvm_pkg::uvm_mem_mam_policy::start_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Summary(The starting offset of the region)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Body(<p>The starting offset of the region</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicTitle: min_offset
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | QualifiedName(uvm_pkg::uvm_mem_mam_policy::min_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Summary(Minimum address offset in the managed address space)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Body(<p>Minimum address offset in the managed address space</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicTitle: max_offset
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | QualifiedName(uvm_pkg::uvm_mem_mam_policy::max_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Summary(Maximum address offset in the managed address space)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Body(<p>Maximum address offset in the managed address space</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicTitle: in_use
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | QualifiedName(uvm_pkg::uvm_mem_mam_policy::in_use)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Summary(Regions already allocated in the managed address space)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | | Body(<p>Regions already allocated in the managed address space</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_policy] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | TopicTitle: uvm_mem_mam_cfg
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | QualifiedName(uvm_pkg::uvm_mem_mam_cfg)
| | [uvm_mem_mam.svh] | TopicType(class)
| | [uvm_mem_mam.svh] | Keyword(CLASS)
| | [uvm_mem_mam.svh] | NumChilderen(5)
| | [uvm_mem_mam.svh] | Summary(Specifies the memory managed by an instance of a <link target="uvm_mem_mam" name="uvm_mem_mam" original="&lt; uvm_mem_mam &gt;"> memory allocation manager class.)
| | [uvm_mem_mam.svh] | Body(<p>Specifies the memory managed by an instance of a <link target="uvm_mem_mam" name="uvm_mem_mam" original="&lt; uvm_mem_mam &gt;"> memory allocation manager class.</p>)
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | | Children
| | [uvm_mem_mam.svh] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicTitle: n_bytes
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | QualifiedName(uvm_pkg::uvm_mem_mam_cfg::n_bytes)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Summary(Number of bytes in each memory location)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Body(<p>Number of bytes in each memory location</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicTitle: start_offset
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | QualifiedName(uvm_pkg::uvm_mem_mam_cfg::start_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Summary(Lowest address of managed space)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Body(<p>Lowest address of managed space</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicTitle: end_offset
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | QualifiedName(uvm_pkg::uvm_mem_mam_cfg::end_offset)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Summary(Last address of managed space)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Body(<p>Last address of managed space</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicTitle: mode
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | QualifiedName(uvm_pkg::uvm_mem_mam_cfg::mode)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Summary(Region allocation mode)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Body(<p>Region allocation mode</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicTitle: locality
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | QualifiedName(uvm_pkg::uvm_mem_mam_cfg::locality)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | TopicType(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Keyword(variable)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | NumChilderen(0)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Summary(Region location mode)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | | Body(<p>Region location mode</p>)
| | [uvm_mem_mam.svh] | [uvm_mem_mam_cfg] | +-------------------------------------------------------------------
| | [uvm_mem_mam.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_mem_walk_seq.svh
| +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | TopicTitle: Memory Walking-Ones Test Sequences
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | QualifiedName(Memory Walking-Ones Test Sequences)
| | [uvm_mem_walk_seq.svh] | TopicType(section)
| | [uvm_mem_walk_seq.svh] | Keyword(Title)
| | [uvm_mem_walk_seq.svh] | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | Summary(This section defines sequences for applying a &quot;walking-ones&quot; algorithm on one or more memories.)
| | [uvm_mem_walk_seq.svh] | Body(<p>This section defines sequences for applying a &quot;walking-ones&quot; algorithm on one or more memories.</p>)
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | TopicTitle: uvm_mem_single_walk_seq
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | QualifiedName(uvm_pkg::uvm_mem_single_walk_seq)
| | [uvm_mem_walk_seq.svh] | TopicType(class)
| | [uvm_mem_walk_seq.svh] | Keyword(Class)
| | [uvm_mem_walk_seq.svh] | NumChilderen(3)
| | [uvm_mem_walk_seq.svh] | Summary(Runs the walking-ones algorithm on the memory given by the <link target="mem" name="mem" original="&lt; mem &gt;"> property, which must be assigned prior to starting this sequence.)
| | [uvm_mem_walk_seq.svh] | Body(<p>Runs the walking-ones algorithm on the memory given by the <link target="mem" name="mem" original="&lt; mem &gt;"> property, which must be assigned prior to starting this sequence.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, or &quot;NO_MEM_WALK_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the memory, the memory is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.mem0.get_full_name()},
                           &quot;NO_MEM_TESTS&quot;, 1, this);
</pre></blockquote><p>The walking ones algorithm is performed for each map in which the memory is defined.</p><blockquote><pre>for (k = 0 thru memsize-1)
  write addr=k data=~k
  if (k &gt; 0) {
    read addr=k-1, expect data=~(k-1)
    write addr=k-1 data=k-1
  if (k == last addr)
    read addr=k, expect data=~k
</pre></blockquote>)
| | [uvm_mem_walk_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | | Children
| | [uvm_mem_walk_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicTitle: mem
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_single_walk_seq::mem)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicType(variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Keyword(Variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Summary(The memory to test; must be assigned prior to starting sequence.)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Body(<p>The memory to test; must be assigned prior to starting sequence.</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicTitle: new
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_single_walk_seq::new)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicType(function)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Keyword(Function)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Summary(Creates a new instance of the class with the given name.)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Body(<p>Creates a new instance of the class with the given name.</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicTitle: body
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_single_walk_seq::body)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | TopicType(task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Keyword(Task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Summary(Performs the walking-ones algorithm on each map of the memory specifed in <link target="mem" name="mem" original="&lt; mem &gt;">.)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | | Body(<p>Performs the walking-ones algorithm on each map of the memory specifed in <link target="mem" name="mem" original="&lt; mem &gt;">.</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_single_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | TopicTitle: uvm_mem_walk_seq
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | QualifiedName(uvm_pkg::uvm_mem_walk_seq)
| | [uvm_mem_walk_seq.svh] | TopicType(class)
| | [uvm_mem_walk_seq.svh] | Keyword(Class)
| | [uvm_mem_walk_seq.svh] | NumChilderen(5)
| | [uvm_mem_walk_seq.svh] | Summary(Verifies the all memories in a block by executing the <link target="uvm_mem_single_walk_seq" name="uvm_mem_single_walk_seq" original="&lt; uvm_mem_single_walk_seq &gt;"> sequence on every memory within it.)
| | [uvm_mem_walk_seq.svh] | Body(<p>Verifies the all memories in a block by executing the <link target="uvm_mem_single_walk_seq" name="uvm_mem_single_walk_seq" original="&lt; uvm_mem_single_walk_seq &gt;"> sequence on every memory within it.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, or &quot;NO_MEM_WALK_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block, the block is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_MEM_TESTS&quot;, 1, this);
</pre></blockquote>)
| | [uvm_mem_walk_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | | Children
| | [uvm_mem_walk_seq.svh] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicTitle: model
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | QualifiedName(model)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicType(variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Keyword(Variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Summary(The block to be tested. )
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicTitle: mem_seq
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_walk_seq::mem_seq)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicType(variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Keyword(Variable)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Summary(The sequence used to test one memory)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Body(<p>The sequence used to test one memory</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicTitle: body
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_walk_seq::body)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicType(task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Keyword(Task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Summary(Executes the mem walk sequence, one block at a time. )
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Body(<p>Executes the mem walk sequence, one block at a time. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicTitle: do_block
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_walk_seq::do_block)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicType(task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Keyword(Task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Summary(Test all of the memories in a given <i>block</i>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Body(<p>Test all of the memories in a given <i>block</i></p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicTitle: reset_blk
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | QualifiedName(uvm_pkg::uvm_mem_walk_seq::reset_blk)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | TopicType(task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Keyword(Task)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | NumChilderen(0)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_mem_walk_seq.svh] | [uvm_mem_walk_seq] | +-------------------------------------------------------------------
| | [uvm_mem_walk_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_message_defines.svh
| +-------------------------------------------------------------------
| | [uvm_message_defines.svh] +-------------------------------------------------------------------
| | [uvm_message_defines.svh] | TopicTitle: Report Macros
| | [uvm_message_defines.svh] +-------------------------------------------------------------------
| | [uvm_message_defines.svh] | QualifiedName(Report Macros)
| | [uvm_message_defines.svh] | TopicType(section)
| | [uvm_message_defines.svh] | Keyword(Title)
| | [uvm_message_defines.svh] | NumChilderen(0)
| | [uvm_message_defines.svh] | Summary(This set of macros provides wrappers around the uvm_report_* <link target="Reporting" name="Reporting" original="&lt; Reporting &gt;"> functions. )
| | [uvm_message_defines.svh] | Body(<p>This set of macros provides wrappers around the uvm_report_* <link target="Reporting" name="Reporting" original="&lt; Reporting &gt;"> functions. The macros serve two essential purposes:</p><ul><li>To reduce the processing overhead associated with filtered out messages, a check is made against the report's verbosity setting and the action for the id/severity pair before any string formatting is performed. This affects only `uvm_info reports.</li><li>The `__FILE__ and `__LINE__ information is automatically provided to the underlying uvm_report_* call. Having the file and line number from where a report was issued aides in debug. You can disable display of file and line information in reports by defining UVM_REPORT_DISABLE_FILE_LINE on the command line.</li></ul><p>The macros also enforce a verbosity setting of UVM_NONE for warnings, errors and fatals so that they cannot be mistakingly turned off by setting the verbosity level too low (warning and errors can still be turned off by setting the actions appropriately).</p><p>To use the macros, replace the previous call to uvm_report_* with the corresponding macro.</p><blockquote><pre>//Previous calls to uvm_report_*
uvm_report_info(&quot;MYINFO1&quot;, $sformatf(&quot;val: %0d&quot;, val), UVM_LOW);
uvm_report_warning(&quot;MYWARN1&quot;, &quot;This is a warning&quot;);
uvm_report_error(&quot;MYERR&quot;, &quot;This is an error&quot;);
uvm_report_fatal(&quot;MYFATAL&quot;, &quot;A fatal error has occurred&quot;);
</pre></blockquote><p>The above code is replaced by</p><blockquote><pre>//New calls to `uvm_*
`uvm_info(&quot;MYINFO1&quot;, $sformatf(&quot;val: %0d&quot;, val), UVM_LOW)
`uvm_warning(&quot;MYWARN1&quot;, &quot;This is a warning&quot;)
`uvm_error(&quot;MYERR&quot;, &quot;This is an error&quot;)
`uvm_fatal(&quot;MYFATAL&quot;, &quot;A fatal error has occurred&quot;)
</pre></blockquote><p>Macros represent text substitutions, not statements, so they should not be terminated with semi-colons.</p>)
| | [uvm_message_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_misc.svh
| +-------------------------------------------------------------------
| | [uvm_misc.svh] +-------------------------------------------------------------------
| | [uvm_misc.svh] | TopicTitle: uvm_utils
| | [uvm_misc.svh] +-------------------------------------------------------------------
| | [uvm_misc.svh] | QualifiedName(uvm_pkg::uvm_utils)
| | [uvm_misc.svh] | TopicType(class)
| | [uvm_misc.svh] | Keyword(CLASS)
| | [uvm_misc.svh] | NumChilderen(2)
| | [uvm_misc.svh] | Summary(This class contains useful template functions.)
| | [uvm_misc.svh] | Body(<p>This class contains useful template functions.</p>)
| | [uvm_misc.svh] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | | Children
| | [uvm_misc.svh] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | | TopicTitle: find_all
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | | QualifiedName(uvm_pkg::uvm_utils::find_all)
| | [uvm_misc.svh] | [uvm_utils] | | TopicType(function)
| | [uvm_misc.svh] | [uvm_utils] | | Keyword(Function)
| | [uvm_misc.svh] | [uvm_utils] | | NumChilderen(0)
| | [uvm_misc.svh] | [uvm_utils] | | Summary(Recursively finds all component instances of the parameter type <i>TYPE</i>, starting with the component given by <i>start</i>. )
| | [uvm_misc.svh] | [uvm_utils] | | Body(<p>Recursively finds all component instances of the parameter type <i>TYPE</i>, starting with the component given by <i>start</i>. Uses <link target="uvm_root::find_all" name="uvm_root::find_all" original="&lt; uvm_root::find_all &gt;">.</p>)
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | | TopicTitle: get_config
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] | [uvm_utils] | | QualifiedName(uvm_pkg::uvm_utils::get_config)
| | [uvm_misc.svh] | [uvm_utils] | | TopicType(function)
| | [uvm_misc.svh] | [uvm_utils] | | Keyword(Function)
| | [uvm_misc.svh] | [uvm_utils] | | NumChilderen(0)
| | [uvm_misc.svh] | [uvm_utils] | | Summary(This method gets the object config of type <i>TYPE</i> associated with component <i>comp</i>. )
| | [uvm_misc.svh] | [uvm_utils] | | Body(<p>This method gets the object config of type <i>TYPE</i> associated with component <i>comp</i>. We check for the two kinds of error which may occur with this kind of operation.</p>)
| | [uvm_misc.svh] | [uvm_utils] | +-------------------------------------------------------------------
| | [uvm_misc.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_monitor.svh
| +-------------------------------------------------------------------
| | [uvm_monitor.svh] +-------------------------------------------------------------------
| | [uvm_monitor.svh] | TopicTitle: uvm_monitor
| | [uvm_monitor.svh] +-------------------------------------------------------------------
| | [uvm_monitor.svh] | QualifiedName(uvm_pkg::uvm_monitor)
| | [uvm_monitor.svh] | TopicType(class)
| | [uvm_monitor.svh] | Keyword(CLASS)
| | [uvm_monitor.svh] | NumChilderen(1)
| | [uvm_monitor.svh] | Summary(This class should be used as the base class for user-defined monitors.)
| | [uvm_monitor.svh] | Body(<p>This class should be used as the base class for user-defined monitors.</p><p>Deriving from uvm_monitor allows you to distinguish monitors from generic component types inheriting from uvm_component.  Such monitors will automatically inherit features that may be added to uvm_monitor in the future.</p>)
| | [uvm_monitor.svh] | +-------------------------------------------------------------------
| | [uvm_monitor.svh] | | Children
| | [uvm_monitor.svh] | +-------------------------------------------------------------------
| | [uvm_monitor.svh] | [uvm_monitor] | +-------------------------------------------------------------------
| | [uvm_monitor.svh] | [uvm_monitor] | | TopicTitle: new
| | [uvm_monitor.svh] | [uvm_monitor] | +-------------------------------------------------------------------
| | [uvm_monitor.svh] | [uvm_monitor] | | QualifiedName(uvm_pkg::uvm_monitor::new)
| | [uvm_monitor.svh] | [uvm_monitor] | | TopicType(function)
| | [uvm_monitor.svh] | [uvm_monitor] | | Keyword(Function)
| | [uvm_monitor.svh] | [uvm_monitor] | | NumChilderen(0)
| | [uvm_monitor.svh] | [uvm_monitor] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_monitor.svh] | [uvm_monitor] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_monitor.svh] | [uvm_monitor] | +-------------------------------------------------------------------
| | [uvm_monitor.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object.svh
| +-------------------------------------------------------------------
| | [uvm_object.svh] +-------------------------------------------------------------------
| | [uvm_object.svh] | TopicTitle: uvm_object
| | [uvm_object.svh] +-------------------------------------------------------------------
| | [uvm_object.svh] | QualifiedName(uvm_pkg::uvm_object)
| | [uvm_object.svh] | TopicType(class)
| | [uvm_object.svh] | Keyword(CLASS)
| | [uvm_object.svh] | NumChilderen(44)
| | [uvm_object.svh] | Summary(The uvm_object class is the base class for all UVM data and hierarchical classes. )
| | [uvm_object.svh] | Body(<p>The uvm_object class is the base class for all UVM data and hierarchical classes. Its primary role is to define a set of methods for such common operations as <link target="create" name="create" original="&lt; create &gt;">, <link target="copy" name="copy" original="&lt; copy &gt;">, <link target="compare" name="compare" original="&lt; compare &gt;">, <link target="print" name="print" original="&lt; print &gt;">, and <link target="record" name="record" original="&lt; record &gt;">. Classes deriving from uvm_object must implement the pure virtual methods such as <link target="create" name="create" original="&lt; create &gt;"> and <link target="get_type_name" name="get_type_name" original="&lt; get_type_name &gt;">.</p>)
| | [uvm_object.svh] | +-------------------------------------------------------------------
| | [uvm_object.svh] | | Children
| | [uvm_object.svh] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: new
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::new)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Creates a new uvm_object with the given instance <i>name</i>. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Creates a new uvm_object with the given instance <i>name</i>. If <i>name</i> is not supplied, the object is unnamed.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Seeding
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Seeding)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: use_uvm_seeding
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::use_uvm_seeding)
| | [uvm_object.svh] | [uvm_object] | | TopicType(variable)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Variable)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(This bit enables or disables the UVM seeding mechanism. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>This bit enables or disables the UVM seeding mechanism. It globally affects the operation of the reseed method.</p><p>When enabled, UVM-based objects are seeded based on their type and full hierarchical name rather than allocation order. This improves random stability for objects whose instance names are unique across each type. The <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> class is an example of a type that has a unique instance name.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: reseed
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::reseed)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Calls <i>srandom</i> on the object to reseed the object using the UVM seeding mechanism, which sets the seed based on type name and instance name instead of based on instance position in a thread.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Calls <i>srandom</i> on the object to reseed the object using the UVM seeding mechanism, which sets the seed based on type name and instance name instead of based on instance position in a thread.</p><p>If the <link target="use_uvm_seeding" name="use_uvm_seeding" original="&lt; use_uvm_seeding &gt;"> static variable is set to 0, then reseed() does not perform any function.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Identification
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Identification)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: set_name
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::set_name)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Sets the instance name of this object, overwriting any previously given name.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Sets the instance name of this object, overwriting any previously given name.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_name
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_name)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the name of the object, as provided by the <i>name</i> argument in the <link target="new" name="new" original="&lt; new &gt;"> constructor or <link target="set_name" name="set_name" original="&lt; set_name &gt;"> method.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the name of the object, as provided by the <i>name</i> argument in the <link target="new" name="new" original="&lt; new &gt;"> constructor or <link target="set_name" name="set_name" original="&lt; set_name &gt;"> method.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_full_name
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_full_name)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the full hierarchical name of this object. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the full hierarchical name of this object. The default implementation is the same as <link target="get_name" name="get_name" original="&lt; get_name &gt;">, as uvm_objects do not inherently possess hierarchy.</p><p>Objects possessing hierarchy, such as <link target="uvm_components" name="uvm_components" original="&lt; uvm_components &gt;">, override the default implementation. Other objects might be associated with component hierarchy but are not themselves components. For example, <link target="uvm_sequence #(REQ,RSP)" name="uvm_sequence #(REQ,RSP)" original="&lt; uvm_sequence #(REQ,RSP) &gt;"> classes are typically associated with a <link target="uvm_sequencer #(REQ,RSP)" name="uvm_sequencer #(REQ,RSP)" original="&lt; uvm_sequencer #(REQ,RSP) &gt;">. In this case, it is useful to override get_full_name to return the sequencer's full name concatenated with the sequence's name. This provides the sequence a full context, which is useful when debugging.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_inst_id
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_inst_id)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the object's unique, numeric instance identifier.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the object's unique, numeric instance identifier.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_inst_count
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_inst_count)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the current value of the instance counter, which represents the total number of uvm_object-based objects that have been allocated in simulation. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the current value of the instance counter, which represents the total number of uvm_object-based objects that have been allocated in simulation. The instance counter is used to form a unique numeric instance identifier.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_type
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_type)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the type-proxy (wrapper) for this object. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the type-proxy (wrapper) for this object. The <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">'s type-based override and creation methods take arguments of <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">. This method, if implemented, can be used as convenient means of supplying those arguments.</p><p>The default implementation of this method produces an error and returns null. To enable use of this method, a user's subtype must implement a version that returns the subtype's wrapper.</p><h4 class=CHeading> For example</h4><blockquote><pre>class cmd extends uvm_object;
  typedef uvm_object_registry #(cmd) type_id;
  static function type_id get_type();
    return type_id::get();
  endfunction
endclass
</pre></blockquote><h4 class=CHeading> Then, to use</h4><blockquote><pre>factory.set_type_override(cmd::get_type(),subcmd::get_type());
</pre></blockquote><p>This function is implemented by the `uvm_*_utils macros, if employed.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_object_type
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_object_type)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Returns the type-proxy (wrapper) for this object. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Returns the type-proxy (wrapper) for this object. The <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">'s type-based override and creation methods take arguments of <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">. This method, if implemented, can be used as convenient means of supplying those arguments. This method is the same as the static <link target="get_type" name="get_type" original="&lt; get_type &gt;"> method, but uses an already allocated object to determine the type-proxy to access (instead of using the static object).</p><p>The default implementation of this method does a factory lookup of the proxy using the return value from <link target="get_type_name" name="get_type_name" original="&lt; get_type_name &gt;">. If the type returned by <link target="get_type_name" name="get_type_name" original="&lt; get_type_name &gt;"> is not registered with the factory, then a null handle is returned.</p><h4 class=CHeading> For example</h4><blockquote><pre>class cmd extends uvm_object;
  typedef uvm_object_registry #(cmd) type_id;
  static function type_id get_type();
    return type_id::get();
  endfunction
  virtual function type_id get_object_type();
    return type_id::get();
  endfunction
endclass
</pre></blockquote><p>This function is implemented by the `uvm_*_utils macros, if employed.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: get_type_name
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::get_type_name)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(This function returns the type name of the object, which is typically the type identifier enclosed in quotes. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>This function returns the type name of the object, which is typically the type identifier enclosed in quotes. It is used for various debugging functions in the library, and it is used by the factory for creating objects.</p><p>This function must be defined in every derived class.</p><h4 class=CHeading> A typical implementation is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  ...
  const static string type_name = &quot;mytype&quot;;

  virtual function string get_type_name();
    return type_name;
  endfunction
</pre></blockquote><p>We define the <i>type_name</i> static variable to enable access to the type name without need of an object of the class, i.e., to enable access via the scope operator, <i>mytype::type_name</i>.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Creation
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Creation)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: create
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::create)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The create method allocates a new object of the same type as this object and returns it via a base uvm_object handle. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The create method allocates a new object of the same type as this object and returns it via a base uvm_object handle. Every class deriving from uvm_object, directly or indirectly, must implement the create method.</p><h4 class=CHeading> A typical implementation is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  ...
  virtual function uvm_object create(string name=&quot;&quot;);
    mytype t = new(name);
    return t;
  endfunction</pre></blockquote>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: clone
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::clone)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The clone method creates and returns an exact copy of this object.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The clone method creates and returns an exact copy of this object.</p><p>The default implementation calls <link target="create" name="create" original="&lt; create &gt;"> followed by <link target="copy" name="copy" original="&lt; copy &gt;">. As clone is virtual, derived classes may override this implementation if desired.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Printing
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Printing)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: print
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::print)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The print method deep-prints this object's properties in a format and manner governed by the given <i>printer</i> argument; if the <i>printer</i> argument is not provided, the global <link target="uvm_default_printer" name="uvm_default_printer" original="&lt; uvm_default_printer &gt;"> is used. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The print method deep-prints this object's properties in a format and manner governed by the given <i>printer</i> argument; if the <i>printer</i> argument is not provided, the global <link target="uvm_default_printer" name="uvm_default_printer" original="&lt; uvm_default_printer &gt;"> is used. See <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> for more information on printer output formatting. See also <link target="uvm_line_printer" name="uvm_line_printer" original="&lt; uvm_line_printer &gt;">, <link target="uvm_tree_printer" name="uvm_tree_printer" original="&lt; uvm_tree_printer &gt;">, and <link target="uvm_table_printer" name="uvm_table_printer" original="&lt; uvm_table_printer &gt;"> for details on the pre-defined printer &quot;policies,&quot; or formatters, provided by the UVM.</p><p>The <i>print</i> method is not virtual and must not be overloaded. To include custom information in the <i>print</i> and <i>sprint</i> operations, derived classes must override the <link target="do_print" name="do_print" original="&lt; do_print &gt;"> method and use the provided printer policy class to format the output.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: sprint
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::sprint)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The <i>sprint</i> method works just like the <link target="print" name="print" original="&lt; print &gt;"> method, except the output is returned in a string rather than displayed.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The <i>sprint</i> method works just like the <link target="print" name="print" original="&lt; print &gt;"> method, except the output is returned in a string rather than displayed.</p><p>The <i>sprint</i> method is not virtual and must not be overloaded. To include additional fields in the <i>print</i> and <i>sprint</i> operation, derived classes must override the <link target="do_print" name="do_print" original="&lt; do_print &gt;"> method and use the provided printer policy class to format the output. The printer policy will manage all string concatenations and provide the string to <i>sprint</i> to return to the caller.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_print
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_print)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The <i>do_print</i> method is the user-definable hook called by <link target="print" name="print" original="&lt; print &gt;"> and <link target="sprint" name="sprint" original="&lt; sprint &gt;"> that allows users to customize what gets printed or sprinted beyond the field information provided by the `uvm_field_* macros, <link target="Utility and Field Macros for Components and Objects" name="Utility and Field Macros for Components and Objects" original="&lt; Utility and Field Macros for Components and Objects &gt;">.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The <i>do_print</i> method is the user-definable hook called by <link target="print" name="print" original="&lt; print &gt;"> and <link target="sprint" name="sprint" original="&lt; sprint &gt;"> that allows users to customize what gets printed or sprinted beyond the field information provided by the `uvm_field_* macros, <link target="Utility and Field Macros for Components and Objects" name="Utility and Field Macros for Components and Objects" original="&lt; Utility and Field Macros for Components and Objects &gt;">.</p><p>The <i>printer</i> argument is the policy object that governs the format and content of the output. To ensure correct <link target="print" name="print" original="&lt; print &gt;"> and <link target="sprint" name="sprint" original="&lt; sprint &gt;"> operation, and to ensure a consistent output format, the <i>printer</i> must be used by all <link target="do_print" name="do_print" original="&lt; do_print &gt;"> implementations. That is, instead of using <i>$display</i> or string concatenations directly, a <i>do_print</i> implementation must call through the <i>printer's</i> API to add information to be printed or sprinted.</p><h4 class=CHeading> An example implementation of <i>do_print</i> is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  data_obj data;
  int f1;
  virtual function void do_print (uvm_printer printer);
    super.do_print(printer);
    printer.print_int(&quot;f1&quot;, f1, $bits(f1), DEC);
    printer.print_object(&quot;data&quot;, data);
  endfunction
</pre></blockquote><h4 class=CHeading> Then, to print and sprint the object, you could write</h4><blockquote><pre>mytype t = new;
t.print();
uvm_report_info(&quot;Received&quot;,t.sprint());
</pre></blockquote><p>See <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> for information about the printer API.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: convert2string
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::convert2string)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(This virtual function is a user-definable hook, called directly by the user, that allows users to provide object information in the form of a string. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>This virtual function is a user-definable hook, called directly by the user, that allows users to provide object information in the form of a string. Unlike <link target="sprint" name="sprint" original="&lt; sprint &gt;">, there is no requirement to use an <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> policy object. As such, the format and content of the output is fully customizable, which may be suitable for applications not requiring the consistent formatting offered by the <link target="print" name="print" original="&lt; print &gt;">/<link target="sprint" name="sprint" original="&lt; sprint &gt;">/<link target="do_print" name="do_print" original="&lt; do_print &gt;"> API.</p><p>Fields declared in <link target="Utility Macros" name="Utility Macros" original="&lt; Utility Macros &gt;"> macros (`uvm_field_*), if used, will not automatically appear in calls to convert2string.</p><p>An example implementation of convert2string follows.</p><blockquote><pre>class base extends uvm_object;
  string field = &quot;foo&quot;;
  virtual function string convert2string();
    convert2string = {&quot;base_field=&quot;,field};
  endfunction
endclass

class obj2 extends uvm_object;
  string field = &quot;bar&quot;;
  virtual function string convert2string();
    convert2string = {&quot;child_field=&quot;,field};
  endfunction
endclass

class obj extends base;
  int addr = 'h123;
  int data = 'h456;
  bit write = 1;
  obj2 child = new;
  virtual function string convert2string();
     convert2string = {super.convert2string(),
       $sformatf(&quot; write=%0d addr=%8h data=%8h &quot;,write,addr,data),
       child.convert2string()};
  endfunction
endclass
</pre></blockquote><h4 class=CHeading> Then, to display an object, you could write</h4><blockquote><pre>obj o = new;
uvm_report_info(&quot;BusMaster&quot;,{&quot;Sending:\n &quot;,o.convert2string()});
</pre></blockquote><h4 class=CHeading> The output will look similar to</h4><blockquote><pre>UVM_INFO @ 0: reporter [BusMaster] Sending:
   base_field=foo write=1 addr=00000123 data=00000456 child_field=bar</pre></blockquote>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Recording
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Recording)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: record
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::record)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The record method deep-records this object's properties according to an optional <i>recorder</i> policy. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The record method deep-records this object's properties according to an optional <i>recorder</i> policy. The method is not virtual and must not be overloaded. To include additional fields in the record operation, derived classes should override the <link target="do_record" name="do_record" original="&lt; do_record &gt;"> method.</p><p>The optional <i>recorder</i> argument specifies the recording policy, which governs how recording takes place. If a recorder policy is not provided explicitly, then the global <link target="uvm_default_recorder" name="uvm_default_recorder" original="&lt; uvm_default_recorder &gt;"> policy is used. See uvm_recorder for information.</p><p>A simulator's recording mechanism is vendor-specific. By providing access via a common interface, the uvm_recorder policy provides vendor-independent access to a simulator's recording capabilities.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_record
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_record)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The do_record method is the user-definable hook called by the <link target="record" name="record" original="&lt; record &gt;"> method. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The do_record method is the user-definable hook called by the <link target="record" name="record" original="&lt; record &gt;"> method. A derived class should override this method to include its fields in a record operation.</p><p>The <i>recorder</i> argument is policy object for recording this object. A do_record implementation should call the appropriate recorder methods for each of its fields. Vendor-specific recording implementations are encapsulated in the <i>recorder</i> policy, thereby insulating user-code from vendor-specific behavior. See <link target="uvm_recorder" name="uvm_recorder" original="&lt; uvm_recorder &gt;"> for more information.</p><h4 class=CHeading> A typical implementation is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  data_obj data;
  int f1;
  function void do_record (uvm_recorder recorder);
    recorder.record_field_int(&quot;f1&quot;, f1, $bits(f1), DEC);
    recorder.record_object(&quot;data&quot;, data);
  endfunction</pre></blockquote>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Copying
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Copying)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: copy
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::copy)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The copy makes this object a copy of the specified object.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The copy makes this object a copy of the specified object.</p><p>The copy method is not virtual and should not be overloaded in derived classes. To copy the fields of a derived class, that class should override the <link target="do_copy" name="do_copy" original="&lt; do_copy &gt;"> method.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_copy
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_copy)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The do_copy method is the user-definable hook called by the copy method. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The do_copy method is the user-definable hook called by the copy method. A derived class should override this method to include its fields in a copy operation.</p><h4 class=CHeading> A typical implementation is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  ...
  int f1;
  function void do_copy (uvm_object rhs);
    mytype rhs_;
    super.do_copy(rhs);
    $cast(rhs_,rhs);
    field_1 = rhs_.field_1;
  endfunction
</pre></blockquote><p>The implementation must call <i>super.do_copy</i>, and it must $cast the rhs argument to the derived type before copying.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Comparing
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Comparing)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: compare
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::compare)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(Deep compares members of this data object with those of the object provided in the <i>rhs</i> (right-hand side) argument, returning 1 on a match, 0 othewise.)
| | [uvm_object.svh] | [uvm_object] | | Body(<p>Deep compares members of this data object with those of the object provided in the <i>rhs</i> (right-hand side) argument, returning 1 on a match, 0 othewise.</p><p>The compare method is not virtual and should not be overloaded in derived classes. To compare the fields of a derived class, that class should override the <link target="do_compare" name="do_compare" original="&lt; do_compare &gt;"> method.</p><p>The optional <i>comparer</i> argument specifies the comparison policy. It allows you to control some aspects of the comparison operation. It also stores the results of the comparison, such as field-by-field miscompare information and the total number of miscompares. If a compare policy is not provided, then the global <i>uvm_default_comparer</i> policy is used. See <link target="uvm_comparer" name="uvm_comparer" original="&lt; uvm_comparer &gt;"> for more information.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_compare
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_compare)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The do_compare method is the user-definable hook called by the <link target="compare" name="compare" original="&lt; compare &gt;"> method. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The do_compare method is the user-definable hook called by the <link target="compare" name="compare" original="&lt; compare &gt;"> method. A derived class should override this method to include its fields in a compare operation. It should return 1 if the comparison succeeds, 0 otherwise.</p><h4 class=CHeading> A typical implementation is as follows</h4><blockquote><pre>class mytype extends uvm_object;
  ...
  int f1;
  virtual function bit do_compare (uvm_object rhs,uvm_comparer comparer);
    mytype rhs_;
    do_compare = super.do_compare(rhs,comparer);
    $cast(rhs_,rhs);
    do_compare &amp;= comparer.compare_field_int(&quot;f1&quot;, f1, rhs_.f1);
  endfunction
</pre></blockquote><p>A derived class implementation must call <i>super.do_compare()</i> to ensure its base class' properties, if any, are included in the comparison. Also, the rhs argument is provided as a generic uvm_object. Thus, you must <i>$cast</i> it to the type of this object before comparing.</p><p>The actual comparison should be implemented using the uvm_comparer object rather than direct field-by-field comparison. This enables users of your class to customize how comparisons are performed and how much miscompare information is collected. See uvm_comparer for more details.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Packing
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Packing)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: pack
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::pack)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: pack_bytes
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::pack_bytes)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: pack_ints
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::pack_ints)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The pack methods bitwise-concatenate this object's properties into an array of bits, bytes, or ints. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The pack methods bitwise-concatenate this object's properties into an array of bits, bytes, or ints. The methods are not virtual and must not be overloaded. To include additional fields in the pack operation, derived classes should override the <link target="do_pack" name="do_pack" original="&lt; do_pack &gt;"> method.</p><p>The optional <i>packer</i> argument specifies the packing policy, which governs the packing operation. If a packer policy is not provided, the global <link target="uvm_default_packer" name="uvm_default_packer" original="&lt; uvm_default_packer &gt;"> policy is used. See <link target="uvm_packer" name="uvm_packer" original="&lt; uvm_packer &gt;"> for more information.</p><p>The return value is the total number of bits packed into the given array. Use the array's built-in <i>size</i> method to get the number of bytes or ints consumed during the packing process.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_pack
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_pack)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The do_pack method is the user-definable hook called by the <link target="pack" name="pack" original="&lt; pack &gt;"> methods. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The do_pack method is the user-definable hook called by the <link target="pack" name="pack" original="&lt; pack &gt;"> methods. A derived class should override this method to include its fields in a pack operation.</p><p>The <i>packer</i> argument is the policy object for packing. The policy object should be used to pack objects.</p><p>A typical example of an object packing itself is as follows</p><blockquote><pre>class mysubtype extends mysupertype;
  ...
  shortint myshort;
  obj_type myobj;
  byte myarray[];
  ...
  function void do_pack (uvm_packer packer);
    super.do_pack(packer); // pack mysupertype properties
    packer.pack_field_int(myarray.size(), 32);
    foreach (myarray)
      packer.pack_field_int(myarray[index], 8);
    packer.pack_field_int(myshort, $bits(myshort));
    packer.pack_object(myobj);
  endfunction
</pre></blockquote><p>The implementation must call <i>super.do_pack</i> so that base class properties are packed as well.</p><p>If your object contains dynamic data (object, string, queue, dynamic array, or associative array), and you intend to unpack into an equivalent data structure when unpacking, you must include meta-information about the dynamic data when packing as follows.</p><ul><li>For queues, dynamic arrays, or associative arrays, pack the number of elements in the array in the 32 bits immediately before packing individual elements, as shown above.</li><li>For string data types, append a zero byte after packing the string contents.</li><li>For objects, pack 4 bits immediately before packing the object. For null objects, pack 4'b0000. For non-null objects, pack 4'b0001.</li></ul><p>When the `uvm_field_* macros are used, <link target="Utility and Field Macros for Components and Objects" name="Utility and Field Macros for Components and Objects" original="&lt; Utility and Field Macros for Components and Objects &gt;">, the above meta information is included provided the <link target="uvm_packer::use_metadata" name="uvm_packer::use_metadata" original="&lt; uvm_packer::use_metadata &gt;"> variable is set for the packer.</p><p>Packing order does not need to match declaration order. However, unpacking order must match packing order.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Unpacking
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Unpacking)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: unpack
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::unpack)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: unpack_bytes
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::unpack_bytes)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: unpack_ints
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::unpack_ints)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The unpack methods extract property values from an array of bits, bytes, or ints. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The unpack methods extract property values from an array of bits, bytes, or ints. The method of unpacking <i>must</i> exactly correspond to the method of packing. This is assured if (a) the same <i>packer</i> policy is used to pack and unpack, and (b) the order of unpacking is the same as the order of packing used to create the input array.</p><p>The unpack methods are fixed (non-virtual) entry points that are directly callable by the user. To include additional fields in the <link target="unpack" name="unpack" original="&lt; unpack &gt;"> operation, derived classes should override the <link target="do_unpack" name="do_unpack" original="&lt; do_unpack &gt;"> method.</p><p>The optional <i>packer</i> argument specifies the packing policy, which governs both the pack and unpack operation. If a packer policy is not provided, then the global <i>uvm_default_packer</i> policy is used. See uvm_packer for more information.</p><p>The return value is the actual number of bits unpacked from the given array.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: do_unpack
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::do_unpack)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(The do_unpack method is the user-definable hook called by the <link target="unpack" name="unpack" original="&lt; unpack &gt;"> method. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>The do_unpack method is the user-definable hook called by the <link target="unpack" name="unpack" original="&lt; unpack &gt;"> method. A derived class should override this method to include its fields in an unpack operation.</p><p>The <i>packer</i> argument is the policy object for both packing and unpacking. It must be the same packer used to pack the object into bits. Also, do_unpack must unpack fields in the same order in which they were packed. See <link target="uvm_packer" name="uvm_packer" original="&lt; uvm_packer &gt;"> for more information.</p><p>The following implementation corresponds to the example given in do_pack.</p><blockquote><pre>function void do_unpack (uvm_packer packer);
 int sz;
  super.do_unpack(packer); // unpack super's properties
  sz = packer.unpack_field_int(myarray.size(), 32);
  myarray.delete();
  for(int index=0; index&lt;sz; index++)
    myarray[index] = packer.unpack_field_int(8);
  myshort = packer.unpack_field_int($bits(myshort));
  packer.unpack_object(myobj);
endfunction
</pre></blockquote><p>If your object contains dynamic data (object, string, queue, dynamic array, or associative array), and you intend to <link target="unpack" name="unpack" original="&lt; unpack &gt;"> into an equivalent data structure, you must have included meta-information about the dynamic data when it was packed.</p><ul><li>For queues, dynamic arrays, or associative arrays, unpack the number of elements in the array from the 32 bits immediately before unpacking individual elements, as shown above.</li><li>For string data types, unpack into the new string until a null byte is encountered.</li><li>For objects, unpack 4 bits into a byte or int variable. If the value is 0, the target object should be set to null and unpacking continues to the next property, if any. If the least significant bit is 1, then the target object should be allocated and its properties unpacked.</li></ul>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: Configuration
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(Configuration)
| | [uvm_object.svh] | [uvm_object] | | TopicType(group)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Group)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: set_int_local
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::set_int_local)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: set_string_local
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::set_string_local)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary()
| | [uvm_object.svh] | [uvm_object] | | Body()
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | TopicTitle: set_object_local
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] | [uvm_object] | | QualifiedName(uvm_pkg::uvm_object::set_object_local)
| | [uvm_object.svh] | [uvm_object] | | TopicType(function)
| | [uvm_object.svh] | [uvm_object] | | Keyword(Function)
| | [uvm_object.svh] | [uvm_object] | | NumChilderen(0)
| | [uvm_object.svh] | [uvm_object] | | Summary(These methods provide write access to integral, string, and uvm_object-based properties indexed by a <i>field_name</i> string. )
| | [uvm_object.svh] | [uvm_object] | | Body(<p>These methods provide write access to integral, string, and uvm_object-based properties indexed by a <i>field_name</i> string. The object designer choose which, if any, properties will be accessible, and overrides the appropriate methods depending on the properties' types. For objects, the optional <i>clone</i> argument specifies whether to clone the <i>value</i> argument before assignment.</p><p>The global <link target="uvm_is_match" name="uvm_is_match" original="&lt; uvm_is_match &gt;"> function is used to match the field names, so <i>field_name</i> may contain wildcards.</p><p>An example implementation of all three methods is as follows.</p><blockquote><pre>class mytype extends uvm_object;

  local int myint;
  local byte mybyte;
  local shortint myshort; // no access
  local string mystring;
  local obj_type myobj;

  // provide access to integral properties
  function void set_int_local(string field_name, uvm_bitstream_t value);
    if (uvm_is_match (field_name, &quot;myint&quot;))
      myint = value;
    else if (uvm_is_match (field_name, &quot;mybyte&quot;))
      mybyte = value;
  endfunction

  // provide access to string properties
  function void set_string_local(string field_name, string value);
    if (uvm_is_match (field_name, &quot;mystring&quot;))
      mystring = value;
  endfunction

  // provide access to sub-objects
  function void set_object_local(string field_name, uvm_object value,
                                 bit clone=1);
    if (uvm_is_match (field_name, &quot;myobj&quot;)) begin
      if (value != null) begin
        obj_type tmp;
        // if provided value is not correct type, produce error
        if (!$cast(tmp, value) )
          /* error */
        else begin
          if(clone)
            $cast(myobj, tmp.clone());
          else
            myobj = tmp;
        end
      end
      else
        myobj = null; // value is null, so simply assign null to myobj
    end
  endfunction
  ...
</pre></blockquote><p>Although the object designer implements these methods to provide outside access to one or more properties, they are intended for internal use (e.g., for command-line debugging and auto-configuration) and should not be called directly by the user.</p>)
| | [uvm_object.svh] | [uvm_object] | +-------------------------------------------------------------------
| | [uvm_object.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object_defines.svh
| +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Utility and Field Macros for Components and Objects
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Utility and Field Macros for Components and Objects)
| | [uvm_object_defines.svh] | TopicType(section)
| | [uvm_object_defines.svh] | Keyword(Title)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary()
| | [uvm_object_defines.svh] | Body()
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Utility Macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Utility Macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(The utility macros provide implementations of the <link target="uvm_object::create" name="uvm_object::create" original="&lt; uvm_object::create &gt;"> method, which is needed for cloning, and the <link target="uvm_object::get_type_name" name="uvm_object::get_type_name" original="&lt; uvm_object::get_type_name &gt;"> method, which is needed for a number of debugging features. )
| | [uvm_object_defines.svh] | Body(<p>The utility macros provide implementations of the <link target="uvm_object::create" name="uvm_object::create" original="&lt; uvm_object::create &gt;"> method, which is needed for cloning, and the <link target="uvm_object::get_type_name" name="uvm_object::get_type_name" original="&lt; uvm_object::get_type_name &gt;"> method, which is needed for a number of debugging features. They also register the type with the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">, and they implement a <i>get_type</i> method, which is used when configuring the factory. And they implement the virtual <link target="uvm_object::get_object_type" name="uvm_object::get_object_type" original="&lt; uvm_object::get_object_type &gt;"> method for accessing the factory proxy of an allocated object.</p><p>Below is an example usage of the utility and field macros. By using the macros, you do not have to implement any of the data methods to get all of the capabilities of an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">.</p><blockquote><pre>class mydata extends uvm_object;

  string str;
  mydata subdata;
  int field;
  myenum e1;
  int queue[$];

  `uvm_object_utils_begin(mydata) //requires ctor with default args
    `uvm_field_string(str, UVM_DEFAULT)
    `uvm_field_object(subdata, UVM_DEFAULT)
    `uvm_field_int(field, UVM_DEC) //use decimal radix
    `uvm_field_enum(myenum, e1, UVM_DEFAULT)
    `uvm_field_queue_int(queue, UVM_DEFAULT)
  `uvm_object_utils_end

endclass
</pre></blockquote>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Field Macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Field Macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(The `uvm_field_*  macros are invoked inside of the `uvm_*_utils_begin and `uvm_*_utils_end macro blocks to form &quot;automatic&quot; implementations of the core data methods: copy, compare, pack, unpack, record, print, and sprint. )
| | [uvm_object_defines.svh] | Body(<p>The `uvm_field_*  macros are invoked inside of the `uvm_*_utils_begin and `uvm_*_utils_end macro blocks to form &quot;automatic&quot; implementations of the core data methods: copy, compare, pack, unpack, record, print, and sprint. For example:</p><blockquote><pre>class my_trans extends uvm_transaction;
  string my_string;
  `uvm_object_utils_begin(my_trans)
    `uvm_field_string(my_string, UVM_ALL_ON)
  `uvm_object_utils_end
endclass
</pre></blockquote><p>Each `uvm_field_* macro is named to correspond to a particular data type: integrals, strings, objects, queues, etc., and each has at least two arguments: <i>ARG</i> and <i>FLAG</i>.</p><p><i>ARG</i> is the instance name of the variable, whose type must be compatible with the macro being invoked. In the example, class variable my_string is of type string, so we use the `uvm_field_string macro.</p><p>If <i>FLAG</i> is set to <i>UVM_ALL_ON</i>, as in the example, the ARG variable will be included in all data methods. The FLAG, if set to something other than <i>UVM_ALL_ON</i> or <i>UVM_DEFAULT</i>, specifies which data method implementations will NOT include the given variable. Thus, if <i>FLAG</i> is specified as <i>NO_COMPARE</i>, the ARG variable will not affect comparison operations, but it will be included in everything else.</p><p>All possible values for <i>FLAG</i> are listed and described below. Multiple flag values can be bitwise ORed together (in most cases they may be added together as well, but care must be taken when using the + operator to ensure that the same bit is not added more than once).</p><dl><de>   UVM_ALL_ON</de><dd>Set all operations on (default).</dd><de>   UVM_DEFAULT</de><dd>Use the default flag settings.</dd><de>   UVM_NOCOPY</de><dd>Do not copy this field.</dd><de>   UVM_NOCOMPARE</de><dd>Do not compare this field.</dd><de>   UVM_NOPRINT</de><dd>Do not print this field.</dd><de>   UVM_NODEFPRINT</de><dd>Do not print the field if it is the same as its</dd><de>   UVM_NOPACK</de><dd>Do not pack or unpack this field.</dd><de>   UVM_PHYSICAL</de><dd>Treat as a physical field. Use physical setting in policy class for this field.</dd><de>   UVM_ABSTRACT</de><dd>Treat as an abstract field. Use the abstract setting in the policy class for this field.</dd><de>   UVM_READONLY</de><dd>Do not allow setting of this field from the set_*_local methods.</dd></dl><p>A radix for printing and recording can be specified by OR'ing one of the following constants in the <i>FLAG</i> argument</p><dl><de>   UVM_BIN</de><dd>Print / record the field in binary (base-2).</dd><de>   UVM_DEC</de><dd>Print / record the field in decimal (base-10).</dd><de>   UVM_UNSIGNED</de><dd>Print / record the field in unsigned decimal (base-10).</dd><de>   UVM_OCT</de><dd>Print / record the field in octal (base-8).</dd><de>   UVM_HEX</de><dd>Print / record the field in hexidecimal (base-16).</dd><de>   UVM_STRING</de><dd>Print / record the field in string format.</dd><de>   UVM_TIME</de><dd>Print / record the field in time format.</dd></dl><p>Radix settings for integral types. Hex is the default radix if none is specified.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_* macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_* macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for scalar properties.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for scalar properties.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_sarray_* macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_sarray_* macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for one-dimensional static array properties.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for one-dimensional static array properties.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_array_* macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_array_* macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for one-dimensional dynamic array properties.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for one-dimensional dynamic array properties.</p><h4 class=CHeading> Implementation note</h4><p>lines flagged with empty multi-line comments, /**/, are not needed or need to be different for fixed arrays, which can not be resized. Fixed arrays do not need to pack/unpack their size either, because their size is known; wouldn't hurt though if it allowed code consolidation. Unpacking would necessarily be different. */</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_queue_* macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_queue_* macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for dynamic queues.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for dynamic queues.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_aa_*_string macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_aa_*_string macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for associative arrays indexed by <i>string</i>.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for associative arrays indexed by <i>string</i>.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: `uvm_field_aa_*_int macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(`uvm_field_aa_*_int macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(Macros that implement data operations for associative arrays indexed by an integral type.)
| | [uvm_object_defines.svh] | Body(<p>Macros that implement data operations for associative arrays indexed by an integral type.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Recording Macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Recording Macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(The recording macros assist users who implement the <link target="uvm_object::do_record" name="uvm_object::do_record" original="&lt; uvm_object::do_record &gt;"> method. )
| | [uvm_object_defines.svh] | Body(<p>The recording macros assist users who implement the <link target="uvm_object::do_record" name="uvm_object::do_record" original="&lt; uvm_object::do_record &gt;"> method. They help ensure that the fields are recorded using a vendor- independent API. Unlike the <link target="uvm_recorder" name="uvm_recorder" original="&lt; uvm_recorder &gt;"> policy, fields recorded using the <link target="`uvm_record_field" name="`uvm_record_field" original="&lt; `uvm_record_field &gt;"> macro do not lose type information--they are passed directly to the vendor-specific API. This results in more efficient recording and no artificial limit on bit-widths. See your simulator vendor's documentation for more information on its transaction recording capabilities.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Packing Macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Packing Macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(The packing macros assist users who implement the <link target="uvm_object::do_pack" name="uvm_object::do_pack" original="&lt; uvm_object::do_pack &gt;"> method. )
| | [uvm_object_defines.svh] | Body(<p>The packing macros assist users who implement the <link target="uvm_object::do_pack" name="uvm_object::do_pack" original="&lt; uvm_object::do_pack &gt;"> method. They help ensure that the pack operation is the exact inverse of the unpack operation. See also <link target="Unpacking Macros" name="Unpacking Macros" original="&lt; Unpacking Macros &gt;">.</p><blockquote><pre>virtual function void do_pack(uvm_packer packer);
  `uvm_pack_int(cmd)
  `uvm_pack_int(addr)
  `uvm_pack_array(data)
endfunction
</pre></blockquote><p>The 'N' versions of these macros take a explicit size argument.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Packing - With Size Info
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Packing - With Size Info)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary()
| | [uvm_object_defines.svh] | Body()
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Packing - No Size Info
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Packing - No Size Info)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary()
| | [uvm_object_defines.svh] | Body()
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Unpacking Macros
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Unpacking Macros)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary(The unpacking macros assist users who implement the <link target="uvm_object::do_unpack" name="uvm_object::do_unpack" original="&lt; uvm_object::do_unpack &gt;"> method. )
| | [uvm_object_defines.svh] | Body(<p>The unpacking macros assist users who implement the <link target="uvm_object::do_unpack" name="uvm_object::do_unpack" original="&lt; uvm_object::do_unpack &gt;"> method. They help ensure that the unpack operation is the exact inverse of the pack operation. See also <link target="Packing Macros" name="Packing Macros" original="&lt; Packing Macros &gt;">.</p><blockquote><pre>virtual function void do_unpack(uvm_packer packer);
  `uvm_unpack_enum(cmd,cmd_t)
  `uvm_unpack_int(addr)
  `uvm_unpack_array(data)
endfunction
</pre></blockquote><p>The 'N' versions of these macros take a explicit size argument.</p>)
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Unpacking - With Size Info
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Unpacking - With Size Info)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary()
| | [uvm_object_defines.svh] | Body()
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | TopicTitle: Unpacking - No Size Info
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| | [uvm_object_defines.svh] | QualifiedName(Unpacking - No Size Info)
| | [uvm_object_defines.svh] | TopicType(group)
| | [uvm_object_defines.svh] | Keyword(Group)
| | [uvm_object_defines.svh] | NumChilderen(0)
| | [uvm_object_defines.svh] | Summary()
| | [uvm_object_defines.svh] | Body()
| | [uvm_object_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_object_globals.svh
| +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Types and Enumerations
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Types and Enumerations)
| | [uvm_object_globals.svh] | TopicType(section)
| | [uvm_object_globals.svh] | Keyword(Section)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Field automation
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Field automation)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Reporting
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Reporting)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Port Type
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Port Type)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Sequences
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Sequences)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Phasing
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Phasing)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Objections
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Objections)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary()
| | [uvm_object_globals.svh] | Body()
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: Default Policy Classes
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(Default Policy Classes)
| | [uvm_object_globals.svh] | TopicType(group)
| | [uvm_object_globals.svh] | Keyword(Group)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(Policy classes copying, comparing, packing, unpacking, and recording <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based objects.)
| | [uvm_object_globals.svh] | Body(<p>Policy classes copying, comparing, packing, unpacking, and recording <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based objects.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_table_printer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_table_printer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The table printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get tabular style printing.)
| | [uvm_object_globals.svh] | Body(<p>The table printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get tabular style printing.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_tree_printer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_tree_printer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The tree printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get multi-line tree style printing.)
| | [uvm_object_globals.svh] | Body(<p>The tree printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get multi-line tree style printing.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_line_printer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_line_printer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The line printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get single-line style printing.)
| | [uvm_object_globals.svh] | Body(<p>The line printer is a global object that can be used with <link target="uvm_object::do_print" name="uvm_object::do_print" original="&lt; uvm_object::do_print &gt;"> to get single-line style printing.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_printer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_printer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The default printer policy. )
| | [uvm_object_globals.svh] | Body(<p>The default printer policy. Used when calls to <link target="uvm_object::print" name="uvm_object::print" original="&lt; uvm_object::print &gt;"> or <link target="uvm_object::sprint" name="uvm_object::sprint" original="&lt; uvm_object::sprint &gt;"> do not specify a printer policy.</p><p>The default printer may be set to any legal <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> derived type, including the global line, tree, and table printers described above.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_packer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_packer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The default packer policy. )
| | [uvm_object_globals.svh] | Body(<p>The default packer policy. Used when calls to <link target="uvm_object::pack" name="uvm_object::pack" original="&lt; uvm_object::pack &gt;"> and <link target="uvm_object::unpack" name="uvm_object::unpack" original="&lt; uvm_object::unpack &gt;"> do not specify a packer policy.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_comparer
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_comparer)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The default compare policy. )
| | [uvm_object_globals.svh] | Body(<p>The default compare policy. Used when calls to <link target="uvm_object::compare" name="uvm_object::compare" original="&lt; uvm_object::compare &gt;"> do not specify a comparer policy.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | TopicTitle: uvm_default_recorder
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| | [uvm_object_globals.svh] | QualifiedName(uvm_default_recorder)
| | [uvm_object_globals.svh] | TopicType(variable)
| | [uvm_object_globals.svh] | Keyword(Variable)
| | [uvm_object_globals.svh] | NumChilderen(0)
| | [uvm_object_globals.svh] | Summary(The default recording policy. )
| | [uvm_object_globals.svh] | Body(<p>The default recording policy. Used when calls to <link target="uvm_object::record" name="uvm_object::record" original="&lt; uvm_object::record &gt;"> do not specify a recorder policy.</p>)
| | [uvm_object_globals.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_objection.svh
| +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | TopicTitle: Objection Mechanism
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | QualifiedName(Objection Mechanism)
| | [uvm_objection.svh] | TopicType(section)
| | [uvm_objection.svh] | Keyword(Title)
| | [uvm_objection.svh] | NumChilderen(0)
| | [uvm_objection.svh] | Summary(The following classes define the objection mechanism and end-of-test functionality, which is based on <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;">.)
| | [uvm_objection.svh] | Body(<p>The following classes define the objection mechanism and end-of-test functionality, which is based on <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;">.</p>)
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | TopicTitle: uvm_objection
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | QualifiedName(uvm_pkg::uvm_objection)
| | [uvm_objection.svh] | TopicType(class)
| | [uvm_objection.svh] | Keyword(Class)
| | [uvm_objection.svh] | NumChilderen(19)
| | [uvm_objection.svh] | Summary(Objections provide a facility for coordinating status information between two or more participating components, objects, and even module-based IP.)
| | [uvm_objection.svh] | Body(<p>Objections provide a facility for coordinating status information between two or more participating components, objects, and even module-based IP.</p><p>Tracing of objection activity can be turned on to follow the activity of the objection mechanism. It may be turned on for a specific objection instance with <link target="uvm_objection::trace_mode" name="uvm_objection::trace_mode" original="&lt; uvm_objection::trace_mode &gt;">, or it can be set for all objections from the command line using the option +UVM_OBJECTION_TRACE.</p>)
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | | Children
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: clear
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::clear)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Immediately clears the objection state. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Immediately clears the objection state. All counts are cleared and the any processes waiting on a call to wait_for(UVM_ALL_DROPPED, uvm_top) are released.</p><p>The caller, if a uvm_object-based object, should pass its 'this' handle to the <i>obj</i> argument to document who cleared the objection. Any drain_times set by the user are not effected.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: new
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::new)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Creates a new objection instance. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Creates a new objection instance. Accesses the command line argument +UVM_OBJECTION_TRACE to turn tracing on for all objection objects.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: trace_mode
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::trace_mode)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Set or get the trace mode for the objection object. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Set or get the trace mode for the objection object. If no argument is specified (or an argument other than 0 or 1) the current trace mode is unaffected. A trace_mode of 0 turns tracing off. A trace mode of 1 turns tracing on. The return value is the mode prior to being reset.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: Objection Control
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(Objection Control)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(group)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Group)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary()
| | [uvm_objection.svh] | [uvm_objection] | | Body()
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: m_set_hier_mode
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::m_set_hier_mode)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Hierarchical mode only needs to be set for intermediate components, not for uvm_root or a leaf component.)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Hierarchical mode only needs to be set for intermediate components, not for uvm_root or a leaf component.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: raise_objection
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::raise_objection)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Raises the number of objections for the source <i>object</i> by <i>count</i>, which defaults to 1. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Raises the number of objections for the source <i>object</i> by <i>count</i>, which defaults to 1.  The <i>object</i> is usually the <i>this</i> handle of the caller. If <i>object</i> is not specified or null, the implicit top-level component, <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;">, is chosen.</p><p>Rasing an objection causes the following.</p><ul><li>The source and total objection counts for <i>object</i> are increased by <i>count</i>. <i>description</i> is a string that marks a specific objection and is used in tracing/debug.</li><li>The objection's <link target="raised" name="raised" original="&lt; raised &gt;"> virtual method is called, which calls the <link target="uvm_component::raised" name="uvm_component::raised" original="&lt; uvm_component::raised &gt;"> method for all of the components up the hierarchy.</li></ul>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: drop_objection
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::drop_objection)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Drops the number of objections for the source <i>object</i> by <i>count</i>, which defaults to 1. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Drops the number of objections for the source <i>object</i> by <i>count</i>, which defaults to 1.  The <i>object</i> is usually the <i>this</i> handle of the caller. If <i>object</i> is not specified or null, the implicit top-level component, <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;">, is chosen.</p><p>Dropping an objection causes the following.</p><ul><li>The source and total objection counts for <i>object</i> are decreased by <i>count</i>. It is an error to drop the objection count for <i>object</i> below zero.</li><li>The objection's <link target="dropped" name="dropped" original="&lt; dropped &gt;"> virtual method is called, which calls the <link target="uvm_component::dropped" name="uvm_component::dropped" original="&lt; uvm_component::dropped &gt;"> method for all of the components up the hierarchy.</li><li>If the total objection count has not reached zero for <i>object</i>, then the drop is propagated up the object hierarchy as with <link target="raise_objection" name="raise_objection" original="&lt; raise_objection &gt;">. Then, each object in the hierarchy will have updated their <i>source</i> counts--objections that they originated--and <i>total</i> counts--the total number of objections by them and all their descendants.</li></ul><p>If the total objection count reaches zero, propagation up the hierarchy is deferred until a configurable drain-time has passed and the <link target="uvm_component::all_dropped" name="uvm_component::all_dropped" original="&lt; uvm_component::all_dropped &gt;"> callback for the current hierarchy level has returned. The following process occurs for each instance up the hierarchy from the source caller:</p><p>A process is forked in a non-blocking fashion, allowing the <i>drop</i> call to return. The forked process then does the following:</p><ul><li>If a drain time was set for the given <i>object</i>, the process waits for that amount of time.</li><li>The objection's <link target="all_dropped" name="all_dropped" original="&lt; all_dropped &gt;"> virtual method is called, which calls the <link target="uvm_component::all_dropped" name="uvm_component::all_dropped" original="&lt; uvm_component::all_dropped &gt;"> method (if <i>object</i> is a component).</li><li>The process then waits for the <i>all_dropped</i> callback to complete.</li><li>After the drain time has elapsed and all_dropped callback has completed, propagation of the dropped objection to the parent proceeds as described in <link target="raise_objection" name="raise_objection" original="&lt; raise_objection &gt;">, except as described below.</li></ul><p>If a new objection for this <i>object</i> or any of its descendents is raised during the drain time or during execution of the all_dropped callback at any point, the hierarchical chain described above is terminated and the dropped callback does not go up the hierarchy. The raised objection will propagate up the hierarchy, but the number of raised propagated up is reduced by the number of drops that were pending waiting for the all_dropped/drain time completion. Thus, if exactly one objection caused the count to go to zero, and during the drain exactly one new objection comes in, no raises or drops are propagted up the hierarchy,</p><p>As an optimization, if the <i>object</i> has no set drain-time and no registered callbacks, the forked process can be skipped and propagation proceeds immediately to the parent as described.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: set_drain_time
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::set_drain_time)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Sets the drain time on the given <i>object</i> to <i>drain</i>.)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Sets the drain time on the given <i>object</i> to <i>drain</i>.</p><p>The drain time is the amount of time to wait once all objections have been dropped before calling the all_dropped callback and propagating the objection to the parent.</p><p>If a new objection for this <i>object</i> or any of its descendents is raised during the drain time or during execution of the all_dropped callbacks, the drain_time/all_dropped execution is terminated.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: Callback Hooks
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(Callback Hooks)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(group)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Group)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary()
| | [uvm_objection.svh] | [uvm_objection] | | Body()
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: raised
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::raised)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Objection callback that is called when a <link target="raise_objection" name="raise_objection" original="&lt; raise_objection &gt;"> has reached <i>obj</i>. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Objection callback that is called when a <link target="raise_objection" name="raise_objection" original="&lt; raise_objection &gt;"> has reached <i>obj</i>. The default implementation calls <link target="uvm_component::raised" name="uvm_component::raised" original="&lt; uvm_component::raised &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: dropped
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::dropped)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Objection callback that is called when a <link target="drop_objection" name="drop_objection" original="&lt; drop_objection &gt;"> has reached <i>obj</i>. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Objection callback that is called when a <link target="drop_objection" name="drop_objection" original="&lt; drop_objection &gt;"> has reached <i>obj</i>. The default implementation calls <link target="uvm_component::dropped" name="uvm_component::dropped" original="&lt; uvm_component::dropped &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: all_dropped
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::all_dropped)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Objection callback that is called when a <link target="drop_objection" name="drop_objection" original="&lt; drop_objection &gt;"> has reached <i>obj</i>, and the total count for <i>obj</i> goes to zero. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Objection callback that is called when a <link target="drop_objection" name="drop_objection" original="&lt; drop_objection &gt;"> has reached <i>obj</i>, and the total count for <i>obj</i> goes to zero. This callback is executed after the drain time associated with <i>obj</i>. The default implementation calls <link target="uvm_component::all_dropped" name="uvm_component::all_dropped" original="&lt; uvm_component::all_dropped &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: Objection Status
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(Objection Status)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(group)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Group)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary()
| | [uvm_objection.svh] | [uvm_objection] | | Body()
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: get_objectors
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::get_objectors)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Returns the current list of objecting objects (objects that raised an objection but have not dropped it).)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Returns the current list of objecting objects (objects that raised an objection but have not dropped it).</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: wait_for
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::wait_for)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(task)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Task)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Waits for the raised, dropped, or all_dropped <i>event</i> to occur in the given <i>obj</i>. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Waits for the raised, dropped, or all_dropped <i>event</i> to occur in the given <i>obj</i>. The task returns after all corresponding callbacks for that event have been executed.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: get_objection_count
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::get_objection_count)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Returns the current number of objections raised by the given <i>object</i>.)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Returns the current number of objections raised by the given <i>object</i>.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: get_objection_total
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::get_objection_total)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Returns the current number of objections raised by the given <i>object</i> and all descendants.)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Returns the current number of objections raised by the given <i>object</i> and all descendants.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: get_drain_time
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::get_drain_time)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Returns the current drain time set for the given <i>object</i> (default: 0 ns).)
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Returns the current drain time set for the given <i>object</i> (default: 0 ns).</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | TopicTitle: display_objections
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection] | | QualifiedName(uvm_pkg::uvm_objection::display_objections)
| | [uvm_objection.svh] | [uvm_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection] | | Summary(Displays objection information about the given <i>object</i>. )
| | [uvm_objection.svh] | [uvm_objection] | | Body(<p>Displays objection information about the given <i>object</i>. If <i>object</i> is not specified or <i>null</i>, the implicit top-level component, <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;">, is chosen. The <i>show_header</i> argument allows control of whether a header is output.</p>)
| | [uvm_objection.svh] | [uvm_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | TopicTitle: uvm_callbacks_objection
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | QualifiedName(uvm_pkg::uvm_callbacks_objection)
| | [uvm_objection.svh] | TopicType(class)
| | [uvm_objection.svh] | Keyword(Class)
| | [uvm_objection.svh] | NumChilderen(3)
| | [uvm_objection.svh] | Summary(The uvm_callbacks_objection is a specialized <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> which contains callbacks for the raised and dropped events. )
| | [uvm_objection.svh] | Body(<p>The uvm_callbacks_objection is a specialized <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> which contains callbacks for the raised and dropped events. Callbacks happend for the three standard callback activities, <link target="raised" name="raised" original="&lt; raised &gt;">, <link target="dropped" name="dropped" original="&lt; dropped &gt;">, and <link target="all_dropped" name="all_dropped" original="&lt; all_dropped &gt;">.</p><p>The <link target="uvm_heartbeat" name="uvm_heartbeat" original="&lt; uvm_heartbeat &gt;"> mechanism use objections of this type for creating heartbeat conditions.  Whenever the objection is raised or dropped, the component which did the raise/drop is considered to be alive.</p>)
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | | Children
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicTitle: raised
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | QualifiedName(uvm_pkg::uvm_callbacks_objection::raised)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Summary(Executes the <link target="uvm_objection_callback::raised" name="uvm_objection_callback::raised" original="&lt; uvm_objection_callback::raised &gt;"> method in the user callback class whenever this objection is raised at the object <i>obj</i>.)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Body(<p>Executes the <link target="uvm_objection_callback::raised" name="uvm_objection_callback::raised" original="&lt; uvm_objection_callback::raised &gt;"> method in the user callback class whenever this objection is raised at the object <i>obj</i>.</p>)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicTitle: dropped
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | QualifiedName(uvm_pkg::uvm_callbacks_objection::dropped)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Summary(Executes the <link target="uvm_objection_callback::dropped" name="uvm_objection_callback::dropped" original="&lt; uvm_objection_callback::dropped &gt;"> method in the user callback class whenever this objection is dropped at the object <i>obj</i>.)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Body(<p>Executes the <link target="uvm_objection_callback::dropped" name="uvm_objection_callback::dropped" original="&lt; uvm_objection_callback::dropped &gt;"> method in the user callback class whenever this objection is dropped at the object <i>obj</i>.</p>)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicTitle: all_dropped
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | QualifiedName(uvm_pkg::uvm_callbacks_objection::all_dropped)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Summary(Executes the <link target="uvm_objection_callback::all_dropped" name="uvm_objection_callback::all_dropped" original="&lt; uvm_objection_callback::all_dropped &gt;"> task in the user callback class whenever the objection count for this objection in reference to <i>obj</i> goes to zero.)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | | Body(<p>Executes the <link target="uvm_objection_callback::all_dropped" name="uvm_objection_callback::all_dropped" original="&lt; uvm_objection_callback::all_dropped &gt;"> task in the user callback class whenever the objection count for this objection in reference to <i>obj</i> goes to zero.</p>)
| | [uvm_objection.svh] | [uvm_callbacks_objection] | +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | TopicTitle: uvm_objection_callback
| | [uvm_objection.svh] +-------------------------------------------------------------------
| | [uvm_objection.svh] | QualifiedName(uvm_pkg::uvm_objection_callback)
| | [uvm_objection.svh] | TopicType(class)
| | [uvm_objection.svh] | Keyword(Class)
| | [uvm_objection.svh] | NumChilderen(3)
| | [uvm_objection.svh] | Summary(The uvm_objection is the callback type that defines the callback implementations for an objection callback. )
| | [uvm_objection.svh] | Body(<p>The uvm_objection is the callback type that defines the callback implementations for an objection callback. A user uses the callback type uvm_objection_cbs_t to add callbacks to specific objections.</p><h4 class=CHeading> For example</h4><blockquote><pre>class my_objection_cb extends uvm_objection_callback;
  function new(string name);
    super.new(name);
  endfunction

  virtual function void raised (uvm_objection objection, uvm_object obj,
      uvm_object source_obj, string description, int count);
    $display(&quot;%0t: Objection %s: Raised for %s&quot;, $time, objection.get_name(),
        obj.get_full_name());
  endfunction
endclass
...
initial begin
  my_objection_cb cb = new(&quot;cb&quot;);
  uvm_objection_cbs_t::add(null, cb); //typewide callback
end</pre></blockquote>)
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | | Children
| | [uvm_objection.svh] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicTitle: raised
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | QualifiedName(uvm_pkg::uvm_objection_callback::raised)
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Summary(Objection raised callback function. )
| | [uvm_objection.svh] | [uvm_objection_callback] | | Body(<p>Objection raised callback function. Called by <link target="uvm_callbacks_objection::raised" name="uvm_callbacks_objection::raised" original="&lt; uvm_callbacks_objection::raised &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicTitle: dropped
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | QualifiedName(uvm_pkg::uvm_objection_callback::dropped)
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Summary(Objection dropped callback function. )
| | [uvm_objection.svh] | [uvm_objection_callback] | | Body(<p>Objection dropped callback function. Called by <link target="uvm_callbacks_objection::dropped" name="uvm_callbacks_objection::dropped" original="&lt; uvm_callbacks_objection::dropped &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicTitle: all_dropped
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] | [uvm_objection_callback] | | QualifiedName(uvm_pkg::uvm_objection_callback::all_dropped)
| | [uvm_objection.svh] | [uvm_objection_callback] | | TopicType(function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Keyword(Function)
| | [uvm_objection.svh] | [uvm_objection_callback] | | NumChilderen(0)
| | [uvm_objection.svh] | [uvm_objection_callback] | | Summary(Objection all_dropped callback function. )
| | [uvm_objection.svh] | [uvm_objection_callback] | | Body(<p>Objection all_dropped callback function. Called by <link target="uvm_callbacks_objection::all_dropped" name="uvm_callbacks_objection::all_dropped" original="&lt; uvm_callbacks_objection::all_dropped &gt;">.</p>)
| | [uvm_objection.svh] | [uvm_objection_callback] | +-------------------------------------------------------------------
| | [uvm_objection.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_packer.svh
| +-------------------------------------------------------------------
| | [uvm_packer.svh] +-------------------------------------------------------------------
| | [uvm_packer.svh] | TopicTitle: uvm_packer
| | [uvm_packer.svh] +-------------------------------------------------------------------
| | [uvm_packer.svh] | QualifiedName(uvm_pkg::uvm_packer)
| | [uvm_packer.svh] | TopicType(class)
| | [uvm_packer.svh] | Keyword(CLASS)
| | [uvm_packer.svh] | NumChilderen(21)
| | [uvm_packer.svh] | Summary(The uvm_packer class provides a policy object for packing and unpacking uvm_objects. )
| | [uvm_packer.svh] | Body(<p>The uvm_packer class provides a policy object for packing and unpacking uvm_objects. The policies determine how packing and unpacking should be done. Packing an object causes the object to be placed into a bit (byte or int) array. If the `uvm_field_* macro are used to implement pack and unpack, by default no metadata information is stored for the packing of dynamic objects (strings, arrays, class objects).</p>)
| | [uvm_packer.svh] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | | Children
| | [uvm_packer.svh] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: Packing //
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(Packing //)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(group)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Group)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary()
| | [uvm_packer.svh] | [uvm_packer] | | Body()
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_field
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_field)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs an integral value (less than or equal to 4096 bits) into the packed array. )
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs an integral value (less than or equal to 4096 bits) into the packed array. <i>size</i> is the number of bits of <i>value</i> to pack.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_field_int
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_field_int)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs the integral value (less than or equal to 64 bits) into the pack array. )
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs the integral value (less than or equal to 64 bits) into the pack array.  The <i>size</i> is the number of bits to pack, usually obtained by <i>$bits</i>. This optimized version of <link target="pack_field" name="pack_field" original="&lt; pack_field &gt;"> is useful for sizes up to 64 bits.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_string
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_string)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs a string value into the pack array.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs a string value into the pack array.</p><p>When the metadata flag is set, the packed string is terminated by a null character to mark the end of the string.</p><p>This is useful for mixed language communication where unpacking may occur outside of SystemVerilog UVM.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_time
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_time)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs a time <i>value</i> as 64 bits into the pack array.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs a time <i>value</i> as 64 bits into the pack array.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_real
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_real)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs a real <i>value</i> as 64 bits into the pack array.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs a real <i>value</i> as 64 bits into the pack array.</p><p>The real <i>value</i> is converted to a 6-bit scalar value using the function $real2bits before it is packed into the array.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: pack_object
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::pack_object)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Packs an object value into the pack array.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Packs an object value into the pack array.</p><p>A 4-bit header is inserted ahead of the string to indicate the number of bits that was packed. If a null object was packed, then this header will be 0.</p><p>This is useful for mixed-language communication where unpacking may occur outside of SystemVerilog UVM.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: Unpacking //
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(Unpacking //)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(group)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Group)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary()
| | [uvm_packer.svh] | [uvm_packer] | | Body()
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: is_null
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::is_null)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(This method is used during unpack operations to peek at the next 4-bit chunk of the pack data and determine if it is 0.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>This method is used during unpack operations to peek at the next 4-bit chunk of the pack data and determine if it is 0.</p><p>If the next four bits are all 0, then the return value is a 1; otherwise it is 0.</p><p>This is useful when unpacking objects, to decide whether a new object needs to be allocated or not.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_field_int
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_field_int)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks bits from the pack array and returns the bit-stream that was unpacked.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks bits from the pack array and returns the bit-stream that was unpacked.</p><p><i>size</i> is the number of bits to unpack; the maximum is 64 bits. This is a more efficient variant than unpack_field when unpacking into smaller vectors.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_field
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_field)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks bits from the pack array and returns the bit-stream that was unpacked. )
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks bits from the pack array and returns the bit-stream that was unpacked. <i>size</i> is the number of bits to unpack; the maximum is 4096 bits.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_string
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_string)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks a string.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks a string.</p><p>num_chars bytes are unpacked into a string. If num_chars is -1 then unpacking stops on at the first null character that is encountered.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_time
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_time)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks the next 64 bits of the pack array and places them into a time variable.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks the next 64 bits of the pack array and places them into a time variable.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_real
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_real)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks the next 64 bits of the pack array and places them into a real variable.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks the next 64 bits of the pack array and places them into a real variable.</p><p>The 64 bits of packed data are converted to a real using the $bits2real system function.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: unpack_object
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::unpack_object)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Unpacks an object and stores the result into <i>value</i>.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Unpacks an object and stores the result into <i>value</i>.</p><p><i>value</i> must be an allocated object that has enough space for the data being unpacked. The first four bits of packed data are used to determine if a null object was packed into the array.</p><p>The <link target="is_null" name="is_null" original="&lt; is_null &gt;"> function can be used to peek at the next four bits in the pack array before calling this method.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: get_packed_size
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::get_packed_size)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(function)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Function)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(Returns the number of bits that were packed.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>Returns the number of bits that were packed.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: Variables //
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(Variables //)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(group)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Group)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary()
| | [uvm_packer.svh] | [uvm_packer] | | Body()
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: physical
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::physical)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(variable)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Variable)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The <link target="abstract" name="abstract" original="&lt; abstract &gt;"> and physical settings allow an object to distinguish between two different classes of fields. It is up to you, in the <link target="uvm_object::do_pack" name="uvm_object::do_pack" original="&lt; uvm_object::do_pack &gt;"> and <link target="uvm_object::do_unpack" name="uvm_object::do_unpack" original="&lt; uvm_object::do_unpack &gt;"> methods, to test the setting of this field if you want to use it as a filter.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: abstract
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::abstract)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(variable)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Variable)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The abstract and physical settings allow an object to distinguish between two different classes of fields. It is up to you, in the <link target="uvm_object::do_pack" name="uvm_object::do_pack" original="&lt; uvm_object::do_pack &gt;"> and <link target="uvm_object::do_unpack" name="uvm_object::do_unpack" original="&lt; uvm_object::do_unpack &gt;"> routines, to test the setting of this field if you want to use it as a filter.</p>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: use_metadata
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::use_metadata)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(variable)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Variable)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(This flag indicates whether to encode metadata when packing dynamic data, or to decode metadata when unpacking. )
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>This flag indicates whether to encode metadata when packing dynamic data, or to decode metadata when unpacking.  Implementations of <link target="uvm_object::do_pack" name="uvm_object::do_pack" original="&lt; uvm_object::do_pack &gt;"> and <link target="uvm_object::do_unpack" name="uvm_object::do_unpack" original="&lt; uvm_object::do_unpack &gt;"> should regard this bit when performing their respective operation. When set, metadata should be encoded as follows:</p><ul><li>For strings, pack an additional null byte after the string is packed.</li><li>For objects, pack 4 bits prior to packing the object itself. Use 4'b0000 to indicate the object being packed is null, otherwise pack 4'b0001 (the remaining 3 bits are reserved).</li><li>For queues, dynamic arrays, and associative arrays, pack 32 bits indicating the size of the array prior to to packing individual elements.</li></ul>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | TopicTitle: big_endian
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] | [uvm_packer] | | QualifiedName(uvm_pkg::uvm_packer::big_endian)
| | [uvm_packer.svh] | [uvm_packer] | | TopicType(variable)
| | [uvm_packer.svh] | [uvm_packer] | | Keyword(Variable)
| | [uvm_packer.svh] | [uvm_packer] | | NumChilderen(0)
| | [uvm_packer.svh] | [uvm_packer] | | Summary(This bit determines the order that integral data is packed (using <link target="pack_field" name="pack_field" original="&lt; pack_field &gt;">, <link target="pack_field_int" name="pack_field_int" original="&lt; pack_field_int &gt;">, <link target="pack_time" name="pack_time" original="&lt; pack_time &gt;">, or <link target="pack_real" name="pack_real" original="&lt; pack_real &gt;">) and how the data is unpacked from the pack array (using <link target="unpack_field" name="unpack_field" original="&lt; unpack_field &gt;">, <link target="unpack_field_int" name="unpack_field_int" original="&lt; unpack_field_int &gt;">, <link target="unpack_time" name="unpack_time" original="&lt; unpack_time &gt;">, or <link target="unpack_real" name="unpack_real" original="&lt; unpack_real &gt;">). )
| | [uvm_packer.svh] | [uvm_packer] | | Body(<p>This bit determines the order that integral data is packed (using <link target="pack_field" name="pack_field" original="&lt; pack_field &gt;">, <link target="pack_field_int" name="pack_field_int" original="&lt; pack_field_int &gt;">, <link target="pack_time" name="pack_time" original="&lt; pack_time &gt;">, or <link target="pack_real" name="pack_real" original="&lt; pack_real &gt;">) and how the data is unpacked from the pack array (using <link target="unpack_field" name="unpack_field" original="&lt; unpack_field &gt;">, <link target="unpack_field_int" name="unpack_field_int" original="&lt; unpack_field_int &gt;">, <link target="unpack_time" name="unpack_time" original="&lt; unpack_time &gt;">, or <link target="unpack_real" name="unpack_real" original="&lt; unpack_real &gt;">). When the bit is set, data is associated msb to lsb; otherwise, it is associated lsb to msb.</p><p>The following code illustrates how data can be associated msb to lsb and lsb to msb:</p><blockquote><pre>class mydata extends uvm_object;

  logic[15:0] value = 'h1234;

  function void do_pack (uvm_packer packer);
    packer.pack_field_int(value, 16);
  endfunction

  function void do_unpack (uvm_packer packer);
    value = packer.unpack_field_int(16);
  endfunction
endclass

mydata d = new;
bit bits[];

initial begin
  d.pack(bits);  // 'b0001001000110100
  uvm_default_packer.big_endian = 0;
  d.pack(bits);  // 'b0010110001001000
end</pre></blockquote>)
| | [uvm_packer.svh] | [uvm_packer] | +-------------------------------------------------------------------
| | [uvm_packer.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_pair.svh
| +-------------------------------------------------------------------
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | TopicTitle: uvm_pair classes
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | QualifiedName(uvm_pair classes)
| | [uvm_pair.svh] | TopicType(section)
| | [uvm_pair.svh] | Keyword(Title)
| | [uvm_pair.svh] | NumChilderen(0)
| | [uvm_pair.svh] | Summary(This section defines container classes for handling value pairs.)
| | [uvm_pair.svh] | Body(<p>This section defines container classes for handling value pairs.</p>)
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | TopicTitle: uvm_class_pair #(T1,T2)
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | QualifiedName(uvm_class_pair #(T1,T2))
| | [uvm_pair.svh] | TopicType(class)
| | [uvm_pair.svh] | Keyword(Class)
| | [uvm_pair.svh] | NumChilderen(3)
| | [uvm_pair.svh] | Summary(Container holding handles to two objects whose types are specified by the type parameters, T1 and T2.)
| | [uvm_pair.svh] | Body(<p>Container holding handles to two objects whose types are specified by the type parameters, T1 and T2.</p>)
| | [uvm_pair.svh] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | | Children
| | [uvm_pair.svh] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicTitle: T1 first
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | QualifiedName(T1 first)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicType(variable)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Keyword(Variable)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Summary(The handle to the first object in the pair)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Body(<p>The handle to the first object in the pair</p>)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicTitle: T2 second
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | QualifiedName(T2 second)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicType(variable)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Keyword(Variable)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Summary(The handle to the second object in the pair)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Body(<p>The handle to the second object in the pair</p>)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicTitle: new
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | QualifiedName(new)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | TopicType(function)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Keyword(Function)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Summary(Creates an instance that holds a handle to two objects. )
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | | Body(<p>Creates an instance that holds a handle to two objects. The optional name argument gives a name to the new pair object.</p>)
| | [uvm_pair.svh] | [uvm_class_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | TopicTitle: uvm_built_in_pair #(T1,T2)
| | [uvm_pair.svh] +-------------------------------------------------------------------
| | [uvm_pair.svh] | QualifiedName(uvm_built_in_pair #(T1,T2))
| | [uvm_pair.svh] | TopicType(class)
| | [uvm_pair.svh] | Keyword(CLASS)
| | [uvm_pair.svh] | NumChilderen(3)
| | [uvm_pair.svh] | Summary(Container holding two variables of built-in types (int, string, etc.))
| | [uvm_pair.svh] | Body(<p>Container holding two variables of built-in types (int, string, etc.). The types are specified by the type parameters, T1 and T2.</p>)
| | [uvm_pair.svh] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | | Children
| | [uvm_pair.svh] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicTitle: T1 first
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | QualifiedName(T1 first)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicType(variable)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Keyword(Variable)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Summary(The first value in the pair)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Body(<p>The first value in the pair</p>)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicTitle: T2 second
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | QualifiedName(T2 second)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicType(variable)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Keyword(Variable)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Summary(The second value in the pair)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Body(<p>The second value in the pair</p>)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicTitle: new
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | QualifiedName(new)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | TopicType(function)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Keyword(Function)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | NumChilderen(0)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Summary(Creates an instance that holds two built-in type values. )
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | | Body(<p>Creates an instance that holds two built-in type values. The optional name argument gives a name to the new pair object.</p>)
| | [uvm_pair.svh] | [uvm_built_in_pair #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_pair.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_phase.svh
| +-------------------------------------------------------------------
| | [uvm_phase.svh] +-------------------------------------------------------------------
| | [uvm_phase.svh] | TopicTitle: uvm_phase
| | [uvm_phase.svh] +-------------------------------------------------------------------
| | [uvm_phase.svh] | QualifiedName(uvm_pkg::uvm_phase)
| | [uvm_phase.svh] | TopicType(class)
| | [uvm_phase.svh] | Keyword(Class)
| | [uvm_phase.svh] | NumChilderen(35)
| | [uvm_phase.svh] | Summary(This base class defines everything about a phase: behavior, state, and context.)
| | [uvm_phase.svh] | Body(<p>This base class defines everything about a phase: behavior, state, and context.</p><p>To define behavior, it is extended by UVM or the user to create singleton objects which capture the definition of what the phase does and how it does it. These are then cloned to produce multiple nodes which are hooked up in a graph structure to provide context: which phases follow which, and to hold the state of the phase throughout its lifetime. UVM provides default extensions of this class for the standard runtime phases. VIP Providers can likewise extend this class to define the phase functor for a particular component context as required.</p><p><b>Phase Definition</b></p><p>Singleton instances of those extensions are provided as package variables. These instances define the attributes of the phase (not what state it is in) They are then cloned into schedule nodes which point back to one of these implementations, and calls it's virtual task or function methods on each participating component. It is the base class for phase functors, for both predefined and user-defined phases. Per-component overrides can use a customized imp.</p><p>To create custom phases, do not extend uvm_phase directly: see the three predefined extended classes below which encapsulate behavior for different phase types: task, bottom-up function and top-down function.</p><p>Extend the appropriate one of these to create a uvm_YOURNAME_phase class (or YOURPREFIX_NAME_phase class) for each phase, containing the default implementation of the new phase, which must be a uvm_component-compatible delegate, and which may be a null implementation. Instantiate a singleton instance of that class for your code to use when a phase handle is required. If your custom phase depends on methods that are not in uvm_component, but are within an extended class, then extend the base YOURPREFIX_NAME_phase class with parameterized component class context as required, to create a specialized functor which calls your extended component class methods. This scheme ensures compile-safety for your extended component classes while providing homogeneous base types for APIs and underlying data structures.</p><p><b>Phase Context</b></p><p>A schedule is a coherent group of one or mode phase/state nodes linked together by a graph structure, allowing arbitrary linear/parallel relationships to be specified, and executed by stepping through them in the graph order. Each schedule node points to a phase and holds the execution state of that phase, and has optional links to other nodes for synchronization.</p><p>The main operations are: construct, add phases, and instantiate hierarchically within another schedule.</p><p>Structure is a DAG (Directed Acyclic Graph). Each instance is a node connected to others to form the graph. Hierarchy is overlaid with m_parent. Each node in the graph has zero or more successors, and zero or more predecessors. No nodes are completely isolated from others. Exactly one node has zero predecessors. This is the root node. Also the graph is acyclic, meaning for all nodes in the graph, by following the forward arrows you will never end up back where you started but you will eventually reach a node that has no successors.</p><p><b>Phase State</b></p><p>A given phase may appear multiple times in the complete phase graph, due to the multiple independent domain feature, and the ability for different VIP to customize their own phase schedules perhaps reusing existing phases. Each node instance in the graph maintains its own state of execution.</p><p><b>Phase Handle</b></p><p>Handles of this type uvm_phase are used frequently in the API, both by the user, to access phasing-specific API, and also as a parameter to some APIs. In many cases, the singleton package-global phase handles can be used (eg. connect_ph, run_ph) in APIs. For those APIs that need to look up that phase in the graph, this is done automatically.</p>)
| | [uvm_phase.svh] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | | Children
| | [uvm_phase.svh] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: Construction
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(Construction)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: new
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::new)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Create a new phase node, with a name and a note of its type name   - name of this phase type   - task, topdown func or bottomup func)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Create a new phase node, with a name and a note of its type name   - name of this phase type   - task, topdown func or bottomup func</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_phase_type
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_phase_type)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the phase type as defined by <link target="uvm_phase_type" name="uvm_phase_type" original="&lt; uvm_phase_type &gt;">)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the phase type as defined by <link target="uvm_phase_type" name="uvm_phase_type" original="&lt; uvm_phase_type &gt;"></p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: State
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(State)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_state
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_state)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Accessor to return current state of this phase)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Accessor to return current state of this phase</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_run_count
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_run_count)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Accessor to return the integer number of times this phase has executed)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Accessor to return the integer number of times this phase has executed</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: find_by_name
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::find_by_name)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Locate a phase node with the specified <i>name</i> and return its handle. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Locate a phase node with the specified <i>name</i> and return its handle. With <i>stay_in_scope</i> set, searches only within this phase's schedule or domain.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: find
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::find)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Locate the phase node with the specified <i>phase</i> IMP and return its handle. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Locate the phase node with the specified <i>phase</i> IMP and return its handle. With <i>stay_in_scope</i> set, searches only within this phase's schedule or domain.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: is
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::is)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(returns 1 if the containing uvm_phase refers to the same phase as the phase argument, 0 otherwise)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>returns 1 if the containing uvm_phase refers to the same phase as the phase argument, 0 otherwise</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: is_before
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::is_before)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns 1 if the containing uvm_phase refers to a phase that is earlier than the phase argument, 0 otherwise)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns 1 if the containing uvm_phase refers to a phase that is earlier than the phase argument, 0 otherwise</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: is_after
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::is_after)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(returns 1 if the containing uvm_phase refers to a phase that is later than the phase argument, 0 otherwise)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>returns 1 if the containing uvm_phase refers to a phase that is later than the phase argument, 0 otherwise</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: Callbacks
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(Callbacks)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: exec_func
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::exec_func)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Implements the functor/delegate functionality for a function phase type comp  - the component to execute the functionality upon phase - the phase schedule that originated this phase call)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Implements the functor/delegate functionality for a function phase type comp  - the component to execute the functionality upon phase - the phase schedule that originated this phase call</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: exec_task
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::exec_task)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Implements the functor/delegate functionality for a task phase type comp  - the component to execute the functionality upon phase - the phase schedule that originated this phase call)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Implements the functor/delegate functionality for a task phase type comp  - the component to execute the functionality upon phase - the phase schedule that originated this phase call</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: Schedule
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(Schedule)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: add
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::add)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Build up a schedule structure inserting phase by phase, specifying linkage)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Build up a schedule structure inserting phase by phase, specifying linkage</p><p>Phases can be added anywhere, in series or parallel with existing nodes</p><dl><de>   phase</de><dd>handle of singleton derived imp containing actual functor. by default the new phase is appended to the schedule</dd><de>   with_phase</de><dd>specify to add the new phase in parallel with this one</dd><de>   after_phase</de><dd>specify to add the new phase as successor to this one</dd><de>   before_phase</de><dd>specify to add the new phase as predecessor to this one</dd></dl>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_parent
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_parent)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the parent schedule node, if any, for hierarchical graph traversal)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the parent schedule node, if any, for hierarchical graph traversal</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_full_name
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_full_name)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the full path from the enclosing domain down to this node. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the full path from the enclosing domain down to this node. The singleton IMP phases have no hierarchy.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_schedule
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_schedule)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the topmost parent schedule node, if any, for hierarchical graph traversal)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the topmost parent schedule node, if any, for hierarchical graph traversal</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_schedule_name
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_schedule_name)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the schedule name associated with this phase node)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the schedule name associated with this phase node</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_domain
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_domain)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the enclosing domain)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the enclosing domain</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_imp
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_imp)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the phase implementation for this this node. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the phase implementation for this this node. Returns null if this phase type is not a UVM_PHASE_LEAF_NODE.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_domain_name
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_domain_name)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Returns the domain name associated with this phase node)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Returns the domain name associated with this phase node</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: Synchronization
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(Synchronization)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_objection
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_objection)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Return the <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> that gates the termination of the phase.)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Return the <link target="uvm_objection" name="uvm_objection" original="&lt; uvm_objection &gt;"> that gates the termination of the phase.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: raise_objection
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::raise_objection)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Raise an objection to ending this phase Provides components with greater control over the phase flow for processes which are not implicit objectors to the phase.)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Raise an objection to ending this phase Provides components with greater control over the phase flow for processes which are not implicit objectors to the phase.</p><blockquote><pre>while(1) begin
  some_phase.raise_objection(this);
  ...
  some_phase.drop_objection(this);
end
...</pre></blockquote>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: drop_objection
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::drop_objection)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Drop an objection to ending this phase)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Drop an objection to ending this phase</p><p>The drop is expected to be matched with an earlier raise.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: sync and unsync
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(sync and unsync)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Functions)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Add soft sync relationships between nodes)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Add soft sync relationships between nodes</p><h4 class=CHeading> Summary of usage</h4><blockquote><pre>my_phase.sync(.target(domain)
             [,.phase(phase)[,.with_phase(phase)]]);
my_phase.unsync(.target(domain)
               [,.phase(phase)[,.with_phase(phase)]]);
</pre></blockquote><p>Components in different schedule domains can be phased independently or in sync with each other. An API is provided to specify synchronization rules between any two domains. Synchronization can be done at any of three levels:</p><ul><li>the domain's whole phase schedule can be synchronized</li><li>a phase can be specified, to sync that phase with a matching counterpart</li><li>or a more detailed arbitrary synchronization between any two phases</li></ul><p>Each kind of synchronization causes the same underlying data structures to be managed. Like other APIs, we use the parameter dot-notation to set optional parameters.</p><p>When a domain is synced with another domain, all of the matching phases in the two domains get a 'with' relationship between them. Likewise, if a domain is unsynched, all of the matching phases that have a 'with' relationship have the dependency removed. It is possible to sync two domains and then just remove a single phase from the dependency relationship by unsyncing just the one phase.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: sync
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::sync)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Synchronize two domains, fully or partially)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Synchronize two domains, fully or partially</p><dl><de>   target</de><dd>handle of target domain to synchronize this one to</dd><de>   phase</de><dd>optional single phase in this domain to synchronize, otherwise sync all</dd><de>   with_phase</de><dd>optional different target-domain phase to synchronize with, otherwise use <i>phase</i> in the target domain</dd></dl>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: unsync
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::unsync)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Remove synchronization between two domains, fully or partially)
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Remove synchronization between two domains, fully or partially</p><dl><de>   target</de><dd>handle of target domain to remove synchronization from</dd><de>   phase</de><dd>optional single phase in this domain to un-synchronize, otherwise unsync all</dd><de>   with_phase</de><dd>optional different target-domain phase to un-synchronize with, otherwise use <i>phase</i> in the target domain</dd></dl>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: wait_for_state
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::wait_for_state)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Wait until this phase compares with the given <i>state</i> and <i>op</i> operand. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Wait until this phase compares with the given <i>state</i> and <i>op</i> operand. For <link target="UVM_EQ" name="UVM_EQ" original="&lt; UVM_EQ &gt;"> and <link target="UVM_NE" name="UVM_NE" original="&lt; UVM_NE &gt;"> operands, several <link target="uvm_phase_states" name="uvm_phase_states" original="&lt; uvm_phase_states &gt;"> can be supplied by ORing their enum constants, in which case the caller will wait until the phase state is any of (UVM_EQ) or none of (UVM_NE) the provided states.</p><p>To wait for the phase to be at the started state or after</p><blockquote><pre>wait_for_state(UVM_PHASE_STARTED, UVM_GTE);
</pre></blockquote><p>To wait for the phase to be either started or executing</p><blockquote><pre>wait_for_state(UVM_PHASE_STARTED | UVM_PHASE_EXECUTING, UVM_EQ);</pre></blockquote>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: Jumping
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(Jumping)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(group)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Group)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary()
| | [uvm_phase.svh] | [uvm_phase] | | Body()
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: jump
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::jump)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Jump to a specified <i>phase</i>. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Jump to a specified <i>phase</i>. If the destination <i>phase</i> is within the current phase schedule, a simple local jump takes place. If the jump-to <i>phase</i> is outside of the current schedule then the jump affects other schedules which share the phase.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: jump_all
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::jump_all)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Make all schedules jump to a specified <i>phase</i>, even if the jump target is local. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Make all schedules jump to a specified <i>phase</i>, even if the jump target is local. The jump happens to all phase schedules that contain the jump-to <i>phase</i>, i.e. a global jump.</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | TopicTitle: get_jump_target
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] | [uvm_phase] | | QualifiedName(uvm_pkg::uvm_phase::get_jump_target)
| | [uvm_phase.svh] | [uvm_phase] | | TopicType(function)
| | [uvm_phase.svh] | [uvm_phase] | | Keyword(Function)
| | [uvm_phase.svh] | [uvm_phase] | | NumChilderen(0)
| | [uvm_phase.svh] | [uvm_phase] | | Summary(Return handle to the target phase of the current jump, or null if no jump is in progress. )
| | [uvm_phase.svh] | [uvm_phase] | | Body(<p>Return handle to the target phase of the current jump, or null if no jump is in progress. Valid for use during the phase_ended() callback</p>)
| | [uvm_phase.svh] | [uvm_phase] | +-------------------------------------------------------------------
| | [uvm_phase.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_policies.svh
| +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: Policy Classes
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(Policy Classes)
| | [uvm_policies.svh] | TopicType(section)
| | [uvm_policies.svh] | Keyword(Title)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(Policy classes are used to implement polymorphic operations that differ between built-in types and class-based types. )
| | [uvm_policies.svh] | Body(<p>Policy classes are used to implement polymorphic operations that differ between built-in types and class-based types. Generic components can then be built that work with either classes or built-in types, depending on what policy class is used.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_built_in_comp #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_built_in_comp #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to compare built-in types.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to compare built-in types.</p><p>Provides a comp method that compares the built-in type, T, for which the == operator is defined.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_built_in_converter #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_built_in_converter #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to convert built-in types to strings.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to convert built-in types to strings.</p><p>Provides a convert2string method that converts the built-in type, T, to a string using the %p format specifier.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_built_in_clone #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_built_in_clone #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to clone built-in types via the = operator.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to clone built-in types via the = operator.</p><p>Provides a clone method that returns a copy of the built-in type, T.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_class_comp #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_class_comp #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to compare two objects of the same type.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to compare two objects of the same type.</p><p>Provides a comp method that compares two objects of type T. The class T must provide the method &quot;function bit compare(T rhs)&quot;, similar to the <link target="uvm_object::compare" name="uvm_object::compare" original="&lt; uvm_object::compare &gt;"> method.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_class_converter #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_class_converter #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to convert a class object to a string.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to convert a class object to a string.</p><p>Provides a convert2string method that converts an instance of type T to a string. The class T must provide the method &quot;function string convert2string()&quot;, similar to the <link target="uvm_object::convert2string" name="uvm_object::convert2string" original="&lt; uvm_object::convert2string &gt;"> method.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | TopicTitle: uvm_class_clone #(T)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| | [uvm_policies.svh] | QualifiedName(uvm_class_clone #(T))
| | [uvm_policies.svh] | TopicType(class)
| | [uvm_policies.svh] | Keyword(CLASS)
| | [uvm_policies.svh] | NumChilderen(0)
| | [uvm_policies.svh] | Summary(This policy class is used to clone class objects.)
| | [uvm_policies.svh] | Body(<p>This policy class is used to clone class objects.</p><p>Provides a clone method that returns a copy of the built-in type, T. The class T must implement the clone method, to which this class delegates the operation. If T is derived from <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">, then T must instead implement <link target="uvm_object::do_copy" name="uvm_object::do_copy" original="&lt; uvm_object::do_copy &gt;">, either directly or indirectly through use of the `uvm_field macros.</p>)
| | [uvm_policies.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_pool.svh
| +-------------------------------------------------------------------
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | TopicTitle: Pool Classes
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | QualifiedName(Pool Classes)
| | [uvm_pool.svh] | TopicType(section)
| | [uvm_pool.svh] | Keyword(Title)
| | [uvm_pool.svh] | NumChilderen(0)
| | [uvm_pool.svh] | Summary(This section defines the <link target="uvm_pool #(KEY, T)" name="uvm_pool #(KEY, T)" original="&lt; uvm_pool #(KEY, T) &gt;"> class and derivative.)
| | [uvm_pool.svh] | Body(<p>This section defines the <link target="uvm_pool #(KEY, T)" name="uvm_pool #(KEY, T)" original="&lt; uvm_pool #(KEY, T) &gt;"> class and derivative.</p>)
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | TopicTitle: uvm_pool #(KEY,T)
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | QualifiedName(uvm_pool #(KEY,T))
| | [uvm_pool.svh] | TopicType(class)
| | [uvm_pool.svh] | Keyword(CLASS)
| | [uvm_pool.svh] | NumChilderen(12)
| | [uvm_pool.svh] | Summary(Implements a class-based dynamic associative array. )
| | [uvm_pool.svh] | Body(<p>Implements a class-based dynamic associative array. Allows sparse arrays to be allocated on demand, and passed and stored by reference.</p>)
| | [uvm_pool.svh] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | | Children
| | [uvm_pool.svh] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: new
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(new)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Creates a new pool with the given <i>name</i>.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Creates a new pool with the given <i>name</i>.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: get_global_pool
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(get_global_pool)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the singleton global pool for the item type, T.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the singleton global pool for the item type, T.</p><p>This allows items to be shared amongst components throughout the verification environment.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: get_global
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(get_global)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the specified item instance from the global item pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the specified item instance from the global item pool.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: get
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(get)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the item with the given <i>key</i>.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the item with the given <i>key</i>.</p><p>If no item exists by that key, a new item is created with that key and returned.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: add
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(add)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Adds the given (<i>key</i>, <i>item</i>) pair to the pool. )
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Adds the given (<i>key</i>, <i>item</i>) pair to the pool. If an item already exists at the given <i>key</i> it is overwritten with the new <i>item</i>.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: num
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(num)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the number of uniquely keyed items stored in the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the number of uniquely keyed items stored in the pool.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: delete
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(delete)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Removes the item with the given <i>key</i> from the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Removes the item with the given <i>key</i> from the pool.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: exists
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(exists)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns 1 if a item with the given <i>key</i> exists in the pool, 0 otherwise.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns 1 if a item with the given <i>key</i> exists in the pool, 0 otherwise.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: first
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(first)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the key of the first item stored in the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the key of the first item stored in the pool.</p><p>If the pool is empty, then <i>key</i> is unchanged and 0 is returned.</p><p>If the pool is not empty, then <i>key</i> is key of the first item and 1 is returned.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: last
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(last)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the key of the last item stored in the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the key of the last item stored in the pool.</p><p>If the pool is empty, then 0 is returned and <i>key</i> is unchanged.</p><p>If the pool is not empty, then <i>key</i> is set to the last key in the pool and 1 is returned.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: next
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(next)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the key of the next item in the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the key of the next item in the pool.</p><p>If the input <i>key</i> is the last key in the pool, then <i>key</i> is left unchanged and 0 is returned.</p><p>If a next key is found, then <i>key</i> is updated with that key and 1 is returned.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicTitle: prev
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | QualifiedName(prev)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Summary(Returns the key of the previous item in the pool.)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | | Body(<p>Returns the key of the previous item in the pool.</p><p>If the input <i>key</i> is the first key in the pool, then <i>key</i> is left unchanged and 0 is returned.</p><p>If a previous key is found, then <i>key</i> is updated with that key and 1 is returned.</p>)
| | [uvm_pool.svh] | [uvm_pool #(KEY,T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | TopicTitle: uvm_object_string_pool #(T)
| | [uvm_pool.svh] +-------------------------------------------------------------------
| | [uvm_pool.svh] | QualifiedName(uvm_object_string_pool #(T))
| | [uvm_pool.svh] | TopicType(class)
| | [uvm_pool.svh] | Keyword(CLASS)
| | [uvm_pool.svh] | NumChilderen(6)
| | [uvm_pool.svh] | Summary(This provides a specialization of the generic <link target="uvm_pool #(KEY,T)" name="uvm_pool #(KEY,T)" original="&lt; uvm_pool #(KEY,T) &gt;"> class for an associative array of <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based objects indexed by string. )
| | [uvm_pool.svh] | Body(<p>This provides a specialization of the generic <link target="uvm_pool #(KEY,T)" name="uvm_pool #(KEY,T)" original="&lt; uvm_pool #(KEY,T) &gt;"> class for an associative array of <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">-based objects indexed by string. Specializations of this class include the <i>uvm_event_pool</i> (a uvm_object_string_pool storing &lt;uvm_event&gt;s) and <i>uvm_barrier_pool</i> (a uvm_obejct_string_pool storing &lt;uvm_barrier&gt;s).</p>)
| | [uvm_pool.svh] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | | Children
| | [uvm_pool.svh] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: new
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(new)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Creates a new pool with the given <i>name</i>.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Creates a new pool with the given <i>name</i>.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: get_type_name
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(get_type_name)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Returns the type name of this object.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Returns the type name of this object.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: get_global_pool
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(get_global_pool)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Returns the singleton global pool for the item type, T.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Returns the singleton global pool for the item type, T.</p><p>This allows items to be shared amongst components throughout the verification environment.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: get_global
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(get_global)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Returns the specified item instance from the global item pool.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Returns the specified item instance from the global item pool.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: get
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(get)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Returns the object item at the given string <i>key</i>.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Returns the object item at the given string <i>key</i>.</p><p>If no item exists by the given <i>key</i>, a new item is created for that key and returned.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicTitle: delete
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | QualifiedName(delete)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | TopicType(function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Keyword(Function)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | NumChilderen(0)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Summary(Removes the item with the given string <i>key</i> from the pool.)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | | Body(<p>Removes the item with the given string <i>key</i> from the pool.</p>)
| | [uvm_pool.svh] | [uvm_object_string_pool #(T)] | +-------------------------------------------------------------------
| | [uvm_pool.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_port_base.svh
| +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | TopicTitle: Port Base Classes
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | QualifiedName(Port Base Classes)
| | [uvm_port_base.svh] | TopicType(section)
| | [uvm_port_base.svh] | Keyword(TITLE)
| | [uvm_port_base.svh] | NumChilderen(0)
| | [uvm_port_base.svh] | Summary()
| | [uvm_port_base.svh] | Body()
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | TopicTitle: uvm_port_component_base
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | QualifiedName(uvm_pkg::uvm_port_component_base)
| | [uvm_port_base.svh] | TopicType(class)
| | [uvm_port_base.svh] | Keyword(CLASS)
| | [uvm_port_base.svh] | NumChilderen(5)
| | [uvm_port_base.svh] | Summary(This class defines an interface for obtaining a port's connectivity lists after or during the end_of_elaboration phase. )
| | [uvm_port_base.svh] | Body(<p>This class defines an interface for obtaining a port's connectivity lists after or during the end_of_elaboration phase.  The sub-class, <link target="uvm_port_component #(PORT)" name="uvm_port_component #(PORT)" original="&lt; uvm_port_component #(PORT) &gt;">, implements this interface.</p><p>The connectivity lists are returned in the form of handles to objects of this type. This allowing traversal of any port's fan-out and fan-in network through recursive calls to <link target="get_connected_to" name="get_connected_to" original="&lt; get_connected_to &gt;"> and <link target="get_provided_to" name="get_provided_to" original="&lt; get_provided_to &gt;">. Each port's full name and type name can be retrieved using get_full_name and get_type_name methods inherited from <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">.</p>)
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | | Children
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicTitle: get_connected_to
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | QualifiedName(uvm_pkg::uvm_port_component_base::get_connected_to)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Summary(For a port or export type, this function fills <i>list</i> with all of the ports, exports and implementations that this port is connected to.)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Body(<p>For a port or export type, this function fills <i>list</i> with all of the ports, exports and implementations that this port is connected to.</p>)
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicTitle: get_provided_to
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | QualifiedName(uvm_pkg::uvm_port_component_base::get_provided_to)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Summary(For an implementation or export type, this function fills <i>list</i> with all of the ports, exports and implementations that this port is provides its implementation to.)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Body(<p>For an implementation or export type, this function fills <i>list</i> with all of the ports, exports and implementations that this port is provides its implementation to.</p>)
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicTitle: is_port
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | QualifiedName(uvm_pkg::uvm_port_component_base::is_port)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Summary()
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Body()
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicTitle: is_export
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | QualifiedName(uvm_pkg::uvm_port_component_base::is_export)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Summary()
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Body()
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicTitle: is_imp
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component_base] | | QualifiedName(uvm_pkg::uvm_port_component_base::is_imp)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Summary(These function determine the type of port. )
| | [uvm_port_base.svh] | [uvm_port_component_base] | | Body(<p>These function determine the type of port. The functions are mutually exclusive; one will return 1 and the other two will return 0.</p>)
| | [uvm_port_base.svh] | [uvm_port_component_base] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | TopicTitle: uvm_port_component #(PORT)
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | QualifiedName(uvm_port_component #(PORT))
| | [uvm_port_base.svh] | TopicType(class)
| | [uvm_port_base.svh] | Keyword(CLASS)
| | [uvm_port_base.svh] | NumChilderen(1)
| | [uvm_port_base.svh] | Summary(See description of <link target="uvm_port_component_base" name="uvm_port_component_base" original="&lt; uvm_port_component_base &gt;"> for information about this class)
| | [uvm_port_base.svh] | Body(<p>See description of <link target="uvm_port_component_base" name="uvm_port_component_base" original="&lt; uvm_port_component_base &gt;"> for information about this class</p>)
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | | Children
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | TopicTitle: get_port
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | QualifiedName(get_port)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | Summary(Retrieve the actual port object that this proxy refers to.)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | | Body(<p>Retrieve the actual port object that this proxy refers to.</p>)
| | [uvm_port_base.svh] | [uvm_port_component #(PORT)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | TopicTitle: uvm_port_base #(IF)
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| | [uvm_port_base.svh] | QualifiedName(uvm_port_base #(IF))
| | [uvm_port_base.svh] | TopicType(class)
| | [uvm_port_base.svh] | Keyword(CLASS)
| | [uvm_port_base.svh] | NumChilderen(19)
| | [uvm_port_base.svh] | Summary(Transaction-level communication between components is handled via its ports, exports, and imps, all of which derive from this class.)
| | [uvm_port_base.svh] | Body(<p>Transaction-level communication between components is handled via its ports, exports, and imps, all of which derive from this class.</p><p>The uvm_port_base extends IF, which is the type of the interface implemented by derived port, export, or implementation. IF is also a type parameter to uvm_port_base.</p><dl><de>   IF</de><dd>The interface type implemented by the subtype to this base port</dd></dl><p>The UVM provides a complete set of ports, exports, and imps for the OSCI- standard TLM interfaces. They can be found in the ../src/tlm/ directory. For the TLM interfaces, the IF parameter is always <link target="uvm_tlm_if_base #(T1,T2)" name="uvm_tlm_if_base #(T1,T2)" original="&lt; uvm_tlm_if_base #(T1,T2) &gt;">.</p><p>Just before <link target="uvm_component::end_of_elaboration" name="uvm_component::end_of_elaboration" original="&lt; uvm_component::end_of_elaboration &gt;">, an internal <link target="uvm_component::resolve_bindings" name="uvm_component::resolve_bindings" original="&lt; uvm_component::resolve_bindings &gt;"> process occurs, after which each port and export holds a list of all imps connected to it via hierarchical connections to other ports and exports. In effect, we are collapsing the port's fanout, which can span several levels up and down the component hierarchy, into a single array held local to the port. Once the list is determined, the port's min and max connection settings can be checked and enforced.</p><p>uvm_port_base possesses the properties of components in that they have a hierarchical instance path and parent. Because SystemVerilog does not support multiple inheritance, uvm_port_base can not extend both the interface it implements and <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. Thus, uvm_port_base contains a local instance of uvm_component, to which it delegates such commands as get_name, get_full_name, and get_parent.</p>)
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | | Children
| | [uvm_port_base.svh] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: new
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(new)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(The first two arguments are the normal <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>The first two arguments are the normal <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments.</p><p>The <i>port_type</i> can be one of <link target="UVM_PORT" name="UVM_PORT" original="&lt; UVM_PORT &gt;">, <link target="UVM_EXPORT" name="UVM_EXPORT" original="&lt; UVM_EXPORT &gt;">, or <link target="UVM_IMPLEMENTATION" name="UVM_IMPLEMENTATION" original="&lt; UVM_IMPLEMENTATION &gt;">.</p><p>The <i>min_size</i> and <i>max_size</i> specify the minimum and maximum number of implementation (imp) ports that must be connected to this port base by the end of elaboration. Setting <i>max_size</i> to <i>UVM_UNBOUNDED_CONNECTIONS</i> sets no maximum, i.e., an unlimited number of connections are allowed.</p><p>By default, the parent/child relationship of any port being connected to this port is not checked. This can be overridden by configuring the port's <i>check_connection_relationships</i> bit via <link target="set_config_int" name="set_config_int" original="&lt; set_config_int &gt;">. See <link target="connect" name="connect" original="&lt; connect &gt;"> for more information.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_name
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_name)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the leaf name of this port.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the leaf name of this port.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_full_name
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_full_name)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the full hierarchical name of this port.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the full hierarchical name of this port.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_parent
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_parent)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the handle to this port's parent, or null if it has no parent.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the handle to this port's parent, or null if it has no parent.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_comp
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_comp)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns a handle to the internal proxy component representing this port.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns a handle to the internal proxy component representing this port.</p><p>Ports are considered components. However, they do not inherit <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">. Instead, they contain an instance of <link target="uvm_port_component #(PORT)" name="uvm_port_component #(PORT)" original="&lt; uvm_port_component #(PORT) &gt;"> that serves as a proxy to this port.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_type_name
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_type_name)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the type name to this port. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the type name to this port. Derived port classes must implement this method to return the concrete type. Otherwise, only a generic &quot;uvm_port&quot;, &quot;uvm_export&quot; or &quot;uvm_implementation&quot; is returned.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: min_size
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(min_size)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the mininum number of implementation ports that must be connected to this port by the end_of_elaboration phase.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the mininum number of implementation ports that must be connected to this port by the end_of_elaboration phase.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: max_size
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(max_size)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the maximum number of implementation ports that must be connected to this port by the end_of_elaboration phase.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the maximum number of implementation ports that must be connected to this port by the end_of_elaboration phase.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: is_unbounded
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(is_unbounded)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns 1 if this port has no maximum on the number of implementation ports this port can connect to. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns 1 if this port has no maximum on the number of implementation ports this port can connect to. A port is unbounded when the <i>max_size</i> argument in the constructor is specified as <i>UVM_UNBOUNDED_CONNECTIONS</i>.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: is_port
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(is_port)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary()
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body()
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: is_export
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(is_export)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary()
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body()
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: is_imp
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(is_imp)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns 1 if this port is of the type given by the method name, 0 otherwise.)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns 1 if this port is of the type given by the method name, 0 otherwise.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: size
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(size)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Gets the number of implementation ports connected to this port. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Gets the number of implementation ports connected to this port. The value is not valid before the end_of_elaboration phase, as port connections have not yet been resolved.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: set_default_index
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(set_default_index)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Sets the default implementation port to use when calling an interface method. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Sets the default implementation port to use when calling an interface method. This method should only be called on UVM_EXPORT types. The value must not be set before the end_of_elaboration phase, when port connections have not yet been resolved.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: connect
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(connect)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Connects this port to the given <i>provider</i> port. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Connects this port to the given <i>provider</i> port. The ports must be compatible in the following ways</p><ul><li>Their type parameters must match</li><li>The <i>provider</i>'s interface type (blocking, non-blocking, analysis, etc.) must be compatible. Each port has an interface mask that encodes the interface(s) it supports. If the bitwise AND of these masks is equal to the this port's mask, the requirement is met and the ports are compatible. For example, an uvm_blocking_put_port #(T) is compatible with an uvm_put_export #(T) and uvm_blocking_put_imp #(T) because the export and imp provide the interface required by the uvm_blocking_put_port.</li><li>Ports of type <link target="UVM_EXPORT" name="UVM_EXPORT" original="&lt; UVM_EXPORT &gt;"> can only connect to other exports or imps.</li><li>Ports of type <link target="UVM_IMPLEMENTATION" name="UVM_IMPLEMENTATION" original="&lt; UVM_IMPLEMENTATION &gt;"> can not be connected, as they are bound to the component that implements the interface at time of construction.</li></ul><p>In addition to type-compatibility checks, the relationship between this port and the <i>provider</i> port will also be checked if the port's <i>check_connection_relationships</i> configuration has been set. (See <link target="new" name="new" original="&lt; new &gt;"> for more information.)</p><h4 class=CHeading> Relationships, when enabled, are checked are as follows</h4><ul><li>If this port is an UVM_PORT type, the <i>provider</i> can be a parent port, or a sibling export or implementation port.</li><li>If this port is an <link target="UVM_EXPORT" name="UVM_EXPORT" original="&lt; UVM_EXPORT &gt;"> type, the provider can be a child export or implementation port.</li></ul><p>If any relationship check is violated, a warning is issued.</p><p>Note- the <link target="uvm_component::connect" name="uvm_component::connect" original="&lt; uvm_component::connect &gt;"> method is related to but not the same as this method. The component's connect method is a phase callback where port's connect method calls are made.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: debug_connected_to
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(debug_connected_to)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(The debug_connected_to method outputs a visual text display of the port/export/imp network to which this port connects (i.e., the port's fanout).)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>The debug_connected_to method outputs a visual text display of the port/export/imp network to which this port connects (i.e., the port's fanout).</p><p>This method must not be called before the end_of_elaboration phase, as port connections are not resolved until then.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: debug_provided_to
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(debug_provided_to)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(The debug_provided_to method outputs a visual display of the port/export network that ultimately connect to this port (i.e., the port's fanin).)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>The debug_provided_to method outputs a visual display of the port/export network that ultimately connect to this port (i.e., the port's fanin).</p><p>This method must not be called before the end_of_elaboration phase, as port connections are not resolved until then.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: resolve_bindings
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(resolve_bindings)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(This callback is called just before entering the end_of_elaboration phase. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>This callback is called just before entering the end_of_elaboration phase. It recurses through each port's fanout to determine all the imp destina- tions. It then checks against the required min and max connections. After resolution, <link target="size" name="size" original="&lt; size &gt;"> returns a valid value and <link target="get_if" name="get_if" original="&lt; get_if &gt;"> can be used to access a particular imp.</p><p>This method is automatically called just before the start of the end_of_elaboration phase. Users should not need to call it directly.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicTitle: get_if
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | QualifiedName(get_if)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | TopicType(function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Keyword(Function)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | NumChilderen(0)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Summary(Returns the implementation (imp) port at the given index from the array of imps this port is connected to. )
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | | Body(<p>Returns the implementation (imp) port at the given index from the array of imps this port is connected to. Use <link target="size" name="size" original="&lt; size &gt;"> to get the valid range for index. This method can only be called at the end_of_elaboration phase or after, as port connections are not resolved before then.</p>)
| | [uvm_port_base.svh] | [uvm_port_base #(IF)] | +-------------------------------------------------------------------
| | [uvm_port_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_ports.svh
| +-------------------------------------------------------------------
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | TopicTitle: TLM Port Classes
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | QualifiedName(TLM Port Classes)
| | [uvm_ports.svh] | TopicType(section)
| | [uvm_ports.svh] | Keyword(Title)
| | [uvm_ports.svh] | NumChilderen(0)
| | [uvm_ports.svh] | Summary(The following classes define the TLM port classes.)
| | [uvm_ports.svh] | Body(<p>The following classes define the TLM port classes.</p>)
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | TopicTitle: uvm_*_port #(T)
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | QualifiedName(uvm_*_port #(T))
| | [uvm_ports.svh] | TopicType(class)
| | [uvm_ports.svh] | Keyword(Class)
| | [uvm_ports.svh] | NumChilderen(1)
| | [uvm_ports.svh] | Summary(These unidirectional ports are instantiated by components that <i>require</i>, or <i>use</i>, the associated interface to convey transactions. )
| | [uvm_ports.svh] | Body(<p>These unidirectional ports are instantiated by components that <i>require</i>, or <i>use</i>, the associated interface to convey transactions. A port can be connected to any compatible port, export, or imp port. Unless its <i>min_size</i> is 0, a port <i>must</i> be connected to at least one implementation of its assocated interface.</p><p>The asterisk in <i>uvm_</b>_port~ is any of the following</p><blockquote><pre>blocking_put
nonblocking_put
put

blocking_get
nonblocking_get
get

blocking_peek
nonblocking_peek
peek

blocking_get_peek
nonblocking_get_peek
get_peek
</pre></blockquote><p>Type parameters</p><dl><de> T</de><dd>The type of transaction to be communicated by the export</dd></dl><p>Ports are connected to interface implementations directly via <link target="uvm_*_imp #(T,IMP)" name="uvm_*_imp #(T,IMP)" original="&lt; uvm_*_imp #(T,IMP) &gt;"> ports or indirectly via hierarchical connections to <link target="uvm_*_port #(T)" name="uvm_*_port #(T)" original="&lt; uvm_*_port #(T) &gt;"> and <link target="uvm_*_export #(T)" name="uvm_*_export #(T)" original="&lt; uvm_*_export #(T) &gt;"> ports.</p>)
| | [uvm_ports.svh] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | | Children
| | [uvm_ports.svh] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(T)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | TopicTitle: new
| | [uvm_ports.svh] | [uvm_*_port #(T)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | QualifiedName(new)
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | TopicType(function)
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | Keyword(Function)
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | NumChilderen(0)
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_ports.svh] | [uvm_*_port #(T)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>min_size</i> and <i>max_size</i> specify the minimum and maximum number of interfaces that must have been connected to this port by the end of elaboration.</p><blockquote><pre>function new (string name,
              uvm_component parent,
              int min_size=1,
              int max_size=1)</pre></blockquote>)
| | [uvm_ports.svh] | [uvm_*_port #(T)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | TopicTitle: uvm_*_port #(REQ,RSP)
| | [uvm_ports.svh] +-------------------------------------------------------------------
| | [uvm_ports.svh] | QualifiedName(uvm_*_port #(REQ,RSP))
| | [uvm_ports.svh] | TopicType(class)
| | [uvm_ports.svh] | Keyword(Class)
| | [uvm_ports.svh] | NumChilderen(1)
| | [uvm_ports.svh] | Summary(These bidirectional ports are instantiated by components that <i>require</i>, or <i>use</i>, the associated interface to convey transactions. )
| | [uvm_ports.svh] | Body(<p>These bidirectional ports are instantiated by components that <i>require</i>, or <i>use</i>, the associated interface to convey transactions. A port can be connected to any compatible port, export, or imp port. Unless its <i>min_size</i> is 0, a port <i>must</i> be connected to at least one implementation of its assocated interface.</p><p>The asterisk in <i>uvm_</b>_port~ is any of the following</p><blockquote><pre>blocking_transport
nonblocking_transport
transport

blocking_master
nonblocking_master
master

blocking_slave
nonblocking_slave
slave
</pre></blockquote><p>Ports are connected to interface implementations directly via <link target="uvm_*_imp #(REQ,RSP,IMP,REQ_IMP,RSP_IMP)" name="uvm_*_imp #(REQ,RSP,IMP,REQ_IMP,RSP_IMP)" original="&lt; uvm_*_imp #(REQ,RSP,IMP,REQ_IMP,RSP_IMP) &gt;"> ports or indirectly via hierarchical connections to <link target="uvm_*_port #(REQ,RSP)" name="uvm_*_port #(REQ,RSP)" original="&lt; uvm_*_port #(REQ,RSP) &gt;"> and <link target="uvm_*_export #(REQ,RSP)" name="uvm_*_export #(REQ,RSP)" original="&lt; uvm_*_export #(REQ,RSP) &gt;"> ports.</p><p>Type parameters</p><dl><de> REQ</de><dd>The type of request transaction to be communicated by the export</dd><de> RSP</de><dd>The type of response transaction to be communicated by the export</dd></dl>)
| | [uvm_ports.svh] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | | Children
| | [uvm_ports.svh] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | TopicTitle: new
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | TopicType(function)
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | Keyword(Function)
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>min_size</i> and <i>max_size</i> specify the minimum and maximum number of interfaces that must have been supplied to this port by the end of elaboration.</p><p>function new (string name, uvm_component parent, int min_size=1, int max_size=1)</p>)
| | [uvm_ports.svh] | [uvm_*_port #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_ports.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_printer.svh
| +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | TopicTitle: uvm_printer
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | QualifiedName(uvm_pkg::uvm_printer)
| | [uvm_printer.svh] | TopicType(class)
| | [uvm_printer.svh] | Keyword(Class)
| | [uvm_printer.svh] | NumChilderen(17)
| | [uvm_printer.svh] | Summary(The uvm_printer class provides an interface for printing <link target="uvm_objects" name="uvm_objects" original="&lt; uvm_objects &gt;"> in various formats. )
| | [uvm_printer.svh] | Body(<p>The uvm_printer class provides an interface for printing <link target="uvm_objects" name="uvm_objects" original="&lt; uvm_objects &gt;"> in various formats. Subtypes of uvm_printer implement different print formats, or policies.</p><p>A user-defined printer format can be created, or one of the following four built-in printers can be used:</p><ul><li><link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> - provides base printer functionality; must be overridden.</li><li><link target="uvm_table_printer" name="uvm_table_printer" original="&lt; uvm_table_printer &gt;"> - prints the object in a tabular form.</li><li><link target="uvm_tree_printer" name="uvm_tree_printer" original="&lt; uvm_tree_printer &gt;"> - prints the object in a tree form.</li><li><link target="uvm_line_printer" name="uvm_line_printer" original="&lt; uvm_line_printer &gt;"> - prints the information on a single line, but uses the same object separators as the tree printer.</li></ul><p>Printers have knobs that you use to control what and how information is printed. These knobs are contained in a separate knob class:</p><ul><li><link target="uvm_printer_knobs" name="uvm_printer_knobs" original="&lt; uvm_printer_knobs &gt;"> - common printer settings</li></ul><p>For convenience, global instances of each printer type are available for direct reference in your testbenches.</p><ul><li><link target="uvm_default_tree_printer" name="uvm_default_tree_printer" original="&lt; uvm_default_tree_printer &gt;"></li><li><link target="uvm_default_line_printer" name="uvm_default_line_printer" original="&lt; uvm_default_line_printer &gt;"></li><li><link target="uvm_default_table_printer" name="uvm_default_table_printer" original="&lt; uvm_default_table_printer &gt;"></li><li><link target="uvm_default_printer" name="uvm_default_printer" original="&lt; uvm_default_printer &gt;"> (set to default_table_printer by default)</li></ul><p>When <link target="uvm_object::print" name="uvm_object::print" original="&lt; uvm_object::print &gt;"> and <link target="uvm_object::sprint" name="uvm_object::sprint" original="&lt; uvm_object::sprint &gt;"> are called without specifying a printer, the <link target="uvm_default_printer" name="uvm_default_printer" original="&lt; uvm_default_printer &gt;"> is used.</p>)
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | | Children
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: knobs
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::knobs)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(The knob object provides access to the variety of knobs associated with a specific printer instance.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>The knob object provides access to the variety of knobs associated with a specific printer instance.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: Methods for printer usage
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(Methods for printer usage)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(group)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Group)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary()
| | [uvm_printer.svh] | [uvm_printer] | | Body()
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_int
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_int)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints an integral field.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints an integral field.</p><dl><de> name</de><dd>The name of the field.</dd><de> value</de><dd>The value of the field.</dd><de> size</de><dd>The number of bits of the field (maximum is 4096).</dd><de> radix</de><dd>The radix to use for printing. The printer knob for radix is used if no radix is specified.</dd><de> scope_separator</de><dd>is used to find the leaf name since many printers only print the leaf name of a field.  Typical values for the separator are . (dot) or [ (open bracket).</dd></dl>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_object
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_object)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints an object. )
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints an object. Whether the object is recursed depends on a variety of knobs, such as the depth knob; if the current depth is at or below the depth setting, then the object is not recursed.</p><p>By default, the children of <link target="uvm_components" name="uvm_components" original="&lt; uvm_components &gt;"> are printed. To turn this behavior off, you must set the <link target="uvm_component::print_enabled" name="uvm_component::print_enabled" original="&lt; uvm_component::print_enabled &gt;"> bit to 0 for the specific children you do not want automatically printed.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_string
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_string)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a string field.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a string field.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_time
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_time)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a time value. )
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a time value. name is the name of the field, and value is the value to print.</p><p>The print is subject to the <i>$timeformat</i> system task for formatting time values.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_string
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(print_string)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a string field.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a string field.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_generic
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_generic)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a field having the given <i>name</i>, <i>type_name</i>, <i>size</i>, and <i>value</i>.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a field having the given <i>name</i>, <i>type_name</i>, <i>size</i>, and <i>value</i>.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: Methods for printer subtyping
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(Methods for printer subtyping)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(group)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Group)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary()
| | [uvm_printer.svh] | [uvm_printer] | | Body()
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: emit
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::emit)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Emits a string representing the contents of an object in a format defined by an extension of this object.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Emits a string representing the contents of an object in a format defined by an extension of this object.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: format_row
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::format_row)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Hook for producing custom output of a single field (row).)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Hook for producing custom output of a single field (row).</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: format_row
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(format_row)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Hook to override base header with a custom header.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Hook to override base header with a custom header.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: format_header
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::format_header)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Hook to override base footer with a custom footer.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Hook to override base footer with a custom footer.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: adjust_name
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::adjust_name)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a field's name, or <i>id</i>, which is the full instance name.)
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a field's name, or <i>id</i>, which is the full instance name.</p><p>The intent of the separator is to mark where the leaf name starts if the printer if configured to print only the leaf name of the identifier.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_array_header
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_array_header)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints the header of an array. )
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints the header of an array. This function is called before each individual element is printed. <link target="print_array_footer" name="print_array_footer" original="&lt; print_array_footer &gt;"> is called to mark the completion of array printing.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_array_range
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_array_range)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints a range using ellipses for values. )
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints a range using ellipses for values. This method is used when honoring the array knobs for partial printing of large arrays, <link target="uvm_printer_knobs::begin_elements" name="uvm_printer_knobs::begin_elements" original="&lt; uvm_printer_knobs::begin_elements &gt;"> and <link target="uvm_printer_knobs::end_elements" name="uvm_printer_knobs::end_elements" original="&lt; uvm_printer_knobs::end_elements &gt;">.</p><p>This function should be called after begin_elements have been printed and before end_elements have been printed.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | TopicTitle: print_array_footer
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer] | | QualifiedName(uvm_pkg::uvm_printer::print_array_footer)
| | [uvm_printer.svh] | [uvm_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer] | | Summary(Prints the header of a footer. )
| | [uvm_printer.svh] | [uvm_printer] | | Body(<p>Prints the header of a footer. This function marks the end of an array print. Generally, there is no output associated with the array footer, but this method lets the printer know that the array printing is complete.</p>)
| | [uvm_printer.svh] | [uvm_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | TopicTitle: uvm_table_printer
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | QualifiedName(uvm_pkg::uvm_table_printer)
| | [uvm_printer.svh] | TopicType(class)
| | [uvm_printer.svh] | Keyword(Class)
| | [uvm_printer.svh] | NumChilderen(2)
| | [uvm_printer.svh] | Summary(The table printer prints output in a tabular format.)
| | [uvm_printer.svh] | Body(<p>The table printer prints output in a tabular format.</p><p>The following shows sample output from the table printer.</p><blockquote><pre>---------------------------------------------------
Name        Type            Size        Value
---------------------------------------------------
c1          container       -           @1013
d1          mydata          -           @1022
v1          integral        32          'hcb8f1c97
e1          enum            32          THREE
str         string          2           hi
value       integral        12          'h2d
---------------------------------------------------
</pre></blockquote>)
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | | Children
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | | TopicTitle: new
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | | QualifiedName(uvm_pkg::uvm_table_printer::new)
| | [uvm_printer.svh] | [uvm_table_printer] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_table_printer] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_table_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_table_printer] | | Summary(Creates a new instance of <i>uvm_table_printer</i>.)
| | [uvm_printer.svh] | [uvm_table_printer] | | Body(<p>Creates a new instance of <i>uvm_table_printer</i>.</p>)
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | | TopicTitle: emit
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_table_printer] | | QualifiedName(uvm_pkg::uvm_table_printer::emit)
| | [uvm_printer.svh] | [uvm_table_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_table_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_table_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_table_printer] | | Summary(Formats the collected information from prior calls to <i>print_*</i> into table format.)
| | [uvm_printer.svh] | [uvm_table_printer] | | Body(<p>Formats the collected information from prior calls to <i>print_*</i> into table format.</p>)
| | [uvm_printer.svh] | [uvm_table_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | TopicTitle: uvm_tree_printer
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | QualifiedName(uvm_pkg::uvm_tree_printer)
| | [uvm_printer.svh] | TopicType(class)
| | [uvm_printer.svh] | Keyword(Class)
| | [uvm_printer.svh] | NumChilderen(2)
| | [uvm_printer.svh] | Summary(By overriding various methods of the <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> super class, the tree printer prints output in a tree format.)
| | [uvm_printer.svh] | Body(<p>By overriding various methods of the <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> super class, the tree printer prints output in a tree format.</p><p>The following shows sample output from the tree printer.</p><blockquote><pre>c1: (container@1013) {
  d1: (mydata@1022) {
       v1: 'hcb8f1c97
       e1: THREE
       str: hi
  }
  value: 'h2d
}
</pre></blockquote>)
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | | Children
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | | TopicTitle: new
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | | QualifiedName(uvm_pkg::uvm_tree_printer::new)
| | [uvm_printer.svh] | [uvm_tree_printer] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_tree_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Summary(Creates a new instance of <i>uvm_tree_printer</i>.)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Body(<p>Creates a new instance of <i>uvm_tree_printer</i>.</p>)
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | | TopicTitle: emit
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_tree_printer] | | QualifiedName(uvm_pkg::uvm_tree_printer::emit)
| | [uvm_printer.svh] | [uvm_tree_printer] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_tree_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Summary(Formats the collected information from prior calls to <i>print_*</i> into hierarchical tree format.)
| | [uvm_printer.svh] | [uvm_tree_printer] | | Body(<p>Formats the collected information from prior calls to <i>print_*</i> into hierarchical tree format.</p>)
| | [uvm_printer.svh] | [uvm_tree_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | TopicTitle: uvm_line_printer
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | QualifiedName(uvm_pkg::uvm_line_printer)
| | [uvm_printer.svh] | TopicType(class)
| | [uvm_printer.svh] | Keyword(Class)
| | [uvm_printer.svh] | NumChilderen(1)
| | [uvm_printer.svh] | Summary(The line printer prints output in a line format.)
| | [uvm_printer.svh] | Body(<p>The line printer prints output in a line format.</p><p>The following shows sample output from the line printer.</p><blockquote><pre>c1: (container@1013) { d1: (mydata@1022) { v1: 'hcb8f1c97 e1: THREE str: hi } value: 'h2d }
</pre></blockquote>)
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | | Children
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_line_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_line_printer] | | TopicTitle: new
| | [uvm_printer.svh] | [uvm_line_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_line_printer] | | QualifiedName(uvm_pkg::uvm_line_printer::new)
| | [uvm_printer.svh] | [uvm_line_printer] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_line_printer] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_line_printer] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_line_printer] | | Summary(Creates a new instance of <i>uvm_line_printer</i>. )
| | [uvm_printer.svh] | [uvm_line_printer] | | Body(<p>Creates a new instance of <i>uvm_line_printer</i>. It differs from the <link target="uvm_tree_printer" name="uvm_tree_printer" original="&lt; uvm_tree_printer &gt;"> only in that the output contains no line-feeds and indentation.</p>)
| | [uvm_printer.svh] | [uvm_line_printer] | +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | TopicTitle: uvm_printer_knobs
| | [uvm_printer.svh] +-------------------------------------------------------------------
| | [uvm_printer.svh] | QualifiedName(uvm_pkg::uvm_printer_knobs)
| | [uvm_printer.svh] | TopicType(class)
| | [uvm_printer.svh] | Keyword(Class)
| | [uvm_printer.svh] | NumChilderen(23)
| | [uvm_printer.svh] | Summary(The <i>uvm_printer_knobs</i> class defines the printer settings available to all printer subtypes.)
| | [uvm_printer.svh] | Body(<p>The <i>uvm_printer_knobs</i> class defines the printer settings available to all printer subtypes.</p>)
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | | Children
| | [uvm_printer.svh] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: header
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::header)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates whether the <link target="print_header" name="print_header" original="&lt; print_header &gt;"> function should be called when printing an object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates whether the <link target="print_header" name="print_header" original="&lt; print_header &gt;"> function should be called when printing an object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: footer
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::footer)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates whether the <link target="print_footer" name="print_footer" original="&lt; print_footer &gt;"> function should be called when printing an object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates whether the <link target="print_footer" name="print_footer" original="&lt; print_footer &gt;"> function should be called when printing an object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: full_name
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::full_name)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates whether <link target="adjust_name" name="adjust_name" original="&lt; adjust_name &gt;"> should print the full name of an identifier or just the leaf name.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates whether <link target="adjust_name" name="adjust_name" original="&lt; adjust_name &gt;"> should print the full name of an identifier or just the leaf name.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: identifier
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::identifier)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates whether <link target="adjust_name" name="adjust_name" original="&lt; adjust_name &gt;"> should print the identifier. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates whether <link target="adjust_name" name="adjust_name" original="&lt; adjust_name &gt;"> should print the identifier. This is useful in cases where you just want the values of an object, but no identifiers.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: type_name
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::type_name)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Controls whether to print a field's type name.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Controls whether to print a field's type name.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: size
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::size)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Controls whether to print a field's size.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Controls whether to print a field's size.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: depth
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::depth)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates how deep to recurse when printing objects. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates how deep to recurse when printing objects. A depth of -1 means to print everything.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: reference
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::reference)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Controls whether to print a unique reference ID for object handles. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Controls whether to print a unique reference ID for object handles. The behavior of this knob is simulator-dependent.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: begin_elements
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::begin_elements)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Defines the number of elements at the head of a list to print. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Defines the number of elements at the head of a list to print. Use -1 for no max.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: end_elements
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::end_elements)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This defines the number of elements at the end of a list that should be printed.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This defines the number of elements at the end of a list that should be printed.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: prefix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::prefix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Specifies the string prepended to each output line)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Specifies the string prepended to each output line</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: indent
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::indent)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This knob specifies the number of spaces to use for level indentation. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This knob specifies the number of spaces to use for level indentation. The default level indentation is two spaces.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: show_root
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::show_root)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This setting indicates whether or not the initial object that is printed (when current depth is 0) prints the full path name. )
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This setting indicates whether or not the initial object that is printed (when current depth is 0) prints the full path name. By default, the first object is treated like all other objects and only the leaf name is printed.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: mcd
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::mcd)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This is a file descriptor, or multi-channel descriptor, that specifies where the print output should be directed.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This is a file descriptor, or multi-channel descriptor, that specifies where the print output should be directed.</p><p>By default, the output goes to the standard output of the simulator.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: separator
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::separator)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(For tree printers only, determines the opening and closing separators used for nested objects.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>For tree printers only, determines the opening and closing separators used for nested objects.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: show_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::show_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Indicates whether the radix string ('h, and so on) should be prepended to an integral value when one is printed.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Indicates whether the radix string ('h, and so on) should be prepended to an integral value when one is printed.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: default_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::default_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This knob sets the default radix to use for integral values when no radix enum is explicitly supplied to the print_int() method.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This knob sets the default radix to use for integral values when no radix enum is explicitly supplied to the print_int() method.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: dec_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::dec_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This string should be prepended to the value of an integral type when a radix of <link target="UVM_DEC" name="UVM_DEC" original="&lt; UVM_DEC &gt;"> is used for the radix of the integral object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This string should be prepended to the value of an integral type when a radix of <link target="UVM_DEC" name="UVM_DEC" original="&lt; UVM_DEC &gt;"> is used for the radix of the integral object.</p><p>When a negative number is printed, the radix is not printed since only signed decimal values can print as negative.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: bin_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::bin_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This string should be prepended to the value of an integral type when a radix of <link target="UVM_BIN" name="UVM_BIN" original="&lt; UVM_BIN &gt;"> is used for the radix of the integral object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This string should be prepended to the value of an integral type when a radix of <link target="UVM_BIN" name="UVM_BIN" original="&lt; UVM_BIN &gt;"> is used for the radix of the integral object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: oct_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::oct_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This string should be prepended to the value of an integral type when a radix of <link target="UVM_OCT" name="UVM_OCT" original="&lt; UVM_OCT &gt;"> is used for the radix of the integral object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This string should be prepended to the value of an integral type when a radix of <link target="UVM_OCT" name="UVM_OCT" original="&lt; UVM_OCT &gt;"> is used for the radix of the integral object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: unsigned_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::unsigned_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This is the string which should be prepended to the value of an integral type when a radix of <link target="UVM_UNSIGNED" name="UVM_UNSIGNED" original="&lt; UVM_UNSIGNED &gt;"> is used for the radix of the integral object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This is the string which should be prepended to the value of an integral type when a radix of <link target="UVM_UNSIGNED" name="UVM_UNSIGNED" original="&lt; UVM_UNSIGNED &gt;"> is used for the radix of the integral object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: hex_radix
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::hex_radix)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Variable)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(This string should be prepended to the value of an integral type when a radix of <link target="UVM_HEX" name="UVM_HEX" original="&lt; UVM_HEX &gt;"> is used for the radix of the integral object.)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>This string should be prepended to the value of an integral type when a radix of <link target="UVM_HEX" name="UVM_HEX" original="&lt; UVM_HEX &gt;"> is used for the radix of the integral object.</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicTitle: get_radix_str
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] | [uvm_printer_knobs] | | QualifiedName(uvm_pkg::uvm_printer_knobs::get_radix_str)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | TopicType(function)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Keyword(Function)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | NumChilderen(0)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Summary(Converts the radix from an enumerated to a printable radix according to the radix printing knobs (bin_radix, and so on).)
| | [uvm_printer.svh] | [uvm_printer_knobs] | | Body(<p>Converts the radix from an enumerated to a printable radix according to the radix printing knobs (bin_radix, and so on).</p>)
| | [uvm_printer.svh] | [uvm_printer_knobs] | +-------------------------------------------------------------------
| | [uvm_printer.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_push_driver.svh
| +-------------------------------------------------------------------
| | [uvm_push_driver.svh] +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | TopicTitle: uvm_push_driver #(REQ,RSP)
| | [uvm_push_driver.svh] +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | QualifiedName(uvm_push_driver #(REQ,RSP))
| | [uvm_push_driver.svh] | TopicType(class)
| | [uvm_push_driver.svh] | Keyword(CLASS)
| | [uvm_push_driver.svh] | NumChilderen(1)
| | [uvm_push_driver.svh] | Summary(Base class for a driver that passively receives transactions, i.e. )
| | [uvm_push_driver.svh] | Body(<p>Base class for a driver that passively receives transactions, i.e. does not initiate requests transactions. Also known as <i>push</i> mode. Its ports are typically connected to the corresponding ports in a push sequencer as follows:</p><blockquote><pre>push_sequencer.req_port.connect(push_driver.req_export);
push_driver.rsp_port.connect(push_sequencer.rsp_export);
</pre></blockquote><p>The <i>rsp_port</i> needs connecting only if the driver will use it to write responses to the analysis export in the sequencer.</p>)
| | [uvm_push_driver.svh] | +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | | Children
| | [uvm_push_driver.svh] | +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | TopicTitle: new
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | TopicType(function)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | Keyword(Function)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_push_driver.svh] | [uvm_push_driver #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_driver.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_push_sequencer.svh
| +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | TopicTitle: uvm_push_sequencer #(REQ,RSP)
| | [uvm_push_sequencer.svh] +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | QualifiedName(uvm_push_sequencer #(REQ,RSP))
| | [uvm_push_sequencer.svh] | TopicType(class)
| | [uvm_push_sequencer.svh] | Keyword(CLASS)
| | [uvm_push_sequencer.svh] | NumChilderen(2)
| | [uvm_push_sequencer.svh] | Summary()
| | [uvm_push_sequencer.svh] | Body()
| | [uvm_push_sequencer.svh] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | | Children
| | [uvm_push_sequencer.svh] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | TopicTitle: new
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | TopicType(function)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Keyword(Function)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Summary(Standard component constructor that creates an instance of this class using the given <i>name</i> and <i>parent</i>, if any.)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Body(<p>Standard component constructor that creates an instance of this class using the given <i>name</i> and <i>parent</i>, if any.</p>)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | TopicTitle: run_phase
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | QualifiedName(run_phase)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | TopicType(task)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Keyword(Task)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Summary(The push sequencer continuously selects from its list of available sequences and sends the next item from the selected sequence out its <link target="req_port" name="req_port" original="&lt; req_port &gt;"> using req_port.put(item). )
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | | Body(<p>The push sequencer continuously selects from its list of available sequences and sends the next item from the selected sequence out its <link target="req_port" name="req_port" original="&lt; req_port &gt;"> using req_port.put(item). Typically, the req_port would be connected to the req_export on an instance of an <link target="uvm_push_driver #(REQ,RSP)" name="uvm_push_driver #(REQ,RSP)" original="&lt; uvm_push_driver #(REQ,RSP) &gt;">, which would be responsible for executing the item.</p>)
| | [uvm_push_sequencer.svh] | [uvm_push_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_push_sequencer.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_queue.svh
| +-------------------------------------------------------------------
| | [uvm_queue.svh] +-------------------------------------------------------------------
| | [uvm_queue.svh] | TopicTitle: uvm_queue #(T)
| | [uvm_queue.svh] +-------------------------------------------------------------------
| | [uvm_queue.svh] | QualifiedName(uvm_queue #(T))
| | [uvm_queue.svh] | TopicType(class)
| | [uvm_queue.svh] | Keyword(CLASS)
| | [uvm_queue.svh] | NumChilderen(11)
| | [uvm_queue.svh] | Summary(Implements a class-based dynamic queue. )
| | [uvm_queue.svh] | Body(<p>Implements a class-based dynamic queue. Allows queues to be allocated on demand, and passed and stored by reference.</p>)
| | [uvm_queue.svh] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | | Children
| | [uvm_queue.svh] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: new
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(new)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Creates a new queue with the given <i>name</i>.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Creates a new queue with the given <i>name</i>.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: get_global_queue
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(get_global_queue)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the singleton global queue for the item type, T.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the singleton global queue for the item type, T.</p><p>This allows items to be shared amongst components throughout the verification environment.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: get_global
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(get_global)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the specified item instance from the global item queue.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the specified item instance from the global item queue.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: get
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(get)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the item at the given <i>index</i>.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the item at the given <i>index</i>.</p><p>If no item exists by that key, a new item is created with that key and returned.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: size
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(size)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the number of items stored in the queue.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the number of items stored in the queue.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: insert
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(insert)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Inserts the item at the given <i>index</i> in the queue.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Inserts the item at the given <i>index</i> in the queue.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: delete
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(delete)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Removes the item at the given <i>index</i> from the queue; if <i>index</i> is not provided, the entire contents of the queue are deleted.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Removes the item at the given <i>index</i> from the queue; if <i>index</i> is not provided, the entire contents of the queue are deleted.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: pop_front
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(pop_front)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the first element in the queue (index=0), or <i>null</i> if the queue is empty.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the first element in the queue (index=0), or <i>null</i> if the queue is empty.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: pop_back
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(pop_back)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Returns the last element in the queue (index=size()-1), or <i>null</i> if the queue is empty.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Returns the last element in the queue (index=size()-1), or <i>null</i> if the queue is empty.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: push_front
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(push_front)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Inserts the given <i>item</i> at the front of the queue.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Inserts the given <i>item</i> at the front of the queue.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicTitle: push_back
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] | [uvm_queue #(T)] | | QualifiedName(push_back)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | TopicType(function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Keyword(Function)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | NumChilderen(0)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Summary(Inserts the given <i>item</i> at the back of the queue.)
| | [uvm_queue.svh] | [uvm_queue #(T)] | | Body(<p>Inserts the given <i>item</i> at the back of the queue.</p>)
| | [uvm_queue.svh] | [uvm_queue #(T)] | +-------------------------------------------------------------------
| | [uvm_queue.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_random_stimulus.svh
| +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | TopicTitle: uvm_random_stimulus #(T)
| | [uvm_random_stimulus.svh] +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | QualifiedName(uvm_random_stimulus #(T))
| | [uvm_random_stimulus.svh] | TopicType(class)
| | [uvm_random_stimulus.svh] | Keyword(CLASS)
| | [uvm_random_stimulus.svh] | NumChilderen(3)
| | [uvm_random_stimulus.svh] | Summary(A general purpose unidirectional random stimulus class.)
| | [uvm_random_stimulus.svh] | Body(<p>A general purpose unidirectional random stimulus class.</p><p>The uvm_random_stimulus class generates streams of T transactions. These streams may be generated by the randomize method of T, or the randomize method of one of its subclasses.  The stream may go indefinitely, until terminated by a call to stop_stimulus_generation, or we may specify the maximum number of transactions to be generated.</p><p>By using inheritance, we can add directed initialization or tidy up after random stimulus generation. Simply extend the class and define the run task, calling super.run() when you want to begin the random stimulus phase of simulation.</p><p>While very useful in its own right, this component can also be used as a template for defining other stimulus generators, or it can be extended to add additional stimulus generation methods and to simplify test writing.</p>)
| | [uvm_random_stimulus.svh] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | | Children
| | [uvm_random_stimulus.svh] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicTitle: new
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | QualifiedName(new)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicType(function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Keyword(Function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | NumChilderen(0)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Summary(Creates a new instance of a specialization of this class. )
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Body(<p>Creates a new instance of a specialization of this class. Also, displays the random state obtained from a get_randstate call. In subsequent simulations, set_randstate can be called with the same value to reproduce the same sequence of transactions.</p>)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicTitle: generate_stimulus
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | QualifiedName(generate_stimulus)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicType(function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Keyword(Function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | NumChilderen(0)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Summary(Generate up to max_count transactions of type T. )
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Body(<p>Generate up to max_count transactions of type T. If t is not specified, a default instance of T is allocated and used. If t is specified, that transaction is used when randomizing. It must be a subclass of T.</p><p>max_count is the maximum number of transactions to be generated. A value of zero indicates no maximum - in this case, generate_stimulus will go on indefinitely unless stopped by some other process</p><p>The transactions are cloned before they are sent out over the blocking_put_port</p>)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicTitle: stop_stimulus_generation
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | QualifiedName(stop_stimulus_generation)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | TopicType(function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Keyword(Function)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | NumChilderen(0)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Summary(Stops the generation of stimulus. )
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | | Body(<p>Stops the generation of stimulus. If a subclass of this method has forked additional processes, those processes will also need to be stopped in an overridden version of this method</p>)
| | [uvm_random_stimulus.svh] | [uvm_random_stimulus #(T)] | +-------------------------------------------------------------------
| | [uvm_random_stimulus.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_recorder.svh
| +-------------------------------------------------------------------
| | [uvm_recorder.svh] +-------------------------------------------------------------------
| | [uvm_recorder.svh] | TopicTitle: uvm_recorder
| | [uvm_recorder.svh] +-------------------------------------------------------------------
| | [uvm_recorder.svh] | QualifiedName(uvm_pkg::uvm_recorder)
| | [uvm_recorder.svh] | TopicType(class)
| | [uvm_recorder.svh] | Keyword(CLASS)
| | [uvm_recorder.svh] | NumChilderen(13)
| | [uvm_recorder.svh] | Summary(The uvm_recorder class provides a policy object for recording <link target="uvm_objects" name="uvm_objects" original="&lt; uvm_objects &gt;">. )
| | [uvm_recorder.svh] | Body(<p>The uvm_recorder class provides a policy object for recording <link target="uvm_objects" name="uvm_objects" original="&lt; uvm_objects &gt;">. The policies determine how recording should be done.</p><p>A default recorder instance, <link target="uvm_default_recorder" name="uvm_default_recorder" original="&lt; uvm_default_recorder &gt;">, is used when the <link target="uvm_object::record" name="uvm_object::record" original="&lt; uvm_object::record &gt;"> is called without specifying a recorder.</p>)
| | [uvm_recorder.svh] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | | Children
| | [uvm_recorder.svh] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: tr_handle
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::tr_handle)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(This is an integral handle to a transaction object. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>This is an integral handle to a transaction object. Its use is vendor specific.</p><p>A handle of 0 indicates there is no active transaction object.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: default_radix
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::default_radix)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(This is the default radix setting if <link target="record_field" name="record_field" original="&lt; record_field &gt;"> is called without a radix.)
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>This is the default radix setting if <link target="record_field" name="record_field" original="&lt; record_field &gt;"> is called without a radix.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: physical
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::physical)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The <link target="abstract" name="abstract" original="&lt; abstract &gt;"> and physical settings allow an object to distinguish between two different classes of fields.</p><p>It is up to you, in the <link target="uvm_object::do_record" name="uvm_object::do_record" original="&lt; uvm_object::do_record &gt;"> method, to test the setting of this field if you want to use the physical trait as a filter.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: abstract
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::abstract)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(This bit provides a filtering mechanism for fields.)
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>This bit provides a filtering mechanism for fields.</p><p>The abstract and physical settings allow an object to distinguish between two different classes of fields.</p><p>It is up to you, in the <link target="uvm_object::do_record" name="uvm_object::do_record" original="&lt; uvm_object::do_record &gt;"> method, to test the setting of this field if you want to use the abstract trait as a filter.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: identifier
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::identifier)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(This bit is used to specify whether or not an object's reference should be recorded when the object is recorded.)
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>This bit is used to specify whether or not an object's reference should be recorded when the object is recorded.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: recursion_policy
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(recursion_policy)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Variable)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Sets the recursion policy for recording objects.)
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Sets the recursion policy for recording objects.</p><p>The default policy is deep (which means to recurse an object).</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: get_type_name
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::get_type_name)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Returns type name of the recorder. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Returns type name of the recorder. Subtypes must override this method to enable the <link target="`uvm_record_field" name="`uvm_record_field" original="&lt; `uvm_record_field &gt;"> macro.</p><blockquote><pre>virtual function string get_type_name()</pre></blockquote>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_field
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_field)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records an integral field (less than or equal to 4096 bits). )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records an integral field (less than or equal to 4096 bits). <i>name</i> is the name of the field.</p><p><i>value</i> is the value of the field to record. <i>size</i> is the number of bits of the field which apply. <i>radix</i> is the <link target="uvm_radix_enum" name="uvm_radix_enum" original="&lt; uvm_radix_enum &gt;"> to use.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_field_real
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_field_real)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records an real field. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records an real field. <i>value</i> is the value of the field to record.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_object
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_object)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records an object field. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records an object field. <i>name</i> is the name of the recorded field.</p><p>This method uses the <link target="recursion_policy" name="recursion_policy" original="&lt; recursion_policy &gt;"> to determine whether or not to recurse into the object.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_string
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_string)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records a string field. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records a string field. <i>name</i> is the name of the recorded field.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_time
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_time)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records a time value. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records a time value. <i>name</i> is the name to record to the database.</p>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicTitle: record_generic
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] | [uvm_recorder] | | QualifiedName(uvm_pkg::uvm_recorder::record_generic)
| | [uvm_recorder.svh] | [uvm_recorder] | | TopicType(function)
| | [uvm_recorder.svh] | [uvm_recorder] | | Keyword(Function)
| | [uvm_recorder.svh] | [uvm_recorder] | | NumChilderen(0)
| | [uvm_recorder.svh] | [uvm_recorder] | | Summary(Records the <i>name</i>-<i>value</i> pair, where <i>value</i> has been converted to a string. )
| | [uvm_recorder.svh] | [uvm_recorder] | | Body(<p>Records the <i>name</i>-<i>value</i> pair, where <i>value</i> has been converted to a string. For example:</p><blockquote><pre>recorder.record_generic(&quot;myvar&quot;,$sformatf(&quot;%0d&quot;,myvar));</pre></blockquote>)
| | [uvm_recorder.svh] | [uvm_recorder] | +-------------------------------------------------------------------
| | [uvm_recorder.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg.svh
| +-------------------------------------------------------------------
| | [uvm_reg.svh] +-------------------------------------------------------------------
| | [uvm_reg.svh] | TopicTitle: uvm_reg
| | [uvm_reg.svh] +-------------------------------------------------------------------
| | [uvm_reg.svh] | QualifiedName(uvm_pkg::uvm_reg)
| | [uvm_reg.svh] | TopicType(class)
| | [uvm_reg.svh] | Keyword(CLASS)
| | [uvm_reg.svh] | NumChilderen(69)
| | [uvm_reg.svh] | Summary(Register abstraction base class)
| | [uvm_reg.svh] | Body(<p>Register abstraction base class</p><p>A register represents a set of fields that are accessible as a single entity.</p><p>A register may be mapped to one or more address maps, each with different access rights and policy.</p>)
| | [uvm_reg.svh] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | | Children
| | [uvm_reg.svh] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Initialization
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Initialization)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: new
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::new)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Create a new instance and type-specific configuration)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Create a new instance and type-specific configuration</p><p>Creates an instance of a register abstraction class with the specified name.</p><p><i>n_bits</i> specifies the total number of bits in the register. Not all bits need to be implemented. This value is usually a multiple of 8.</p><p><i>has_coverage</i> specifies which functional coverage models are present in the extension of the register abstraction class. Multiple functional coverage models may be specified by adding their symbolic names, as defined by the <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> type.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: configure
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::configure)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Instance-specific configuration)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Instance-specific configuration</p><p>Specify the parent block of this register. May also set a parent register file for this register,</p><p>If the register is implemented in a single HDL variable, it's name is specified as the <i>hdl_path</i>. Otherwise, if the register is implemented as a concatenation of variables (usually one per field), then the HDL path must be specified using the <link target="add_hdl_path()" name="add_hdl_path()" original="&lt; add_hdl_path() &gt;"> or <link target="add_hdl_path_slice" name="add_hdl_path_slice" original="&lt; add_hdl_path_slice &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set_offset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set_offset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Modify the offset of the register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Modify the offset of the register</p><p>The offset of a register within an address map is set using the <link target="uvm_reg_map::add_reg()" name="uvm_reg_map::add_reg()" original="&lt; uvm_reg_map::add_reg() &gt;"> method. This method is used to modify that offset dynamically.</p><p>Modifying the offset of a register will make the register model diverge from the specification that was used to create it.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Introspection
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Introspection)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_name
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(get_name)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the simple name)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the simple name</p><p>Return the simple object name of this register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_full_name
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_full_name)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the hierarchical name)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this register. The base of the hierarchical name is the root block.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_parent
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_parent)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the parent block)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the parent block</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_regfile
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_regfile)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the parent register file)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the parent register file</p><p>Returns <i>null</i> if this register is instantiated in a block.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_n_maps
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_n_maps)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the number of address maps this register is mapped in)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the number of address maps this register is mapped in</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: is_in_map
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::is_in_map)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns 1 if this register is in the specified address <i>map</i>)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns 1 if this register is in the specified address <i>map</i></p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_maps
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_maps)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns all of the address <i>maps</i> where this register is mapped)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns all of the address <i>maps</i> where this register is mapped</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_rights
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_rights)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the accessibility (&quot;RW, &quot;RO&quot;, or &quot;WO&quot;) of this register in the given <i>map</i>.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the accessibility (&quot;RW, &quot;RO&quot;, or &quot;WO&quot;) of this register in the given <i>map</i>.</p><p>If no address map is specified and the register is mapped in only one address map, that address map is used. If the register is mapped in more than one address map, the default address map of the parent block is used.</p><p>Whether a register field can be read or written depends on both the field's configured access policy (see <link target="uvm_reg_field::configure" name="uvm_reg_field::configure" original="&lt; uvm_reg_field::configure &gt;">) and the register's accessibility rights in the map being used to access the field.</p><p>If an address map is specified and the register is not mapped in the specified address map, an error message is issued and &quot;RW&quot; is returned.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_n_bits
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_n_bits)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the width, in bits, of this register.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the width, in bits, of this register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_n_bytes
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_n_bytes)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the width, in bytes, of this register. )
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the width, in bytes, of this register. Rounds up to next whole byte if register is not a multiple of 8.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_max_size
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_max_size)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the maximum width, in bits, of all registers.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the maximum width, in bits, of all registers.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_fields
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_fields)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Return the fields in this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Return the fields in this register</p><p>Fills the specified array with the abstraction class for all of the fields contained in this register. Fields are ordered from least-significant position to most-significant position within the register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_field_by_name
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_field_by_name)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Return the named field in this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Return the named field in this register</p><p>Finds a field with the specified name in this register and returns its abstraction class. If no fields are found, returns null.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_offset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_offset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the offset of this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the offset of this register</p><p>Returns the offset of this register in an address <i>map</i>.</p><p>If no address map is specified and the register is mapped in only one address map, that address map is used. If the register is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the register is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_address
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_address)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the base external physical address of this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the base external physical address of this register</p><p>Returns the base external physical address of this register if accessed through the specified address <i>map</i>.</p><p>If no address map is specified and the register is mapped in only one address map, that address map is used. If the register is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the register is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_addresses
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_addresses)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Identifies the external physical address(es) of this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Identifies the external physical address(es) of this register</p><p>Computes all of the external physical addresses that must be accessed to completely read or write this register. The addressed are specified in little endian order. Returns the number of bytes transfered on each access.</p><p>If no address map is specified and the register is mapped in only one address map, that address map is used. If the register is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the register is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Access
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Access)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Set the desired value for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Set the desired value for this register</p><p>Sets the desired value of the fields in the register to the specified value. Does not actually set the value of the register in the design, only the desired value in its corresponding abstraction class in the RegModel model. Use the <link target="uvm_reg::update()" name="uvm_reg::update()" original="&lt; uvm_reg::update() &gt;"> method to update the actual register with the mirrored value or the <link target="uvm_reg::write()" name="uvm_reg::write()" original="&lt; uvm_reg::write() &gt;"> method to set the actual register and its mirrored value.</p><p>Unless this method is used, the desired value is equal to the mirrored value.</p><p>Refer <link target="uvm_reg_field::set()" name="uvm_reg_field::set()" original="&lt; uvm_reg_field::set() &gt;"> for more details on the effect of setting mirror values on fields with different access policies.</p><p>To modify the mirrored field values to a specific value, and thus use the mirrored as a scoreboard for the register values in the DUT, use the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Return the desired value of the fields in the register.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Return the desired value of the fields in the register.</p><p>Does not actually read the value of the register in the design, only the desired value in the abstraction class. Unless set to a different value using the <link target="uvm_reg::set()" name="uvm_reg::set()" original="&lt; uvm_reg::set() &gt;">, the desired value and the mirrored value are identical.</p><p>Use the <link target="uvm_reg::read()" name="uvm_reg::read()" original="&lt; uvm_reg::read() &gt;"> or <link target="uvm_reg::peek()" name="uvm_reg::peek()" original="&lt; uvm_reg::peek() &gt;"> method to get the actual register value.</p><p>If the register contains write-only fields, the desired/mirrored value for those fields are the value last written and assumed to reside in the bits implementing these fields. Although a physical read operation would something different for these fields, the returned value is the actual content.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_mirrored_value
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_mirrored_value)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Return the mirrored value of the fields in the register.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Return the mirrored value of the fields in the register.</p><p>Does not actually read the value of the register in the design</p><p>If the register contains write-only fields, the desired/mirrored value for those fields are the value last written and assumed to reside in the bits implementing these fields. Although a physical read operation would something different for these fields, the returned value is the actual content.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: needs_update
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::needs_update)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns 1 if any of the fields need updating)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns 1 if any of the fields need updating</p><p>See <link target="uvm_reg_field::needs_update()" name="uvm_reg_field::needs_update()" original="&lt; uvm_reg_field::needs_update() &gt;"> for details. Use the <link target="uvm_reg::update()" name="uvm_reg::update()" original="&lt; uvm_reg::update() &gt;"> to actually update the DUT register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: reset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::reset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Reset the desired/mirrored value for this register.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Reset the desired/mirrored value for this register.</p><p>Sets the desired and mirror value of the fields in this register to the reset value for the specified reset <i>kind</i>. See <link target="uvm_reg_field.reset()" name="uvm_reg_field.reset()" original="&lt; uvm_reg_field.reset() &gt;"> for more details.</p><p>Also resets the semaphore that prevents concurrent access to the register. This semaphore must be explicitly reset if a thread accessing this register array was killed in before the access was completed</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_reset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_reset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the specified reset value for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the specified reset value for this register</p><p>Return the reset value for this register for the specified reset <i>kind</i>.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: has_reset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::has_reset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Check if any field in the register has a reset value specified for the specified reset <i>kind</i>. )
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Check if any field in the register has a reset value specified for the specified reset <i>kind</i>. If <i>delete</i> is TRUE, removes the reset value, if any.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set_reset
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set_reset)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Specify or modify the reset value for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Specify or modify the reset value for this register</p><p>Specify or modify the reset value for all the fields in the register corresponding to the cause specified by <i>kind</i>.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: write
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::write)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Write the specified value in this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Write the specified value in this register</p><p>Write <i>value</i> in the DUT register that corresponds to this abstraction class instance using the specified access <i>path</i>. If the register is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access). If a back-door access path is used, the effect of writing the register through a physical access is mimicked. For example, read-only bits in the registers will not be written.</p><p>The mirrored value will be updated using the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: read
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::read)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Read the current value from this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Read the current value from this register</p><p>Read and return <i>value</i> from the DUT register that corresponds to this abstraction class instance using the specified access <i>path</i>. If the register is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access). If a back-door access path is used, the effect of reading the register through a physical access is mimicked. For example, clear-on-read bits in the registers will be set to zero.</p><p>The mirrored value will be updated using the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: poke
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::poke)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Deposit the specified value in this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Deposit the specified value in this register</p><p>Deposit the value in the DUT register corresponding to this abstraction class instance, as-is, using a back-door access.</p><p>Uses the HDL path for the design abstraction specified by <i>kind</i>.</p><p>The mirrored value will be updated using the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: peek
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::peek)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Read the current value from this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Read the current value from this register</p><p>Sample the value in the DUT register corresponding to this absraction class instance using a back-door access. The register value is sampled, not modified.</p><p>Uses the HDL path for the design abstraction specified by <i>kind</i>.</p><p>The mirrored value will be updated using the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: update
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::update)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Updates the content of the register in the design to match the desired value)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Updates the content of the register in the design to match the desired value</p><p>This method performs the reverse operation of <link target="uvm_reg::mirror()" name="uvm_reg::mirror()" original="&lt; uvm_reg::mirror() &gt;">. Write this register if the DUT register is out-of-date with the desired/mirrored value in the abstraction class, as determined by the <link target="uvm_reg::needs_update()" name="uvm_reg::needs_update()" original="&lt; uvm_reg::needs_update() &gt;"> method.</p><p>The update can be performed using the using the physical interfaces (frontdoor) or <link target="uvm_reg::poke()" name="uvm_reg::poke()" original="&lt; uvm_reg::poke() &gt;"> (backdoor) access. If the register is mapped in multiple address maps and physical access is used (front-door), an address <i>map</i> must be specified.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: mirror
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::mirror)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Read the register and update/check its mirror value)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Read the register and update/check its mirror value</p><p>Read the register and optionally compared the readback value with the current mirrored value if <i>check</i> is <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">. The mirrored value will be updated using the <link target="uvm_reg::predict()" name="uvm_reg::predict()" original="&lt; uvm_reg::predict() &gt;"> method based on the readback value.</p><p>The mirroring can be performed using the physical interfaces (frontdoor) or <link target="uvm_reg::peek()" name="uvm_reg::peek()" original="&lt; uvm_reg::peek() &gt;"> (backdoor).</p><p>If <i>check</i> is specified as UVM_CHECK, an error message is issued if the current mirrored value does not match the readback value. Any field whose check has been disabled with <link target="uvm_reg_field::set_compare()" name="uvm_reg_field::set_compare()" original="&lt; uvm_reg_field::set_compare() &gt;"> will not be considered in the comparison.</p><p>If the register is mapped in multiple address maps and physical access is used (front-door access), an address <i>map</i> must be specified. If the register contains write-only fields, their content is mirrored and optionally checked only if a UVM_BACKDOOR access path is used to read the register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: predict
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::predict)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Update the mirrored value for this register.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Update the mirrored value for this register.</p><p>Predict the mirror value of the fields in the register based on the specified observed <i>value</i> on a specified adress <i>map</i>, or based on a calculated value. See <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> for more details.</p><p>Returns TRUE if the prediction was succesful for each field in the register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: is_busy
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::is_busy)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns 1 if register is currently being read or written.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns 1 if register is currently being read or written.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Frontdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Frontdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set_frontdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set_frontdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Set a user-defined frontdoor for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Set a user-defined frontdoor for this register</p><p>By default, registers are mapped linearly into the address space of the address maps that instantiate them. If registers are accessed using a different mechanism, a user-defined access mechanism must be defined and associated with the corresponding register abstraction class</p><p>If the register is mapped in multiple address maps, an address <i>map</i> must be specified.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_frontdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_frontdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the user-defined frontdoor for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the user-defined frontdoor for this register</p><p>If null, no user-defined frontdoor has been defined. A user-defined frontdoor is defined by using the <link target="uvm_reg::set_frontdoor()" name="uvm_reg::set_frontdoor()" original="&lt; uvm_reg::set_frontdoor() &gt;"> method.</p><p>If the register is mapped in multiple address maps, an address <i>map</i> must be specified.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Backdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Backdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set_backdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set_backdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Set a user-defined backdoor for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Set a user-defined backdoor for this register</p><p>By default, registers are accessed via the built-in string-based DPI routines if an HDL path has been specified using the <link target="uvm_reg::configure()" name="uvm_reg::configure()" original="&lt; uvm_reg::configure() &gt;"> or <link target="uvm_reg::add_hdl_path()" name="uvm_reg::add_hdl_path()" original="&lt; uvm_reg::add_hdl_path() &gt;"> method.</p><p>If this default mechanism is not suitable (e.g. because the register is not implemented in pure SystemVerilog) a user-defined access mechanism must be defined and associated with the corresponding register abstraction class</p><p>A user-defined backdoor is required if active update of the mirror of this register abstraction class, based on observed changes of the corresponding DUT register, is used.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_backdoor
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_backdoor)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Returns the user-defined backdoor for this register)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Returns the user-defined backdoor for this register</p><p>If null, no user-defined backdoor has been defined. A user-defined backdoor is defined by using the <link target="uvm_reg::set_backdoor()" name="uvm_reg::set_backdoor()" original="&lt; uvm_reg::set_backdoor() &gt;"> method.</p><p>If <i>inherited</i> is TRUE, returns the backdoor of the parent block if none have been specified for this register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: clear_hdl_path
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::clear_hdl_path)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Delete HDL paths)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Delete HDL paths</p><p>Remove any previously specified HDL path to the register instance for the specified design abstraction.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: add_hdl_path
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::add_hdl_path)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Add an HDL path)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Add an HDL path</p><p>Add the specified HDL path to the register instance for the specified design abstraction. This method may be called more than once for the same design abstraction if the register is physically duplicated in the design abstraction</p><p>For example, the following register</p><blockquote><pre>       1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
Bits:  5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
      +-+---+-------------+---+-------+
      |A|xxx|      B      |xxx|   C   |
      +-+---+-------------+---+-------+
</pre></blockquote><h4 class=CHeading> would be specified using the following literal value</h4><blockquote><pre>add_hdl_path('{ '{&quot;A_reg&quot;, 15, 1},
                '{&quot;B_reg&quot;,  6, 7},
                '{'C_reg&quot;,  0, 4} } );
</pre></blockquote><p>If the register is implementd using a single HDL variable, The array should specify a single slice with its <i>offset</i> and <i>size</i> specified as -1. For example:</p><blockquote><pre>r1.add_hdl_path('{ '{&quot;r1&quot;, -1, -1} });</pre></blockquote>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: add_hdl_path_slice
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::add_hdl_path_slice)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Append the specified HDL slice to the HDL path of the register instance for the specified design abstraction. )
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Append the specified HDL slice to the HDL path of the register instance for the specified design abstraction. If <i>first</i> is TRUE, starts the specification of a duplicate HDL implementation of the register.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: has_hdl_path
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::has_hdl_path)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Check if a HDL path is specified)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Check if a HDL path is specified</p><p>Returns TRUE if the register instance has a HDL path defined for the specified design abstraction. If no design abstraction is specified, uses the default design abstraction specified for the parent block.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_hdl_path
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_hdl_path)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the incremental HDL path(s))
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the incremental HDL path(s)</p><p>Returns the HDL path(s) defined for the specified design abstraction in the register instance. Returns only the component of the HDL paths that corresponds to the register, not a full hierarchical path</p><p>If no design asbtraction is specified, the default design abstraction for the parent block is used.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_hdl_path_kinds
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_hdl_path_kinds)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get design abstractions for which HDL paths have been defined)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get design abstractions for which HDL paths have been defined</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_full_hdl_path
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_full_hdl_path)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Get the full hierarchical HDL path(s))
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Get the full hierarchical HDL path(s)</p><p>Returns the full hierarchical HDL path(s) defined for the specified design abstraction in the register instance. There may be more than one path returned even if only one path was defined for the register instance, if any of the parent components have more than one path defined for the same design abstraction</p><p>If no design asbtraction is specified, the default design abstraction for each ancestor block is used to get each incremental path.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: backdoor_read
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::backdoor_read)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(User-define backdoor read access)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>User-define backdoor read access</p><p>Override the default string-based DPI backdoor access read for this register type. By default calls <link target="uvm_reg::backdoor_read_func()" name="uvm_reg::backdoor_read_func()" original="&lt; uvm_reg::backdoor_read_func() &gt;">.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: backdoor_write
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::backdoor_write)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(User-defined backdoor read access)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>User-defined backdoor read access</p><p>Override the default string-based DPI backdoor access write for this register type.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: backdoor_read_func
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::backdoor_read_func)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(User-defined backdoor read access)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>User-defined backdoor read access</p><p>Override the default string-based DPI backdoor access read for this register type.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: backdoor_watch
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::backdoor_watch)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(User-defined DUT register change monitor)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>User-defined DUT register change monitor</p><p>Watch the DUT register corresponding to this abstraction class instance for any change in value and return when a value-change occurs. This may be implemented a string-based DPI access if the simulation tool provide a value-change callback facility. Such a facility does not exists in the standard SystemVerilog DPI and thus no default implementation for this method can be provided.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: include_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::include_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Specify which coverage model that must be included in various block, register or memory abstraction class instances.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Specify which coverage model that must be included in various block, register or memory abstraction class instances.</p><p>The coverage models are specified by or'ing or adding the <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> coverage model identifiers corresponding to the coverage model to be included.</p><p>The scope specifies a hierarchical name or pattern identifying a block, memory or register abstraction class instances. Any block, memory or register whose full hierarchical name matches the specified scope will have the specified functional coverage models included in them.</p><p>The scope can be specified as a POSIX regular expression or simple pattern. See <link target="uvm_resource_base::Scope Interface" name="uvm_resource_base::Scope Interface" original="&lt; uvm_resource_base::Scope Interface &gt;"> for more details.</p><blockquote><pre>uvm_reg::include_coverage(&quot;*&quot;, UVM_CVR_ALL);
</pre></blockquote><p>The specification of which coverage model to include in which abstraction class is stored in a <link target="uvm_reg_cvr_t" name="uvm_reg_cvr_t" original="&lt; uvm_reg_cvr_t &gt;"> resource in the <link target="uvm_resource_db" name="uvm_resource_db" original="&lt; uvm_resource_db &gt;"> resource database, in the &quot;uvm_reg::&quot; scope namespace.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: build_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::build_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Check if all of the specified coverage models must be built.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Check if all of the specified coverage models must be built.</p><p>Check which of the specified coverage model must be built in this instance of the register abstraction class, as specified by calls to <link target="uvm_reg::include_coverage()" name="uvm_reg::include_coverage()" original="&lt; uvm_reg::include_coverage() &gt;">.</p><p>Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">. Returns the sum of all coverage models to be built in the register model.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: add_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::add_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Specify that additional coverage models are available.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Specify that additional coverage models are available.</p><p>Add the specified coverage model to the coverage models available in this class. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p><p>This method shall be called only in the constructor of subsequently derived classes.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: has_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::has_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Check if register has coverage model(s))
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Check if register has coverage model(s)</p><p>Returns TRUE if the register abstraction class contains a coverage model for all of the models specified. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: set_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::set_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Turns on coverage measurement.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Turns on coverage measurement.</p><p>Turns the collection of functional coverage measurements on or off for this register. The functional coverage measurement is turned on for every coverage model specified using <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> symbolic identifers. Multiple functional coverage models can be specified by adding the functional coverage model identifiers. All other functional coverage models are turned off. Returns the sum of all functional coverage models whose measurements were previously on.</p><p>This method can only control the measurement of functional coverage models that are present in the register abstraction classes, then enabled during construction. See the <link target="uvm_reg::has_coverage()" name="uvm_reg::has_coverage()" original="&lt; uvm_reg::has_coverage() &gt;"> method to identify the available functional coverage models.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: get_coverage
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::get_coverage)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Check if coverage measurement is on.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Check if coverage measurement is on.</p><p>Returns TRUE if measurement for all of the specified functional coverage models are currently on. Multiple functional coverage models can be specified by adding the functional coverage model identifiers.</p><p>See <link target="uvm_reg::set_coverage()" name="uvm_reg::set_coverage()" original="&lt; uvm_reg::set_coverage() &gt;"> for more details.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: sample
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::sample)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Functional coverage measurement method)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Functional coverage measurement method</p><p>This method is invoked by the register abstraction class whenever it is read or written with the specified <i>data</i> via the specified address <i>map</i>. It is invoked after the read or write operation has completed but before the mirror has been updated.</p><p>Empty by default, this method may be extended by the abstraction class generator to perform the required sampling in any provided functional coverage model.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: sample_values
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::sample_values)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(function)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Function)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Functional coverage measurement method for field values)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Functional coverage measurement method for field values</p><p>This method is invoked by the user or by the <link target="uvm_reg_block::sample_values()" name="uvm_reg_block::sample_values()" original="&lt; uvm_reg_block::sample_values() &gt;"> method of the parent block to trigger the sampling of the current field values in the register-level functional coverage model.</p><p>This method may be extended by the abstraction class generator to perform the required sampling in any provided field-value functional coverage model.</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: Callbacks
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(Callbacks)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(group)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Group)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary()
| | [uvm_reg.svh] | [uvm_reg] | | Body()
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: pre_write
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::pre_write)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Called before register write.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Called before register write.</p><p>If the specified data value, access <i>path</i> or address <i>map</i> are modified, the updated data value, access path or address map will be used to perform the register operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The registered callback methods are invoked after the invocation of this method. All register callbacks are executed before the corresponding field callbacks</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: post_write
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::post_write)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Called after register write.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Called after register write.</p><p>If the specified <i>status</i> is modified, the updated status will be returned by the register operation.</p><p>The registered callback methods are invoked before the invocation of this method. All register callbacks are executed before the corresponding field callbacks</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: pre_read
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::pre_read)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Called before register read.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Called before register read.</p><p>If the specified access <i>path</i> or address <i>map</i> are modified, the updated access path or address map will be used to perform the register operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The registered callback methods are invoked after the invocation of this method. All register callbacks are executed before the corresponding field callbacks</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | TopicTitle: post_read
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] | [uvm_reg] | | QualifiedName(uvm_pkg::uvm_reg::post_read)
| | [uvm_reg.svh] | [uvm_reg] | | TopicType(task)
| | [uvm_reg.svh] | [uvm_reg] | | Keyword(Task)
| | [uvm_reg.svh] | [uvm_reg] | | NumChilderen(0)
| | [uvm_reg.svh] | [uvm_reg] | | Summary(Called after register read.)
| | [uvm_reg.svh] | [uvm_reg] | | Body(<p>Called after register read.</p><p>If the specified readback data or <i>status</i> is modified, the updated readback data or status will be returned by the register operation.</p><p>The registered callback methods are invoked before the invocation of this method. All register callbacks are executed before the corresponding field callbacks</p>)
| | [uvm_reg.svh] | [uvm_reg] | +-------------------------------------------------------------------
| | [uvm_reg.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_access_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | TopicTitle: Register Access Test Sequences
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | QualifiedName(Register Access Test Sequences)
| | [uvm_reg_access_seq.svh] | TopicType(section)
| | [uvm_reg_access_seq.svh] | Keyword(Title)
| | [uvm_reg_access_seq.svh] | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | Summary(This section defines sequences that test DUT register access via the available frontdoor and backdoor paths defined in the provided register model.)
| | [uvm_reg_access_seq.svh] | Body(<p>This section defines sequences that test DUT register access via the available frontdoor and backdoor paths defined in the provided register model.</p>)
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | TopicTitle: uvm_reg_single_access_seq
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_single_access_seq)
| | [uvm_reg_access_seq.svh] | TopicType(class)
| | [uvm_reg_access_seq.svh] | Keyword(Class)
| | [uvm_reg_access_seq.svh] | NumChilderen(1)
| | [uvm_reg_access_seq.svh] | Summary(Verify the accessibility of a register by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the mirrored value.)
| | [uvm_reg_access_seq.svh] | Body(<p>Verify the accessibility of a register by writing through its default address map then reading it via the backdoor, then reversing the process, making sure that the resulting value matches the mirrored value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the register, the register is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.r0.get_full_name()},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote><p>Registers without an available backdoor or that contain read-only fields only, or fields with unknown access policies cannot be tested.</p><p>The DUT should be idle and not modify any register during this test.</p>)
| | [uvm_reg_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | | Children
| | [uvm_reg_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | TopicTitle: rg
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_single_access_seq::rg)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | TopicType(variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | Keyword(Variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | Summary(The register to be tested)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | | Body(<p>The register to be tested</p>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_single_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | TopicTitle: uvm_reg_access_seq
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_access_seq)
| | [uvm_reg_access_seq.svh] | TopicType(class)
| | [uvm_reg_access_seq.svh] | Keyword(Class)
| | [uvm_reg_access_seq.svh] | NumChilderen(5)
| | [uvm_reg_access_seq.svh] | Summary(Verify the accessibility of all registers in a block by executing the <link target="uvm_reg_single_access_seq" name="uvm_reg_single_access_seq" original="&lt; uvm_reg_single_access_seq &gt;"> sequence on every register within it.)
| | [uvm_reg_access_seq.svh] | Body(<p>Verify the accessibility of all registers in a block by executing the <link target="uvm_reg_single_access_seq" name="uvm_reg_single_access_seq" original="&lt; uvm_reg_single_access_seq &gt;"> sequence on every register within it.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block, the block is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote>)
| | [uvm_reg_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | | Children
| | [uvm_reg_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicTitle: model
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | QualifiedName(model)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicType(variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Keyword(Variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Summary(The block to be tested. )
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicTitle: reg_seq
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_access_seq::reg_seq)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicType(variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Keyword(Variable)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Summary(The sequence used to test one register)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Body(<p>The sequence used to test one register</p>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicTitle: body
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_access_seq::body)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicType(task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Keyword(Task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Summary(Executes the Register Access sequence. )
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Body(<p>Executes the Register Access sequence. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicTitle: do_block
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_access_seq::do_block)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicType(task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Keyword(Task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Summary(Test all of the registers in a block)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Body(<p>Test all of the registers in a block</p>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicTitle: reset_blk
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_access_seq::reset_blk)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | TopicType(task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Keyword(Task)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_reg_access_seq.svh] | [uvm_reg_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | TopicTitle: uvm_reg_mem_access_seq
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_access_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_mem_access_seq)
| | [uvm_reg_access_seq.svh] | TopicType(class)
| | [uvm_reg_access_seq.svh] | Keyword(Class)
| | [uvm_reg_access_seq.svh] | NumChilderen(0)
| | [uvm_reg_access_seq.svh] | Summary(Verify the accessibility of all registers and memories in a block by executing the <link target="uvm_reg_access_seq" name="uvm_reg_access_seq" original="&lt; uvm_reg_access_seq &gt;"> and <link target="uvm_mem_access_seq" name="uvm_mem_access_seq" original="&lt; uvm_mem_access_seq &gt;"> sequence respectively on every register and memory within it.)
| | [uvm_reg_access_seq.svh] | Body(<p>Verify the accessibility of all registers and memories in a block by executing the <link target="uvm_reg_access_seq" name="uvm_reg_access_seq" original="&lt; uvm_reg_access_seq &gt;"> and <link target="uvm_mem_access_seq" name="uvm_mem_access_seq" original="&lt; uvm_mem_access_seq &gt;"> sequence respectively on every register and memory within it.</p><p>Blocks and registers with the NO_REG_TESTS or the NO_REG_ACCESS_TEST attribute are not verified.</p>)
| | [uvm_reg_access_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_adapter.svh
| +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | TopicTitle: Classes for Adapting Between Register and Bus Operations
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | QualifiedName(Classes for Adapting Between Register and Bus Operations)
| | [uvm_reg_adapter.svh] | TopicType(section)
| | [uvm_reg_adapter.svh] | Keyword(Title)
| | [uvm_reg_adapter.svh] | NumChilderen(0)
| | [uvm_reg_adapter.svh] | Summary(This section defines classes used to convert transaction streams between generic register address/data reads and writes and physical bus accesses.)
| | [uvm_reg_adapter.svh] | Body(<p>This section defines classes used to convert transaction streams between generic register address/data reads and writes and physical bus accesses.</p>)
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | TopicTitle: uvm_reg_adapter
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | QualifiedName(uvm_pkg::uvm_reg_adapter)
| | [uvm_reg_adapter.svh] | TopicType(class)
| | [uvm_reg_adapter.svh] | Keyword(Class)
| | [uvm_reg_adapter.svh] | NumChilderen(8)
| | [uvm_reg_adapter.svh] | Summary(This class defines an interface for converting between <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> and a specific bus transaction.)
| | [uvm_reg_adapter.svh] | Body(<p>This class defines an interface for converting between <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> and a specific bus transaction.</p>)
| | [uvm_reg_adapter.svh] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | | Children
| | [uvm_reg_adapter.svh] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: new
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::new)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Create a new instance of this type, giving it the optional <i>name</i>.)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Create a new instance of this type, giving it the optional <i>name</i>.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: supports_byte_enable
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::supports_byte_enable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Set this bit in extensions of this class if the bus protocol supports byte enables.)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Set this bit in extensions of this class if the bus protocol supports byte enables.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: provides_responses
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::provides_responses)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Set this bit in extensions of this class if the bus driver provides separate response items.)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Set this bit in extensions of this class if the bus driver provides separate response items.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: parent_sequence
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::parent_sequence)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Variable)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Set this member in extensions of this class if the bus driver requires bus items be executed via a particular sequence base type. )
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Set this member in extensions of this class if the bus driver requires bus items be executed via a particular sequence base type. The sequence assigned to this member must implement do_clone().</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: reg2bus
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::reg2bus)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Extensions of this class <i>must</i> implement this method to convert the specified <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> to a corresponding <link target="uvm_sequence_item" name="uvm_sequence_item" original="&lt; uvm_sequence_item &gt;"> subtype that defines the bus transaction.)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Extensions of this class <i>must</i> implement this method to convert the specified <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> to a corresponding <link target="uvm_sequence_item" name="uvm_sequence_item" original="&lt; uvm_sequence_item &gt;"> subtype that defines the bus transaction.</p><p>The method must allocate a new bus-specific <link target="uvm_sequence_item" name="uvm_sequence_item" original="&lt; uvm_sequence_item &gt;">, assign its members from the corresponding members from the given generic <i>rw</i> bus operation, then return it.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: bus2reg
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::bus2reg)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Extensions of this class <i>must</i> implement this method to copy members of the given bus-specific <i>bus_item</i> to corresponding members of the provided <i>bus_rw</i> instance. )
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Extensions of this class <i>must</i> implement this method to copy members of the given bus-specific <i>bus_item</i> to corresponding members of the provided <i>bus_rw</i> instance. Unlike <link target="reg2bus" name="reg2bus" original="&lt; reg2bus &gt;">, the resulting transaction is not allocated from scratch. This is to accommodate applications where the bus response must be returned in the original request.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: get_item
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(uvm_pkg::uvm_reg_adapter::get_item)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(Returns the bus-independent read/write information that corresponds to the generic bus transaction currently translated to a bus-specific transaction. )
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>Returns the bus-independent read/write information that corresponds to the generic bus transaction currently translated to a bus-specific transaction. This function returns a value reference only when called in the <link target="uvm_reg_adapter::reg2bus()" name="uvm_reg_adapter::reg2bus()" original="&lt; uvm_reg_adapter::reg2bus() &gt;"> method. It returns null at all other times. The content of the return <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> instance must not be modified and used strictly to obtain additional information about the operation.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicTitle: Example
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | QualifiedName(Example)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | TopicType(group)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Keyword(Group)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Summary(The following example illustrates how to implement a RegModel-BUS adapter class for the APB bus protocol.)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | | Body(<p>The following example illustrates how to implement a RegModel-BUS adapter class for the APB bus protocol.</p><blockquote><pre>class rreg2apb_adapter extends uvm_reg_adapter;
  `uvm_object_utils(reg2apb_adapter)

  function new(string name=&quot;reg2apb_adapter&quot;);
    super.new(name);

  endfunction

  virtual function uvm_sequence_item reg2bus(uvm_reg_bus_op rw);
    apb_item apb = apb_item::type_id::create(&quot;apb_item&quot;);
    apb.op   = (rw.kind == UVM_READ) ? apb::READ : apb::WRITE;
    apb.addr = rw.addr;
    apb.data = rw.data;
    return apb;
  endfunction

  virtual function void bus2reg(uvm_sequencer_item bus_item,
                                uvm_reg_bus_op rw);
    apb_item apb;
    if (!$cast(apb,bus_item)) begin
      `uvm_fatal(&quot;CONVERT_APB2REG&quot;,&quot;Bus item is not of type apb_item&quot;)
    end
    rw.kind  = apb.op==apb::READ ? UVM_READ : UVM_WRITE;
    rw.addr = apb.addr;
    rw.data = apb.data;
    rw.status = UVM_IS_OK;
  endfunction

endclass
</pre></blockquote>)
| | [uvm_reg_adapter.svh] | [uvm_reg_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | TopicTitle: uvm_reg_tlm_adapter
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | QualifiedName(uvm_pkg::uvm_reg_tlm_adapter)
| | [uvm_reg_adapter.svh] | TopicType(class)
| | [uvm_reg_adapter.svh] | Keyword(Class)
| | [uvm_reg_adapter.svh] | NumChilderen(2)
| | [uvm_reg_adapter.svh] | Summary(For converting between <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> and <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> items.)
| | [uvm_reg_adapter.svh] | Body(<p>For converting between <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> and <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> items.</p>)
| | [uvm_reg_adapter.svh] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | | Children
| | [uvm_reg_adapter.svh] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | TopicTitle: reg2bus
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | QualifiedName(uvm_pkg::uvm_reg_tlm_adapter::reg2bus)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Keyword(Function)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Summary(Converts a <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> struct to a <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> item.)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Body(<p>Converts a <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> struct to a <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> item.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | TopicTitle: bus2reg
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | QualifiedName(uvm_pkg::uvm_reg_tlm_adapter::bus2reg)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | TopicType(function)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Keyword(Function)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | NumChilderen(0)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Summary(Converts a <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> item to a <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;">. )
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | | Body(<p>Converts a <link target="uvm_tlm_gp" name="uvm_tlm_gp" original="&lt; uvm_tlm_gp &gt;"> item to a <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;">. into the provided <i>rw</i> transaction.</p>)
| | [uvm_reg_adapter.svh] | [uvm_reg_tlm_adapter] | +-------------------------------------------------------------------
| | [uvm_reg_adapter.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_backdoor.svh
| +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | TopicTitle: uvm_reg_backdoor
| | [uvm_reg_backdoor.svh] +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | QualifiedName(uvm_pkg::uvm_reg_backdoor)
| | [uvm_reg_backdoor.svh] | TopicType(class)
| | [uvm_reg_backdoor.svh] | Keyword(Class)
| | [uvm_reg_backdoor.svh] | NumChilderen(14)
| | [uvm_reg_backdoor.svh] | Summary(Base class for user-defined back-door register and memory access.)
| | [uvm_reg_backdoor.svh] | Body(<p>Base class for user-defined back-door register and memory access.</p><p>This class can be extended by users to provide user-specific back-door access to registers and memories that are not implemented in pure SystemVerilog or that are not accessible using the default DPI backdoor mechanism.</p>)
| | [uvm_reg_backdoor.svh] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | | Children
| | [uvm_reg_backdoor.svh] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: new
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::new)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Create an instance of this class)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Create an instance of this class</p><p>Create an instance of the user-defined backdoor class for the specified register or memory</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: do_pre_read
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::do_pre_read)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Execute the pre-read callbacks)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Execute the pre-read callbacks</p><p>This method <i>must</i> be called as the first statement in a user extension of the <link target="read()" name="read()" original="&lt; read() &gt;"> method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: do_post_read
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::do_post_read)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Execute the post-read callbacks)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Execute the post-read callbacks</p><p>This method <i>must</i> be called as the last statement in a user extension of the <link target="read()" name="read()" original="&lt; read() &gt;"> method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: do_pre_write
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::do_pre_write)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Execute the pre-write callbacks)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Execute the pre-write callbacks</p><p>This method <i>must</i> be called as the first statement in a user extension of the <link target="write()" name="write()" original="&lt; write() &gt;"> method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: do_post_write
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::do_post_write)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Execute the post-write callbacks)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Execute the post-write callbacks</p><p>This method <i>must</i> be called as the last statement in a user extension of the <link target="write()" name="write()" original="&lt; write() &gt;"> method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: write
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::write)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(User-defined backdoor write operation.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>User-defined backdoor write operation.</p><p>Call <link target="do_pre_write()" name="do_pre_write()" original="&lt; do_pre_write() &gt;">. Deposit the specified value in the specified register HDL implementation. Call <link target="do_post_write()" name="do_post_write()" original="&lt; do_post_write() &gt;">. Returns an indication of the success of the operation.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: read
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::read)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(User-defined backdoor read operation.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>User-defined backdoor read operation.</p><p>Overload this method only if the backdoor requires the use of task.</p><p>Call <link target="do_pre_read()" name="do_pre_read()" original="&lt; do_pre_read() &gt;">. Peek the current value of the specified HDL implementation. Call <link target="do_post_read()" name="do_post_read()" original="&lt; do_post_read() &gt;">. Returns the current value and an indication of the success of the operation.</p><p>By default, calls <link target="read_func()" name="read_func()" original="&lt; read_func() &gt;">.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: read_func
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::read_func)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(User-defined backdoor read operation.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>User-defined backdoor read operation.</p><p>Peek the current value in the HDL implementation. Returns the current value and an indication of the success of the operation.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: is_auto_updated
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::is_auto_updated)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Function)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Indicates if wait_for_change() method is implemented)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Indicates if wait_for_change() method is implemented</p><p>Implement to return TRUE if and only if <link target="wait_for_change()" name="wait_for_change()" original="&lt; wait_for_change() &gt;"> is implemented to watch for changes in the HDL implementation of the specified field</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: wait_for_change
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::wait_for_change)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Wait for a change in the value of the register or memory element in the DUT.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Wait for a change in the value of the register or memory element in the DUT.</p><p>When this method returns, the mirror value for the register corresponding to this instance of the backdoor class will be updated via a backdoor read operation.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: pre_read
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::pre_read)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Called before user-defined backdoor register read.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Called before user-defined backdoor register read.</p><p>The registered callback methods are invoked after the invocation of this method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: post_read
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::post_read)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Called after user-defined backdoor register read.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Called after user-defined backdoor register read.</p><p>The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: pre_write
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::pre_write)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Called before user-defined backdoor register write.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Called before user-defined backdoor register write.</p><p>The registered callback methods are invoked after the invocation of this method.</p><p>The written value, if modified, modifies the actual value that will be written.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicTitle: post_write
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | QualifiedName(uvm_pkg::uvm_reg_backdoor::post_write)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | TopicType(task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Keyword(Task)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | NumChilderen(0)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Summary(Called after user-defined backdoor register write.)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | | Body(<p>Called after user-defined backdoor register write.</p><p>The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_reg_backdoor.svh] | [uvm_reg_backdoor] | +-------------------------------------------------------------------
| | [uvm_reg_backdoor.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_bit_bash_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | TopicTitle: Bit Bashing Test Sequences
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | QualifiedName(Bit Bashing Test Sequences)
| | [uvm_reg_bit_bash_seq.svh] | TopicType(section)
| | [uvm_reg_bit_bash_seq.svh] | Keyword(Title)
| | [uvm_reg_bit_bash_seq.svh] | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | Summary(This section defines classes that test individual bits of the registers defined in a register model.)
| | [uvm_reg_bit_bash_seq.svh] | Body(<p>This section defines classes that test individual bits of the registers defined in a register model.</p>)
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | TopicTitle: uvm_reg_single_bit_bash_seq
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_single_bit_bash_seq)
| | [uvm_reg_bit_bash_seq.svh] | TopicType(class)
| | [uvm_reg_bit_bash_seq.svh] | Keyword(Class)
| | [uvm_reg_bit_bash_seq.svh] | NumChilderen(1)
| | [uvm_reg_bit_bash_seq.svh] | Summary(Verify the implementation of a single register by attempting to write 1's and 0's to every bit in it, via every address map in which the register is mapped, making sure that the resulting value matches the mirrored value.)
| | [uvm_reg_bit_bash_seq.svh] | Body(<p>Verify the implementation of a single register by attempting to write 1's and 0's to every bit in it, via every address map in which the register is mapped, making sure that the resulting value matches the mirrored value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_BIT_BASH_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the register, the register is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.r0.get_full_name()},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote><p>Registers that contain fields with unknown access policies cannot be tested.</p><p>The DUT should be idle and not modify any register durign this test.</p>)
| | [uvm_reg_bit_bash_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | | Children
| | [uvm_reg_bit_bash_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | TopicTitle: rg
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | QualifiedName(uvm_pkg::uvm_reg_single_bit_bash_seq::rg)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | TopicType(variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | Keyword(Variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | Summary(The register to be tested)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | | Body(<p>The register to be tested</p>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_single_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | TopicTitle: uvm_reg_bit_bash_seq
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_bit_bash_seq)
| | [uvm_reg_bit_bash_seq.svh] | TopicType(class)
| | [uvm_reg_bit_bash_seq.svh] | Keyword(Class)
| | [uvm_reg_bit_bash_seq.svh] | NumChilderen(5)
| | [uvm_reg_bit_bash_seq.svh] | Summary(Verify the implementation of all registers in a block by executing the <link target="uvm_reg_single_bit_bash_seq" name="uvm_reg_single_bit_bash_seq" original="&lt; uvm_reg_single_bit_bash_seq &gt;"> sequence on it.)
| | [uvm_reg_bit_bash_seq.svh] | Body(<p>Verify the implementation of all registers in a block by executing the <link target="uvm_reg_single_bit_bash_seq" name="uvm_reg_single_bit_bash_seq" original="&lt; uvm_reg_single_bit_bash_seq &gt;"> sequence on it.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_BIT_BASH_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block, the block is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote>)
| | [uvm_reg_bit_bash_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | | Children
| | [uvm_reg_bit_bash_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicTitle: model
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | QualifiedName(model)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicType(variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Keyword(Variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Summary(The block to be tested. )
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicTitle: reg_seq
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | QualifiedName(uvm_pkg::uvm_reg_bit_bash_seq::reg_seq)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicType(variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Keyword(Variable)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Summary(The sequence used to test one register)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Body(<p>The sequence used to test one register</p>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicTitle: body
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | QualifiedName(uvm_pkg::uvm_reg_bit_bash_seq::body)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicType(task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Keyword(Task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Summary(Executes the Register Bit Bash sequence. )
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Body(<p>Executes the Register Bit Bash sequence. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicTitle: do_block
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | QualifiedName(uvm_pkg::uvm_reg_bit_bash_seq::do_block)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicType(task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Keyword(Task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Summary(Test all of the registers in a a given <i>block</i>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Body(<p>Test all of the registers in a a given <i>block</i></p>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicTitle: reset_blk
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | QualifiedName(uvm_pkg::uvm_reg_bit_bash_seq::reset_blk)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | TopicType(task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Keyword(Task)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | NumChilderen(0)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_reg_bit_bash_seq.svh] | [uvm_reg_bit_bash_seq] | +-------------------------------------------------------------------
| | [uvm_reg_bit_bash_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_block.svh
| +-------------------------------------------------------------------
| | [uvm_reg_block.svh] +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | TopicTitle: uvm_reg_block
| | [uvm_reg_block.svh] +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | QualifiedName(uvm_pkg::uvm_reg_block)
| | [uvm_reg_block.svh] | TopicType(class)
| | [uvm_reg_block.svh] | Keyword(Class)
| | [uvm_reg_block.svh] | NumChilderen(61)
| | [uvm_reg_block.svh] | Summary(Block abstraction base class)
| | [uvm_reg_block.svh] | Body(<p>Block abstraction base class</p><p>A block represents a design hierarchy. It can contain registers, register files, memories and sub-blocks.</p><p>A block has one or more address maps, each corresponding to a physical interface on the block.</p>)
| | [uvm_reg_block.svh] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | | Children
| | [uvm_reg_block.svh] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: default_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::default_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(variable)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Variable)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Default access path for the registers and memories in this block.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Default access path for the registers and memories in this block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: Initialization
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(Initialization)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary()
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body()
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: new
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::new)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Create a new instance and type-specific configuration)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Create a new instance and type-specific configuration</p><p>Creates an instance of a block abstraction class with the specified name.</p><p><i>has_coverage</i> specifies which functional coverage models are present in the extension of the block abstraction class. Multiple functional coverage models may be specified by adding their symbolic names, as defined by the <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> type.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: configure
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::configure)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Instance-specific configuration)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Instance-specific configuration</p><p>Specify the parent block of this block. A block without parent is a root block.</p><p>If the block file corresponds to a hierarchical RTL structure, it's contribution to the HDL path is specified as the <i>hdl_path</i>. Otherwise, the block does not correspond to a hierarchical RTL structure (e.g. it is physically flattened) and does not contribute to the hierarchical HDL path of any contained registers or memories.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: create_map
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::create_map)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Create an address map in this block)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Create an address map in this block</p><p>Create an address map with the specified <i>name</i>, then configures it with the following properties.</p><dl><de> base_addr</de><dd>the base address for the map. All registers, memories, and sub-blocks within the map will be at offsets to this address</dd><de> n_bytes</de><dd>the byte-width of the bus on which this map is used</dd><de> endian</de><dd>the endian format. See <link target="uvm_endianness_e" name="uvm_endianness_e" original="&lt; uvm_endianness_e &gt;"> for possible values</dd><de> byte_addressing</de><dd>specifies whether consecutive addresses refer are 1 byte apart (TRUE) or <i>n_bytes</i> apart (FALSE). Default is TRUE.</dd></dl><blockquote><pre>APB = create_map(&quot;APB&quot;, 0, 1, UVM_LITTLE_ENDIAN, 1);</pre></blockquote>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: check_data_width
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::check_data_width)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check that the specified data width (in bits) is less than or equal to the value of `UVM_REG_DATA_WIDTH)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check that the specified data width (in bits) is less than or equal to the value of `UVM_REG_DATA_WIDTH</p><p>This method is designed to be called by a static initializer</p><blockquote><pre>class my_blk extends uvm_reg_block;
  local static bit m_data_width = check_data_width(356);
  ...
endclass</pre></blockquote>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: set_default_map
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::set_default_map)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Defines the default address map)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Defines the default address map</p><p>Set the specified address map as the <link target="default_map" name="default_map" original="&lt; default_map &gt;"> for this block. The address map must be a map of this address block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: default_map
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::default_map)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(variable)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Variable)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Default address map)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Default address map</p><p>Default address map for this block, to be used when no address map is specified for a register operation and that register is accessible from more than one address map.</p><p>It is also the implciit address map for a block with a single, unamed address map because it has only one physical interface.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: lock_model
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::lock_model)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Lock a model and build the address map.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Lock a model and build the address map.</p><p>Recursively lock an entire register model and build the address maps to enable the <link target="uvm_reg_map::get_reg_by_offset()" name="uvm_reg_map::get_reg_by_offset()" original="&lt; uvm_reg_map::get_reg_by_offset() &gt;"> and <link target="uvm_reg_map::get_mem_by_offset()" name="uvm_reg_map::get_mem_by_offset()" original="&lt; uvm_reg_map::get_mem_by_offset() &gt;"> methods.</p><p>Once locked, no further structural changes, such as adding registers or memories, can be made.</p><p>It is not possible to unlock a model.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: is_locked
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::is_locked)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Return TRUE if the model is locked.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Return TRUE if the model is locked.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: Introspection
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(Introspection)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary()
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body()
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(get_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the simple name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the simple name</p><p>Return the simple object name of this block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_full_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_full_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the hierarchical name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this block. The base of the hierarchical name is the root block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_parent
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_parent)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the parent block)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the parent block</p><p>If this a top-level block, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_root_blocks
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_root_blocks)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the all root blocks)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the all root blocks</p><p>Returns an array of all root blocks in the simulation.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: find_blocks
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::find_blocks)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Find the blocks whose hierarchical names match the specified <i>name</i> glob. )
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Find the blocks whose hierarchical names match the specified <i>name</i> glob. If a <i>root</i> block is specified, the name of the blocks are relative to that block, otherwise they are absolute.</p><p>Returns the number of blocks found.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: find_block
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::find_block)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Find the first block whose hierarchical names match the specified <i>name</i> glob. )
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Find the first block whose hierarchical names match the specified <i>name</i> glob. If a <i>root</i> block is specified, the name of the blocks are relative to that block, otherwise they are absolute.</p><p>Returns the first block found or <i>null</i> otherwise. A warning is issued if more than one block is found.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_blocks
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_blocks)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the sub-blocks)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the sub-blocks</p><p>Get the blocks instantiated in this blocks. If <i>hier</i> is TRUE, recursively includes any sub-blocks.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_maps
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_maps)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the address maps)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the address maps</p><p>Get the address maps instantiated in this block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_registers
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_registers)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the registers)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the registers</p><p>Get the registers instantiated in this block. If <i>hier</i> is TRUE, recursively includes the registers in the sub-blocks.</p><p>Note that registers may be located in different and/or multiple address maps. To get the registers in a specific address map, use the <link target="uvm_reg_map::get_registers()" name="uvm_reg_map::get_registers()" original="&lt; uvm_reg_map::get_registers() &gt;"> method.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_fields
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_fields)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the fields)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the fields</p><p>Get the fields in the registers instantiated in this block. If <i>hier</i> is TRUE, recursively includes the fields of the registers in the sub-blocks.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_memories
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_memories)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the memories)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the memories</p><p>Get the memories instantiated in this block. If <i>hier</i> is TRUE, recursively includes the memories in the sub-blocks.</p><p>Note that memories may be located in different and/or multiple address maps. To get the memories in a specific address map, use the <link target="uvm_reg_map::get_memories()" name="uvm_reg_map::get_memories()" original="&lt; uvm_reg_map::get_memories() &gt;"> method.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_virtual_registers
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_virtual_registers)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the virtual registers)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the virtual registers</p><p>Get the virtual registers instantiated in this block. If <i>hier</i> is TRUE, recursively includes the virtual registers in the sub-blocks.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_virtual_fields
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_virtual_fields)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the virtual fields)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the virtual fields</p><p>Get the virtual fields from the virtual registers instantiated in this block. If <i>hier</i> is TRUE, recursively includes the virtual fields in the virtual registers in the sub-blocks.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_block_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_block_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a sub-block with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a sub-block with the specified simple name.</p><p>The name is the simple name of the block, not a hierarchical name. relative to this block. If no block with that name is found in this block, the sub-blocks are searched for a block of that name and the first one to be found is returned.</p><p>If no blocks are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_map_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_map_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds an address map with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds an address map with the specified simple name.</p><p>The name is the simple name of the address map, not a hierarchical name. relative to this block. If no map with that name is found in this block, the sub-blocks are searched for a map of that name and the first one to be found is returned.</p><p>If no address maps are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_reg_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_reg_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a register with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a register with the specified simple name.</p><p>The name is the simple name of the register, not a hierarchical name. relative to this block. If no register with that name is found in this block, the sub-blocks are searched for a register of that name and the first one to be found is returned.</p><p>If no registers are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_field_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_field_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a field with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a field with the specified simple name.</p><p>The name is the simple name of the field, not a hierarchical name. relative to this block. If no field with that name is found in this block, the sub-blocks are searched for a field of that name and the first one to be found is returned.</p><p>If no fields are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_mem_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_mem_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a memory with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a memory with the specified simple name.</p><p>The name is the simple name of the memory, not a hierarchical name. relative to this block. If no memory with that name is found in this block, the sub-blocks are searched for a memory of that name and the first one to be found is returned.</p><p>If no memories are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_vreg_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_vreg_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a virtual register with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a virtual register with the specified simple name.</p><p>The name is the simple name of the virtual register, not a hierarchical name. relative to this block. If no virtual register with that name is found in this block, the sub-blocks are searched for a virtual register of that name and the first one to be found is returned.</p><p>If no virtual registers are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_vfield_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_vfield_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Finds a virtual field with the specified simple name.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Finds a virtual field with the specified simple name.</p><p>The name is the simple name of the virtual field, not a hierarchical name. relative to this block. If no virtual field with that name is found in this block, the sub-blocks are searched for a virtual field of that name and the first one to be found is returned.</p><p>If no virtual fields are found, returns <i>null</i>.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: Coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(Coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary()
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body()
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: build_coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::build_coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if all of the specified coverage model must be built.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if all of the specified coverage model must be built.</p><p>Check which of the specified coverage model must be built in this instance of the block abstraction class, as specified by calls to <link target="uvm_reg::include_coverage()" name="uvm_reg::include_coverage()" original="&lt; uvm_reg::include_coverage() &gt;">.</p><p>Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">. Returns the sum of all coverage models to be built in the block model.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: add_coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::add_coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Specify that additional coverage models are available.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Specify that additional coverage models are available.</p><p>Add the specified coverage model to the coverage models available in this class. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p><p>This method shall be called only in the constructor of subsequently derived classes.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: has_coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::has_coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if block has coverage model(s))
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if block has coverage model(s)</p><p>Returns TRUE if the block abstraction class contains a coverage model for all of the models specified. Models are specified by adding the symbolic value of individual coverage model as defined in <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;">.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: set_coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::set_coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Turns on coverage measurement.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Turns on coverage measurement.</p><p>Turns the collection of functional coverage measurements on or off for this block and all blocks, registers, fields and memories within it. The functional coverage measurement is turned on for every coverage model specified using <link target="uvm_coverage_model_e" name="uvm_coverage_model_e" original="&lt; uvm_coverage_model_e &gt;"> symbolic identifers. Multiple functional coverage models can be specified by adding the functional coverage model identifiers. All other functional coverage models are turned off. Returns the sum of all functional coverage models whose measurements were previously on.</p><p>This method can only control the measurement of functional coverage models that are present in the various abstraction classes, then enabled during construction. See the <link target="uvm_reg_block::has_coverage()" name="uvm_reg_block::has_coverage()" original="&lt; uvm_reg_block::has_coverage() &gt;"> method to identify the available functional coverage models.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_coverage
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_coverage)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if coverage measurement is on.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if coverage measurement is on.</p><p>Returns TRUE if measurement for all of the specified functional coverage models are currently on. Multiple functional coverage models can be specified by adding the functional coverage model identifiers.</p><p>See <link target="uvm_reg_block::set_coverage()" name="uvm_reg_block::set_coverage()" original="&lt; uvm_reg_block::set_coverage() &gt;"> for more details.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: sample
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::sample)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Functional coverage measurement method)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Functional coverage measurement method</p><p>This method is invoked by the block abstraction class whenever an address within one of its address map is succesfully read or written. The specified offset is the offset within the block, not an absolute address.</p><p>Empty by default, this method may be extended by the abstraction class generator to perform the required sampling in any provided functional coverage model.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: sample_values
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::sample_values)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Functional coverage measurement method for field values)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Functional coverage measurement method for field values</p><p>This method is invoked by the user or by the <link target="uvm_reg_block::sample_values()" name="uvm_reg_block::sample_values()" original="&lt; uvm_reg_block::sample_values() &gt;"> method of the parent block to trigger the sampling of the current field values in the block-level functional coverage model. It recursively invokes the <link target="uvm_reg_block::sample_values()" name="uvm_reg_block::sample_values()" original="&lt; uvm_reg_block::sample_values() &gt;"> and <link target="uvm_reg::sample_values()" name="uvm_reg::sample_values()" original="&lt; uvm_reg::sample_values() &gt;"> methods in the blocks and registers in this block.</p><p>This method may be extended by the abstraction class generator to perform the required sampling in any provided field-value functional coverage model. If this method is extended, it MUST call super.sample_values().</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: Access
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(Access)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary()
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body()
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_default_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_default_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Default access path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Default access path</p><p>Returns the default access path for this block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: reset
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::reset)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Reset the mirror for this block.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Reset the mirror for this block.</p><p>Sets the mirror value of all registers in the block and sub-blocks to the reset value corresponding to the specified reset event. See <link target="uvm_reg_field::reset()" name="uvm_reg_field::reset()" original="&lt; uvm_reg_field::reset() &gt;"> for more details. Does not actually set the value of the registers in the design, only the values mirrored in their corresponding mirror.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: needs_update
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::needs_update)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if DUT registers need to be written)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if DUT registers need to be written</p><p>If a mirror value has been modified in the abstraction model without actually updating the actual register (either through randomization or via the <link target="uvm_reg::set()" name="uvm_reg::set()" original="&lt; uvm_reg::set() &gt;"> method, the mirror and state of the registers are outdated. The corresponding registers in the DUT need to be updated.</p><p>This method returns TRUE if the state of at lest one register in the block or sub-blocks needs to be updated to match the mirrored values. The mirror values, or actual content of registers, are not modified. For additional information, see <link target="uvm_reg_block::update()" name="uvm_reg_block::update()" original="&lt; uvm_reg_block::update() &gt;"> method.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: update
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::update)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Batch update of register.)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Batch update of register.</p><p>Using the minimum number of write operations, updates the registers in the design to match the mirrored values in this block and sub-blocks. The update can be performed using the physical interfaces (front-door access) or back-door accesses. This method performs the reverse operation of <link target="uvm_reg_block::mirror()" name="uvm_reg_block::mirror()" original="&lt; uvm_reg_block::mirror() &gt;">.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: mirror
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::mirror)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Update the mirrored values)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Update the mirrored values</p><p>Read all of the registers in this block and sub-blocks and update their mirror values to match their corresponding values in the design. The mirroring can be performed using the physical interfaces (front-door access) or back-door accesses. If the <i>check</i> argument is specified as <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">, an error message is issued if the current mirrored value does not match the actual value in the design. This method performs the reverse operation of <link target="uvm_reg_block::update()" name="uvm_reg_block::update()" original="&lt; uvm_reg_block::update() &gt;">.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: write_reg_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::write_reg_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Write the named register)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Write the named register</p><p>Equivalent to <link target="get_reg_by_name()" name="get_reg_by_name()" original="&lt; get_reg_by_name() &gt;"> followed by <link target="uvm_reg::write()" name="uvm_reg::write()" original="&lt; uvm_reg::write() &gt;"></p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: read_reg_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::read_reg_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Read the named register)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Read the named register</p><p>Equivalent to <link target="get_reg_by_name()" name="get_reg_by_name()" original="&lt; get_reg_by_name() &gt;"> followed by <link target="uvm_reg::read()" name="uvm_reg::read()" original="&lt; uvm_reg::read() &gt;"></p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: write_mem_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::write_mem_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Write the named memory)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Write the named memory</p><p>Equivalent to <link target="get_mem_by_name()" name="get_mem_by_name()" original="&lt; get_mem_by_name() &gt;"> followed by <link target="uvm_mem::write()" name="uvm_mem::write()" original="&lt; uvm_mem::write() &gt;"></p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: read_mem_by_name
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::read_mem_by_name)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Task)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Read the named memory)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Read the named memory</p><p>Equivalent to <link target="get_mem_by_name()" name="get_mem_by_name()" original="&lt; get_mem_by_name() &gt;"> followed by <link target="uvm_mem::read()" name="uvm_mem::read()" original="&lt; uvm_mem::read() &gt;"></p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: Backdoor
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(Backdoor)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Group)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary()
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body()
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_backdoor
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_backdoor)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the user-defined backdoor for all registers in this block)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the user-defined backdoor for all registers in this block</p><p>Return the user-defined backdoor for all register in this block and all sub-blocks -- unless overriden by a backdoor set in a lower-level block or in the register itself.</p><p>If <i>inherited</i> is TRUE, returns the backdoor of the parent block if none have been specified for this block.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: set_backdoor
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::set_backdoor)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Set the user-defined backdoor for all registers in this block)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Set the user-defined backdoor for all registers in this block</p><p>Defines the backdoor mechanism for all registers instantiated in this block and sub-blocks, unless overriden by a definition in a lower-level block or register.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: clear_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::clear_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Delete HDL paths)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Delete HDL paths</p><p>Remove any previously specified HDL path to the block instance for the specified design abstraction.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: add_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::add_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Add an HDL path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Add an HDL path</p><p>Add the specified HDL path to the block instance for the specified design abstraction. This method may be called more than once for the same design abstraction if the block is physically duplicated in the design abstraction</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: has_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::has_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if a HDL path is specified)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if a HDL path is specified</p><p>Returns TRUE if the block instance has a HDL path defined for the specified design abstraction. If no design abstraction is specified, uses the default design abstraction specified for this block or the nearest block ancestor with a specified default design abstraction.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the incremental HDL path(s))
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the incremental HDL path(s)</p><p>Returns the HDL path(s) defined for the specified design abstraction in the block instance. Returns only the component of the HDL paths that corresponds to the block, not a full hierarchical path</p><p>If no design asbtraction is specified, the default design abstraction for this block is used.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_full_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_full_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the full hierarchical HDL path(s))
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the full hierarchical HDL path(s)</p><p>Returns the full hierarchical HDL path(s) defined for the specified design abstraction in the block instance. There may be more than one path returned even if only one path was defined for the block instance, if any of the parent components have more than one path defined for the same design abstraction</p><p>If no design asbtraction is specified, the default design abstraction for each ancestor block is used to get each incremental path.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: set_default_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::set_default_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Set the default design abstraction)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Set the default design abstraction</p><p>Set the default design abstraction for this block instance.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: get_default_hdl_path
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::get_default_hdl_path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Get the default design abstraction)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Get the default design abstraction</p><p>Returns the default design abstraction for this block instance. If a default design abstraction has not been explicitly set for this block instance, returns the default design absraction for the nearest block ancestor. Returns &quot;&quot; if no default design abstraction has been specified.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: set_hdl_path_root
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::set_hdl_path_root)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Specify a root HDL path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Specify a root HDL path</p><p>Set the specified path as the absolute HDL path to the block instance for the specified design abstraction. This absolute root path is preppended to all hierarchical paths under this block. The HDL path of any ancestor block is ignored. This method overrides any incremental path for the same design abstraction specified using <link target="add_hdl_path" name="add_hdl_path" original="&lt; add_hdl_path &gt;">.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicTitle: is_hdl_path_root
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] | [uvm_reg_block] | | QualifiedName(uvm_pkg::uvm_reg_block::is_hdl_path_root)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | TopicType(function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Keyword(Function)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | NumChilderen(0)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Summary(Check if this block has an absolute path)
| | [uvm_reg_block.svh] | [uvm_reg_block] | | Body(<p>Check if this block has an absolute path</p><p>Returns TRUE if an absolute HDL path to the block instance for the specified design abstraction has been defined. If no design asbtraction is specified, the default design abstraction for this block is used.</p>)
| | [uvm_reg_block.svh] | [uvm_reg_block] | +-------------------------------------------------------------------
| | [uvm_reg_block.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_cbs.svh
| +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: Register Callbacks
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(Register Callbacks)
| | [uvm_reg_cbs.svh] | TopicType(section)
| | [uvm_reg_cbs.svh] | Keyword(Title)
| | [uvm_reg_cbs.svh] | NumChilderen(0)
| | [uvm_reg_cbs.svh] | Summary(This section defines the base class used for all register callback extensions. )
| | [uvm_reg_cbs.svh] | Body(<p>This section defines the base class used for all register callback extensions. It also includes pre-defined callback extensions for use on read-only and write-only registers.</p>)
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: uvm_reg_cbs
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(uvm_pkg::uvm_reg_cbs)
| | [uvm_reg_cbs.svh] | TopicType(class)
| | [uvm_reg_cbs.svh] | Keyword(Class)
| | [uvm_reg_cbs.svh] | NumChilderen(7)
| | [uvm_reg_cbs.svh] | Summary(Facade class for field, register, memory and backdoor access callback methods.)
| | [uvm_reg_cbs.svh] | Body(<p>Facade class for field, register, memory and backdoor access callback methods.</p>)
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | | Children
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: pre_write
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::pre_write)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Called before a write operation.)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Called before a write operation.</p><p>All registered <i>pre_write</i> callback methods are invoked after the invocation of the <i>pre_write</i> method of associated object (<link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, <link target="uvm_reg_field" name="uvm_reg_field" original="&lt; uvm_reg_field &gt;">, <link target="uvm_mem" name="uvm_mem" original="&lt; uvm_mem &gt;">, or <link target="uvm_reg_backdoor" name="uvm_reg_backdoor" original="&lt; uvm_reg_backdoor &gt;">). If the element being written is a <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, all <i>pre_write</i> callback methods are invoked before the contained <link target="uvm_reg_fields" name="uvm_reg_fields" original="&lt; uvm_reg_fields &gt;">.</p><dl><de> Backdoor</de><dd><link target="uvm_reg_backdoor::pre_write" name="uvm_reg_backdoor::pre_write" original="&lt; uvm_reg_backdoor::pre_write &gt;">, <link target="uvm_reg_cbs::pre_write" name="uvm_reg_cbs::pre_write" original="&lt; uvm_reg_cbs::pre_write &gt;"> cbs for backdoor.</dd><de> Register</de><dd><link target="uvm_reg::pre_write" name="uvm_reg::pre_write" original="&lt; uvm_reg::pre_write &gt;">, <link target="uvm_reg_cbs::pre_write" name="uvm_reg_cbs::pre_write" original="&lt; uvm_reg_cbs::pre_write &gt;"> cbs for reg, then foreach field: <link target="uvm_reg_field::pre_write" name="uvm_reg_field::pre_write" original="&lt; uvm_reg_field::pre_write &gt;">, <link target="uvm_reg_cbs::pre_write" name="uvm_reg_cbs::pre_write" original="&lt; uvm_reg_cbs::pre_write &gt;"> cbs for field</dd><de> RegField</de><dd><link target="uvm_reg_field::pre_write" name="uvm_reg_field::pre_write" original="&lt; uvm_reg_field::pre_write &gt;">, <link target="uvm_reg_cbs::pre_write" name="uvm_reg_cbs::pre_write" original="&lt; uvm_reg_cbs::pre_write &gt;"> cbs for field</dd><de> Memory</de><dd><link target="uvm_mem::pre_write" name="uvm_mem::pre_write" original="&lt; uvm_mem::pre_write &gt;">, <link target="uvm_reg_cbs::pre_write" name="uvm_reg_cbs::pre_write" original="&lt; uvm_reg_cbs::pre_write &gt;"> cbs for mem</dd></dl><p>The <i>rw</i> argument holds information about the operation.</p><ul><li>Modifying the <i>value</i> modifies the actual value written.</li><li>For memories, modifying the <i>offset</i> modifies the offset used in the operation.</li><li>For non-backdoor operations, modifying the access <i>path</i> or address <i>map</i> modifies the actual path or map used in the operation.</li></ul><p>If the <i>rw.status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>See <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> for details on <i>rw</i> information.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: post_write
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::post_write)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Called after a write operation.)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Called after a write operation.</p><p>All registered <i>post_write</i> callback methods are invoked before the invocation of the <i>post_write</i> method of the associated object (<link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, <link target="uvm_reg_field" name="uvm_reg_field" original="&lt; uvm_reg_field &gt;">, <link target="uvm_mem" name="uvm_mem" original="&lt; uvm_mem &gt;">, or <link target="uvm_reg_backdoor" name="uvm_reg_backdoor" original="&lt; uvm_reg_backdoor &gt;">). If the element being written is a <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, all <i>post_write</i> callback methods are invoked before the contained <link target="uvm_reg_fields" name="uvm_reg_fields" original="&lt; uvm_reg_fields &gt;">.</p><h4 class=CHeading> Summary of callback order</h4><dl><de> Backdoor</de><dd><link target="uvm_reg_cbs::post_write" name="uvm_reg_cbs::post_write" original="&lt; uvm_reg_cbs::post_write &gt;"> cbs for backdoor, <link target="uvm_reg_backdoor::post_write" name="uvm_reg_backdoor::post_write" original="&lt; uvm_reg_backdoor::post_write &gt;"></dd><de> Register</de><dd><link target="uvm_reg_cbs::post_write" name="uvm_reg_cbs::post_write" original="&lt; uvm_reg_cbs::post_write &gt;"> cbs for reg, <link target="uvm_reg::post_write" name="uvm_reg::post_write" original="&lt; uvm_reg::post_write &gt;">, then foreach field: <link target="uvm_reg_cbs::post_write" name="uvm_reg_cbs::post_write" original="&lt; uvm_reg_cbs::post_write &gt;"> cbs for field, <link target="uvm_reg_field::post_read" name="uvm_reg_field::post_read" original="&lt; uvm_reg_field::post_read &gt;"></dd><de> RegField</de><dd><link target="uvm_reg_cbs::post_write" name="uvm_reg_cbs::post_write" original="&lt; uvm_reg_cbs::post_write &gt;"> cbs for field, <link target="uvm_reg_field::post_write" name="uvm_reg_field::post_write" original="&lt; uvm_reg_field::post_write &gt;"></dd><de> Memory</de><dd><link target="uvm_reg_cbs::post_write" name="uvm_reg_cbs::post_write" original="&lt; uvm_reg_cbs::post_write &gt;"> cbs for mem, <link target="uvm_mem::post_write" name="uvm_mem::post_write" original="&lt; uvm_mem::post_write &gt;"></dd></dl><p>The <i>rw</i> argument holds information about the operation.</p><ul><li>Modifying the <i>status</i> member modifies the returned status.</li><li>Modiying the <i>value</i> or <i>offset</i> members has no effect, as the operation has already completed.</li></ul><p>See <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> for details on <i>rw</i> information.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: pre_read
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::pre_read)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Callback called before a read operation.)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Callback called before a read operation.</p><p>All registered <i>pre_read</i> callback methods are invoked after the invocation of the <i>pre_read</i> method of associated object (<link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, <link target="uvm_reg_field" name="uvm_reg_field" original="&lt; uvm_reg_field &gt;">, <link target="uvm_mem" name="uvm_mem" original="&lt; uvm_mem &gt;">, or <link target="uvm_reg_backdoor" name="uvm_reg_backdoor" original="&lt; uvm_reg_backdoor &gt;">). If the element being read is a <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, all <i>pre_read</i> callback methods are invoked before the contained <link target="uvm_reg_fields" name="uvm_reg_fields" original="&lt; uvm_reg_fields &gt;">.</p><dl><de> Backdoor</de><dd><link target="uvm_reg_backdoor::pre_read" name="uvm_reg_backdoor::pre_read" original="&lt; uvm_reg_backdoor::pre_read &gt;">, <link target="uvm_reg_cbs::pre_read" name="uvm_reg_cbs::pre_read" original="&lt; uvm_reg_cbs::pre_read &gt;"> cbs for backdoor</dd><de> Register</de><dd><link target="uvm_reg::pre_read" name="uvm_reg::pre_read" original="&lt; uvm_reg::pre_read &gt;">, <link target="uvm_reg_cbs::pre_read" name="uvm_reg_cbs::pre_read" original="&lt; uvm_reg_cbs::pre_read &gt;"> cbs for reg, then foreach field: <link target="uvm_reg_field::pre_read" name="uvm_reg_field::pre_read" original="&lt; uvm_reg_field::pre_read &gt;">, <link target="uvm_reg_cbs::pre_read" name="uvm_reg_cbs::pre_read" original="&lt; uvm_reg_cbs::pre_read &gt;"> cbs for field</dd><de> RegField</de><dd><link target="uvm_reg_field::pre_read" name="uvm_reg_field::pre_read" original="&lt; uvm_reg_field::pre_read &gt;">, <link target="uvm_reg_cbs::pre_read" name="uvm_reg_cbs::pre_read" original="&lt; uvm_reg_cbs::pre_read &gt;"> cbs for field</dd><de> Memory</de><dd><link target="uvm_mem::pre_read" name="uvm_mem::pre_read" original="&lt; uvm_mem::pre_read &gt;">, <link target="uvm_reg_cbs::pre_read" name="uvm_reg_cbs::pre_read" original="&lt; uvm_reg_cbs::pre_read &gt;"> cbs for mem</dd></dl><p>The <i>rw</i> argument holds information about the operation.</p><ul><li>The <i>value</i> member of <i>rw</i> is not used has no effect if modified.</li><li>For memories, modifying the <i>offset</i> modifies the offset used in the operation.</li><li>For non-backdoor operations, modifying the access <i>path</i> or address <i>map</i> modifies the actual path or map used in the operation.</li></ul><p>If the <i>rw.status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>See <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> for details on <i>rw</i> information.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: post_read
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::post_read)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Callback called after a read operation.)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Callback called after a read operation.</p><p>All registered <i>post_read</i> callback methods are invoked before the invocation of the <i>post_read</i> method of the associated object (<link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, <link target="uvm_reg_field" name="uvm_reg_field" original="&lt; uvm_reg_field &gt;">, <link target="uvm_mem" name="uvm_mem" original="&lt; uvm_mem &gt;">, or <link target="uvm_reg_backdoor" name="uvm_reg_backdoor" original="&lt; uvm_reg_backdoor &gt;">). If the element being read is a <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, all <i>post_read</i> callback methods are invoked before the contained <link target="uvm_reg_fields" name="uvm_reg_fields" original="&lt; uvm_reg_fields &gt;">.</p><dl><de> Backdoor</de><dd><link target="uvm_reg_cbs::post_read" name="uvm_reg_cbs::post_read" original="&lt; uvm_reg_cbs::post_read &gt;"> cbs for backdoor, <link target="uvm_reg_backdoor::post_read" name="uvm_reg_backdoor::post_read" original="&lt; uvm_reg_backdoor::post_read &gt;"></dd><de> Register</de><dd><link target="uvm_reg_cbs::post_read" name="uvm_reg_cbs::post_read" original="&lt; uvm_reg_cbs::post_read &gt;"> cbs for reg, <link target="uvm_reg::post_read" name="uvm_reg::post_read" original="&lt; uvm_reg::post_read &gt;">, then foreach field: <link target="uvm_reg_cbs::post_read" name="uvm_reg_cbs::post_read" original="&lt; uvm_reg_cbs::post_read &gt;"> cbs for field, <link target="uvm_reg_field::post_read" name="uvm_reg_field::post_read" original="&lt; uvm_reg_field::post_read &gt;"></dd><de> RegField</de><dd><link target="uvm_reg_cbs::post_read" name="uvm_reg_cbs::post_read" original="&lt; uvm_reg_cbs::post_read &gt;"> cbs for field, <link target="uvm_reg_field::post_read" name="uvm_reg_field::post_read" original="&lt; uvm_reg_field::post_read &gt;"></dd><de> Memory</de><dd><link target="uvm_reg_cbs::post_read" name="uvm_reg_cbs::post_read" original="&lt; uvm_reg_cbs::post_read &gt;"> cbs for mem, <link target="uvm_mem::post_read" name="uvm_mem::post_read" original="&lt; uvm_mem::post_read &gt;"></dd></dl><p>The <i>rw</i> argument holds information about the operation.</p><ul><li>Modifying the readback <i>value</i> or <i>status</i> modifies the actual returned value and status.</li><li>Modiying the <i>value</i> or <i>offset</i> members has no effect, as the operation has already completed.</li></ul><p>See <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> for details on <i>rw</i> information.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: post_predict
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::post_predict)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Task)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Called by the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method after a successful UVM_PREDICT_READ or UVM_PREDICT_WRITE prediction.)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Called by the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method after a successful UVM_PREDICT_READ or UVM_PREDICT_WRITE prediction.</p><p><i>previous</i> is the previous value in the mirror and <i>value</i> is the latest predicted value. Any change to <i>value</i> will modify the predicted mirror value.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: encode
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::encode)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Data encoder)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Data encoder</p><p>The registered callback methods are invoked in order of registration after all the <i>pre_write</i> methods have been called. The encoded data is passed through each invocation in sequence. This allows the <i>pre_write</i> methods to deal with clear-text data.</p><p>By default, the data is not modified.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicTitle: decode
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | QualifiedName(uvm_pkg::uvm_reg_cbs::decode)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Summary(Data decode)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | | Body(<p>Data decode</p><p>The registered callback methods are invoked in <i>reverse order</i> of registration before all the <i>post_read</i> methods are called. The decoded data is passed through each invocation in sequence. This allows the <i>post_read</i> methods to deal with clear-text data.</p><p>The reversal of the invocation order is to allow the decoding of the data to be performed in the opposite order of the encoding with both operations specified in the same callback extension.</p><p>By default, the data is not modified.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: Typedefs
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(Typedefs)
| | [uvm_reg_cbs.svh] | TopicType(section)
| | [uvm_reg_cbs.svh] | Keyword(Section)
| | [uvm_reg_cbs.svh] | NumChilderen(0)
| | [uvm_reg_cbs.svh] | Summary()
| | [uvm_reg_cbs.svh] | Body()
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: Predefined Extensions
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(Predefined Extensions)
| | [uvm_reg_cbs.svh] | TopicType(group)
| | [uvm_reg_cbs.svh] | Keyword(Group)
| | [uvm_reg_cbs.svh] | NumChilderen(0)
| | [uvm_reg_cbs.svh] | Summary()
| | [uvm_reg_cbs.svh] | Body()
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: uvm_reg_read_only_cbs
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(uvm_pkg::uvm_reg_read_only_cbs)
| | [uvm_reg_cbs.svh] | TopicType(class)
| | [uvm_reg_cbs.svh] | Keyword(Class)
| | [uvm_reg_cbs.svh] | NumChilderen(3)
| | [uvm_reg_cbs.svh] | Summary(Pre-defined register callback method for read-only registers that will issue an error if a write() operation is attempted.)
| | [uvm_reg_cbs.svh] | Body(<p>Pre-defined register callback method for read-only registers that will issue an error if a write() operation is attempted.</p>)
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | | Children
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicTitle: pre_write
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_read_only_cbs::pre_write)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Summary(Produces an error message and sets status to <link target="UVM_NOT_OK" name="UVM_NOT_OK" original="&lt; UVM_NOT_OK &gt;">.)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Body(<p>Produces an error message and sets status to <link target="UVM_NOT_OK" name="UVM_NOT_OK" original="&lt; UVM_NOT_OK &gt;">.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicTitle: add
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_read_only_cbs::add)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Summary(Add this callback to the specified register and its contained fields.)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Body(<p>Add this callback to the specified register and its contained fields.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicTitle: remove
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_read_only_cbs::remove)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Summary(Remove this callback from the specified register and its contained fields.)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | | Body(<p>Remove this callback from the specified register and its contained fields.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_read_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | TopicTitle: uvm_reg_write_only_cbs
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | QualifiedName(uvm_pkg::uvm_reg_write_only_cbs)
| | [uvm_reg_cbs.svh] | TopicType(class)
| | [uvm_reg_cbs.svh] | Keyword(Class)
| | [uvm_reg_cbs.svh] | NumChilderen(3)
| | [uvm_reg_cbs.svh] | Summary(Pre-defined register callback method for write-only registers that will issue an error if a read() operation is attempted.)
| | [uvm_reg_cbs.svh] | Body(<p>Pre-defined register callback method for write-only registers that will issue an error if a read() operation is attempted.</p>)
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | | Children
| | [uvm_reg_cbs.svh] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicTitle: pre_read
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_write_only_cbs::pre_read)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Summary(Produces an error message and sets status to <link target="UVM_NOT_OK" name="UVM_NOT_OK" original="&lt; UVM_NOT_OK &gt;">.)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Body(<p>Produces an error message and sets status to <link target="UVM_NOT_OK" name="UVM_NOT_OK" original="&lt; UVM_NOT_OK &gt;">.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicTitle: add
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_write_only_cbs::add)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Summary(Add this callback to the specified register and its contained fields.)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Body(<p>Add this callback to the specified register and its contained fields.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicTitle: remove
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | QualifiedName(uvm_pkg::uvm_reg_write_only_cbs::remove)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | TopicType(function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Keyword(Function)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | NumChilderen(0)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Summary(Remove this callback from the specified register and its contained fields.)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | | Body(<p>Remove this callback from the specified register and its contained fields.</p>)
| | [uvm_reg_cbs.svh] | [uvm_reg_write_only_cbs] | +-------------------------------------------------------------------
| | [uvm_reg_cbs.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_defines.svh
| +-------------------------------------------------------------------
| | [uvm_reg_defines.svh] +-------------------------------------------------------------------
| | [uvm_reg_defines.svh] | TopicTitle: Register Defines
| | [uvm_reg_defines.svh] +-------------------------------------------------------------------
| | [uvm_reg_defines.svh] | QualifiedName(Register Defines)
| | [uvm_reg_defines.svh] | TopicType(group)
| | [uvm_reg_defines.svh] | Keyword(Group)
| | [uvm_reg_defines.svh] | NumChilderen(0)
| | [uvm_reg_defines.svh] | Summary()
| | [uvm_reg_defines.svh] | Body()
| | [uvm_reg_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_field.svh
| +-------------------------------------------------------------------
| | [uvm_reg_field.svh] +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | TopicTitle: uvm_reg_field
| | [uvm_reg_field.svh] +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | QualifiedName(uvm_pkg::uvm_reg_field)
| | [uvm_reg_field.svh] | TopicType(class)
| | [uvm_reg_field.svh] | Keyword(CLASS)
| | [uvm_reg_field.svh] | NumChilderen(40)
| | [uvm_reg_field.svh] | Summary(Field abstraction class)
| | [uvm_reg_field.svh] | Body(<p>Field abstraction class</p><p>A field represents a set of bits that behave consistently as a single entity.</p><p>A field is contained within a single register, but may have different access policies depending on the adddress map use the access the register (thus the field).</p>)
| | [uvm_reg_field.svh] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | | Children
| | [uvm_reg_field.svh] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: value
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::value)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(variable)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Variable)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Mirrored field value. )
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Mirrored field value. This value can be sampled in a functional coverage model or constrained when randomized.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: Initialization
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(Initialization)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary()
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body()
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: new
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::new)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Create a new field instance)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Create a new field instance</p><p>This method should not be used directly. The uvm_reg_field::type_id::create() factory method should be used instead.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: configure
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::configure)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Instance-specific configuration)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Instance-specific configuration</p><p>Specify the <i>parent</i> register of this field, its <i>size</i> in bits, the position of its least-significant bit within the register relative to the least-significant bit of the register, its <i>access</i> policy, volatility, &quot;HARD&quot; <i>reset</i> value, whether the field value is actually reset (the <i>reset</i> value is ignored if <i>FALSE</i>), whether the field value may be randomized and whether the field is the only one to occupy a byte lane in the register.</p><p>See <link target="set_access" name="set_access" original="&lt; set_access &gt;"> for a specification of the pre-defined field access policies.</p><p>If the field access policy is a pre-defined policy and NOT one of &quot;RW&quot;, &quot;WRC&quot;, &quot;WRS&quot;, &quot;WO&quot;, &quot;W1&quot;, or &quot;WO1&quot;, the value of <i>is_rand</i> is ignored and the rand_mode() for the field instance is turned off since it cannot be written.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: Introspection
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(Introspection)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary()
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body()
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_name
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(get_name)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Get the simple name)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Get the simple name</p><p>Return the simple object name of this field</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_full_name
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_full_name)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Get the hierarchical name)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this field The base of the hierarchical name is the root block.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_parent
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_parent)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Get the parent register)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Get the parent register</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_lsb_pos
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_lsb_pos)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Return the position of the field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Return the position of the field</p><p>Returns the index of the least significant bit of the field in the register that instantiates it. An offset of 0 indicates a field that is aligned with the least-significant bit of the register.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_n_bits
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_n_bits)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Returns the width, in number of bits, of the field.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Returns the width, in number of bits, of the field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_max_size
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_max_size)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(FUNCTION)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Returns the width, in number of bits, of the largest field.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Returns the width, in number of bits, of the largest field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: set_access
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::set_access)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Modify the access policy of the field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Modify the access policy of the field</p><p>Modify the access policy of the field to the specified one and return the previous access policy.</p><p>The pre-defined access policies are as follows. The effect of a read operation are applied after the current value of the field is sampled. The read operation will return the current value, not the value affected by the read operation (if any).</p><dl><de> &quot;RO&quot;</de><dd>W: no effect, R: no effect</dd><de> &quot;RW&quot;</de><dd>W: as-is, R: no effect</dd><de> &quot;RC&quot;</de><dd>W: no effect, R: clears all bits</dd><de> &quot;RS&quot;</de><dd>W: no effect, R: sets all bits</dd><de> &quot;WRC&quot;</de><dd>W: as-is, R: clears all bits</dd><de> &quot;WRS&quot;</de><dd>W: as-is, R: sets all bits</dd><de> &quot;WC&quot;</de><dd>W: clears all bits, R: no effect</dd><de> &quot;WS&quot;</de><dd>W: sets all bits, R: no effect</dd><de> &quot;WSRC&quot;</de><dd>W: sets all bits, R: clears all bits</dd><de> &quot;WCRS&quot;</de><dd>W: clears all bits, R: sets all bits</dd><de> &quot;W1C&quot;</de><dd>W: 1/0 clears/no effect on matching bit, R: no effect</dd><de> &quot;W1S&quot;</de><dd>W: 1/0 sets/no effect on matching bit, R: no effect</dd><de> &quot;W1T&quot;</de><dd>W: 1/0 toggles/no effect on matching bit, R: no effect</dd><de> &quot;W0C&quot;</de><dd>W: 1/0 no effect on/clears matching bit, R: no effect</dd><de> &quot;W0S&quot;</de><dd>W: 1/0 no effect on/sets matching bit, R: no effect</dd><de> &quot;W0T&quot;</de><dd>W: 1/0 no effect on/toggles matching bit, R: no effect</dd><de> &quot;W1SRC&quot;</de><dd>W: 1/0 sets/no effect on matching bit, R: clears all bits</dd><de> &quot;W1CRS&quot;</de><dd>W: 1/0 clears/no effect on matching bit, R: sets all bits</dd><de> &quot;W0SRC&quot;</de><dd>W: 1/0 no effect on/sets matching bit, R: clears all bits</dd><de> &quot;W0CRS&quot;</de><dd>W: 1/0 no effect on/clears matching bit, R: sets all bits</dd><de> &quot;WO&quot;</de><dd>W: as-is, R: error</dd><de> &quot;WOC&quot;</de><dd>W: clears all bits, R: error</dd><de> &quot;WOS&quot;</de><dd>W: sets all bits, R: error</dd><de> &quot;W1&quot;</de><dd>W: first one after <i>HARD</i> reset is as-is, other W have no effects, R: no effect</dd><de> &quot;WO1&quot;</de><dd>W: first one after <i>HARD</i> reset is as-is, other W have no effects, R: error</dd></dl><p>It is important to remember that modifying the access of a field will make the register model diverge from the specification that was used to create it.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: define_access
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::define_access)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Define a new access policy value)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Define a new access policy value</p><p>Because field access policies are specified using string values, there is no way for SystemVerilog to verify if a spceific access value is valid or not. To help catch typing errors, user-defined access values must be defined using this method to avoid beign reported as an invalid access policy.</p><p>The name of field access policies are always converted to all uppercase.</p><p>Returns TRUE if the new access policy was not previously defined. Returns FALSE otherwise but does not issue an error message.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_access
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_access)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Get the access policy of the field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Get the access policy of the field</p><p>Returns the current access policy of the field when written and read through the specified address <i>map</i>. If the register containing the field is mapped in multiple address map, an address map must be specified. The access policy of a field from a specific address map may be restricted by the register's access policy in that address map. For example, a RW field may only be writable through one of the address maps and read-only through all of the other maps.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: is_known_access
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::is_known_access)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Check if access policy is a built-in one.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Check if access policy is a built-in one.</p><p>Returns TRUE if the current access policy of the field, when written and read through the specified address <i>map</i>, is a built-in access policy.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: set_volatility
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::set_volatility)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Modify the volatility of the field to the specified one.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Modify the volatility of the field to the specified one.</p><p>It is important to remember that modifying the volatility of a field will make the register model diverge from the specification that was used to create it.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: is_volatile
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::is_volatile)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Indicates if the field value is volatile)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Indicates if the field value is volatile</p><p>UVM uses the IEEE 1685-2009 IP-XACT definition of &quot;volatility&quot;. If TRUE, the value of the register is not predictable because it may change between consecutive accesses. This typically indicates a field whose value is updated by the DUT. The nature or cause of the change is not specified. If FALSE, the value of the register is not modified between consecutive accesses.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: Access
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(Access)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary()
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body()
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: set
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::set)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Set the desired value for this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Set the desired value for this field</p><p>It sets the desired value of the field to the specified <i>value</i> modified by the field access policy. It does not actually set the value of the field in the design, only the desired value in the abstraction class. Use the <link target="uvm_reg::update()" name="uvm_reg::update()" original="&lt; uvm_reg::update() &gt;"> method to update the actual register with the desired value or the <link target="uvm_reg_field::write()" name="uvm_reg_field::write()" original="&lt; uvm_reg_field::write() &gt;"> method to actually write the field and update its mirrored value.</p><p>The final desired value in the mirror is a function of the field access policy and the set value, just like a normal physical write operation to the corresponding bits in the hardware. As such, this method (when eventually followed by a call to <link target="uvm_reg::update()" name="uvm_reg::update()" original="&lt; uvm_reg::update() &gt;">) is a zero-time functional replacement for the <link target="uvm_reg_field::write()" name="uvm_reg_field::write()" original="&lt; uvm_reg_field::write() &gt;"> method. For example, the desired value of a read-only field is not modified by this method and the desired value of a write-once field can only be set if the field has not yet been written to using a physical (for example, front-door) write operation.</p><p>Use the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> to modify the mirrored value of the field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Return the desired value of the field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Return the desired value of the field</p><p>It does not actually read the value of the field in the design, only the desired value in the abstraction class. Unless set to a different value using the <link target="uvm_reg_field::set()" name="uvm_reg_field::set()" original="&lt; uvm_reg_field::set() &gt;">, the desired value and the mirrored value are identical.</p><p>Use the <link target="uvm_reg_field::read()" name="uvm_reg_field::read()" original="&lt; uvm_reg_field::read() &gt;"> or <link target="uvm_reg_field::peek()" name="uvm_reg_field::peek()" original="&lt; uvm_reg_field::peek() &gt;"> method to get the actual field value.</p><p>If the field is write-only, the desired/mirrored value is the value last written and assumed to reside in the bits implementing it. Although a physical read operation would something different, the returned value is the actual content.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_mirrored_value
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_mirrored_value)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Return the mirrored value of the field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Return the mirrored value of the field</p><p>It does not actually read the value of the field in the design, only the mirrored value in the abstraction class.</p><p>If the field is write-only, the desired/mirrored value is the value last written and assumed to reside in the bits implementing it. Although a physical read operation would something different, the returned value is the actual content.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: reset
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::reset)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Reset the desired/mirrored value for this field.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Reset the desired/mirrored value for this field.</p><p>It sets the desired and mirror value of the field to the reset event specified by <i>kind</i>. If the field does not have a reset value specified for the specified reset <i>kind</i> the field is unchanged.</p><p>It does not actually reset the value of the field in the design, only the value mirrored in the field abstraction class.</p><p>Write-once fields can be modified after a &quot;HARD&quot; reset operation.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_reset
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_reset)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Get the specified reset value for this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Get the specified reset value for this field</p><p>Return the reset value for this field for the specified reset <i>kind</i>. Returns the current field value is no reset value has been specified for the specified reset event.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: has_reset
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::has_reset)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Check if the field has a reset value specified)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Check if the field has a reset value specified</p><p>Return TRUE if this field has a reset value specified for the specified reset <i>kind</i>. If <i>delete</i> is TRUE, removes the reset value, if any.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: set_reset
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::set_reset)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Specify or modify the reset value for this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Specify or modify the reset value for this field</p><p>Specify or modify the reset value for this field corresponding to the cause specified by <i>kind</i>.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: needs_update
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::needs_update)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Check if the abstract model contains different desired and mirrored values.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Check if the abstract model contains different desired and mirrored values.</p><p>If a desired field value has been modified in the abstraction class without actually updating the field in the DUT, the state of the DUT (more specifically what the abstraction class <i>thinks</i> the state of the DUT is) is outdated. This method returns TRUE if the state of the field in the DUT needs to be updated to match the desired value. The mirror values or actual content of DUT field are not modified. Use the <link target="uvm_reg::update()" name="uvm_reg::update()" original="&lt; uvm_reg::update() &gt;"> to actually update the DUT field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: write
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::write)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Write the specified value in this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Write the specified value in this field</p><p>Write <i>value</i> in the DUT field that corresponds to this abstraction class instance using the specified access <i>path</i>. If the register containing this field is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access). If a back-door access path is used, the effect of writing the field through a physical access is mimicked. For example, read-only bits in the field will not be written.</p><p>The mirrored value will be updated using the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method.</p><p>If a front-door access is used, and if the field is the only field in a byte lane and if the physical interface corresponding to the address map used to access the field support byte-enabling, then only the field is written. Otherwise, the entire register containing the field is written, and the mirrored values of the other fields in the same register are used in a best-effort not to modify their value.</p><p>If a backdoor access is used, a peek-modify-poke process is used. in a best-effort not to modify the value of the other fields in the register.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: read
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::read)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Read the current value from this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Read the current value from this field</p><p>Read and return <i>value</i> from the DUT field that corresponds to this abstraction class instance using the specified access <i>path</i>. If the register containing this field is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access). If a back-door access path is used, the effect of reading the field through a physical access is mimicked. For example, clear-on-read bits in the filed will be set to zero.</p><p>The mirrored value will be updated using the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method.</p><p>If a front-door access is used, and if the field is the only field in a byte lane and if the physical interface corresponding to the address map used to access the field support byte-enabling, then only the field is read. Otherwise, the entire register containing the field is read, and the mirrored values of the other fields in the same register are updated.</p><p>If a backdoor access is used, the entire containing register is peeked and the mirrored value of the other fields in the register is updated.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: poke
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::poke)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Deposit the specified value in this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Deposit the specified value in this field</p><p>Deposit the value in the DUT field corresponding to this abstraction class instance, as-is, using a back-door access. A peek-modify-poke process is used in a best-effort not to modify the value of the other fields in the register.</p><p>The mirrored value will be updated using the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: peek
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::peek)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Read the current value from this field)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Read the current value from this field</p><p>Sample the value in the DUT field corresponding to this absraction class instance using a back-door access. The field value is sampled, not modified.</p><p>Uses the HDL path for the design abstraction specified by <i>kind</i>.</p><p>The entire containing register is peeked and the mirrored value of the other fields in the register are updated using the <link target="uvm_reg_field::predict()" name="uvm_reg_field::predict()" original="&lt; uvm_reg_field::predict() &gt;"> method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: mirror
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::mirror)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Read the field and update/check its mirror value)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Read the field and update/check its mirror value</p><p>Read the field and optionally compared the readback value with the current mirrored value if <i>check</i> is <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">. The mirrored value will be updated using the <link target="predict()" name="predict()" original="&lt; predict() &gt;"> method based on the readback value.</p><p>The <i>path</i> argument specifies whether to mirror using the  <link target="UVM_FRONTDOOR" name="UVM_FRONTDOOR" original="&lt; UVM_FRONTDOOR &gt;"> (<link target="read" name="read" original="&lt; read &gt;">) or or <link target="UVM_BACKDOOR" name="UVM_BACKDOOR" original="&lt; UVM_BACKDOOR &gt;"> (<link target="peek()" name="peek()" original="&lt; peek() &gt;">).</p><p>If <i>check</i> is specified as <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">, an error message is issued if the current mirrored value does not match the readback value, unless <link target="set_compare" name="set_compare" original="&lt; set_compare &gt;"> was used disable the check.</p><p>If the containing register is mapped in multiple address maps and physical access is used (front-door access), an address <i>map</i> must be specified. For write-only fields, their content is mirrored and optionally checked only if a UVM_BACKDOOR access path is used to read the field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: set_compare
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::set_compare)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Sets the compare policy during a mirror update. )
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Sets the compare policy during a mirror update. The field value is checked against its mirror only when both the <i>check</i> argument in <link target="uvm_reg_block::mirror" name="uvm_reg_block::mirror" original="&lt; uvm_reg_block::mirror &gt;">, <link target="uvm_reg::mirror" name="uvm_reg::mirror" original="&lt; uvm_reg::mirror &gt;">, or <link target="uvm_reg_field::mirror" name="uvm_reg_field::mirror" original="&lt; uvm_reg_field::mirror &gt;"> and the compare policy for the field is <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: get_compare
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::get_compare)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Returns the compare policy for this field.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Returns the compare policy for this field.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: is_indv_accessible
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::is_indv_accessible)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Check if this field can be written individually, i.e. )
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Check if this field can be written individually, i.e. without affecting other fields in the containing register.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: predict
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::predict)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Function)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Update the mirrored value for this field.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Update the mirrored value for this field.</p><p>Predict the mirror value of the field based on the specified observed <i>value</i> on a bus using the specified address <i>map</i>.</p><p>If <i>kind</i> is specified as <link target="UVM_PREDICT_READ" name="UVM_PREDICT_READ" original="&lt; UVM_PREDICT_READ &gt;">, the value was observed in a read transaction on the specified address <i>map</i> or backdoor (if <i>path</i> is <link target="UVM_BACKDOOR" name="UVM_BACKDOOR" original="&lt; UVM_BACKDOOR &gt;">). If <i>kind</i> is specified as <link target="UVM_PREDICT_WRITE" name="UVM_PREDICT_WRITE" original="&lt; UVM_PREDICT_WRITE &gt;">, the value was observed in a write transaction on the specified address <i>map</i> or backdoor (if <i>path</i> is <link target="UVM_BACKDOOR" name="UVM_BACKDOOR" original="&lt; UVM_BACKDOOR &gt;">). If <i>kind</i> is specified as <link target="UVM_PREDICT_DIRECT" name="UVM_PREDICT_DIRECT" original="&lt; UVM_PREDICT_DIRECT &gt;">, the value was computed and is updated as-is, without regard to any access policy. For example, the mirrored value of a read-only field is modified by this method if <i>kind</i> is specified as <link target="UVM_PREDICT_DIRECT" name="UVM_PREDICT_DIRECT" original="&lt; UVM_PREDICT_DIRECT &gt;">.</p><p>This method does not allow an update of the mirror when the register containing this field is busy executing a transaction because the results are unpredictable and indicative of a race condition in the testbench.</p><p>Returns TRUE if the prediction was succesful.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: Callbacks
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(Callbacks)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Group)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary()
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body()
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: pre_write
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::pre_write)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Called before field write.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Called before field write.</p><p>If the specified data value, access <i>path</i> or address <i>map</i> are modified, the updated data value, access path or address map will be used to perform the register operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The field callback methods are invoked after the callback methods on the containing register. The registered callback methods are invoked after the invocation of this method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: post_write
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::post_write)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Called after field write.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Called after field write.</p><p>If the specified <i>status</i> is modified, the updated status will be returned by the register operation.</p><p>The field callback methods are invoked after the callback methods on the containing register. The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: pre_read
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::pre_read)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Called before field read.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Called before field read.</p><p>If the access <i>path</i> or address <i>map</i> in the <i>rw</i> argument are modified, the updated access path or address map will be used to perform the register operation. If the <i>status</i> is modified to anything other than <link target="UVM_IS_OK" name="UVM_IS_OK" original="&lt; UVM_IS_OK &gt;">, the operation is aborted.</p><p>The field callback methods are invoked after the callback methods on the containing register. The registered callback methods are invoked after the invocation of this method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicTitle: post_read
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] | [uvm_reg_field] | | QualifiedName(uvm_pkg::uvm_reg_field::post_read)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | TopicType(task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Keyword(Task)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | NumChilderen(0)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Summary(Called after field read.)
| | [uvm_reg_field.svh] | [uvm_reg_field] | | Body(<p>Called after field read.</p><p>If the specified readback data or~status~ in the <i>rw</i> argument is modified, the updated readback data or status will be returned by the register operation.</p><p>The field callback methods are invoked after the callback methods on the containing register. The registered callback methods are invoked before the invocation of this method.</p>)
| | [uvm_reg_field.svh] | [uvm_reg_field] | +-------------------------------------------------------------------
| | [uvm_reg_field.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_fifo.svh
| +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | TopicTitle: uvm_reg_fifo
| | [uvm_reg_fifo.svh] +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | QualifiedName(uvm_pkg::uvm_reg_fifo)
| | [uvm_reg_fifo.svh] | TopicType(class)
| | [uvm_reg_fifo.svh] | Keyword(Class)
| | [uvm_reg_fifo.svh] | NumChilderen(18)
| | [uvm_reg_fifo.svh] | Summary(This special register models a DUT FIFO accessed via write/read, where writes push to the FIFO and reads pop from it.)
| | [uvm_reg_fifo.svh] | Body(<p>This special register models a DUT FIFO accessed via write/read, where writes push to the FIFO and reads pop from it.</p><p>Backdoor access is not enabled, as it is not yet possible to force complete FIFO state, i.e. the write and read indexes used to access the FIFO data.</p>)
| | [uvm_reg_fifo.svh] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | | Children
| | [uvm_reg_fifo.svh] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: fifo
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::fifo)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(variable)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Variable)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(The abstract representation of the FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>The abstract representation of the FIFO. Constrained to be no larger than the size parameter. It is public to enable subtypes to add constraints on it and randomize.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: Initialization
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(Initialization)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: new
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::new)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Creates an instance of a FIFO register having <i>size</i> elements of <i>n_bits</i> each.)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Creates an instance of a FIFO register having <i>size</i> elements of <i>n_bits</i> each.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: set_compare
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::set_compare)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Sets the compare policy during a mirror (read) of the DUT FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Sets the compare policy during a mirror (read) of the DUT FIFO. The DUT read value is checked against its mirror only when both the <i>check</i> argument in the <link target="mirror()" name="mirror()" original="&lt; mirror() &gt;"> call and the compare policy for the field is <link target="UVM_CHECK" name="UVM_CHECK" original="&lt; UVM_CHECK &gt;">.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: Introspection
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(Introspection)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: size
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::size)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(The number of entries currently in the FIFO.)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>The number of entries currently in the FIFO.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: capacity
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::capacity)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(The maximum number of entries, or depth, of the FIFO.)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>The maximum number of entries, or depth, of the FIFO.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: Access
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(Access)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: write
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(write)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Pushes the given value to the DUT FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Pushes the given value to the DUT FIFO. If auto-predition is enabled, the written value is also pushed to the abstract FIFO before the call returns. If auto-prediction is not enabled (see <link target="uvm_map::set_auto_predict" name="uvm_map::set_auto_predict" original="&lt; uvm_map::set_auto_predict &gt;">), the value is pushed to abstract FIFO only when the write operation is observed on the target bus. This mode requires using the <link target="uvm_reg_predictor #(BUSTYPE)" name="uvm_reg_predictor #(BUSTYPE)" original="&lt; uvm_reg_predictor #(BUSTYPE) &gt;"> class. If the write is via an <link target="update()" name="update()" original="&lt; update() &gt;"> operation, the abstract FIFO already contains the written value and is thus not affected by either prediction mode.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: read
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(read)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Reads the next value out of the DUT FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Reads the next value out of the DUT FIFO. If auto-prediction is enabled, the frontmost value in abstract FIFO is popped.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: set
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::set)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Pushes the given value to the abstract FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Pushes the given value to the abstract FIFO. You may call this method several times before an <link target="update()" name="update()" original="&lt; update() &gt;"> as a means of preloading the DUT FIFO. Calls to <i>set()</i> to a full FIFO are ignored. You must call <link target="update()" name="update()" original="&lt; update() &gt;"> to update the DUT FIFO with your set values.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: update
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::update)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Pushes (writes) all values preloaded using <link target="set(()&gt; to the DUT" name="set(()&gt; to the DUT" original="&lt; set(()&gt; to the DUT &gt;">. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Pushes (writes) all values preloaded using <link target="set(()&gt; to the DUT" name="set(()&gt; to the DUT" original="&lt; set(()&gt; to the DUT &gt;">. You must <i>update</i> after <i>set</i> before any blocking statements, else other reads/writes to the DUT FIFO may cause the mirror to become out of sync with the DUT.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: mirror
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(mirror)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Reads the next value out of the DUT FIFO. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Reads the next value out of the DUT FIFO. If auto-prediction is enabled, the frontmost value in abstract FIFO is popped. If the <i>check</i> argument is set and comparison is enabled with <link target="set_compare()" name="set_compare()" original="&lt; set_compare() &gt;">.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: get
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::get)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Returns the next value from the abstract FIFO, but does not pop it. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Returns the next value from the abstract FIFO, but does not pop it. Used to get the expected value in a <link target="mirror()" name="mirror()" original="&lt; mirror() &gt;"> operation.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: do_predict
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::do_predict)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Function)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Updates the abstract (mirror) FIFO based on <link target="write()" name="write()" original="&lt; write() &gt;"> and <link target="read()" name="read()" original="&lt; read() &gt;"> operations. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Updates the abstract (mirror) FIFO based on <link target="write()" name="write()" original="&lt; write() &gt;"> and <link target="read()" name="read()" original="&lt; read() &gt;"> operations.  When auto-prediction is on, this method is called before each read, write, peek, or poke operation returns. When auto-prediction is off, this method is called by a <link target="uvm_reg_predictor" name="uvm_reg_predictor" original="&lt; uvm_reg_predictor &gt;"> upon receipt and conversion of an observed bus operation to this register.</p><p>If a write prediction, the observed write value is pushed to the abstract FIFO as long as it is not full and the operation did not originate from an <link target="update()" name="update()" original="&lt; update() &gt;">. If a read prediction, the observed read value is compared with the frontmost value in the abstract FIFO if <link target="set_compare()" name="set_compare()" original="&lt; set_compare() &gt;"> enabled comparison and the FIFO is not empty.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: Special Overrides
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(Special Overrides)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Group)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body()
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: pre_write
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::pre_write)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(task)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Task)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Special pre-processing for a <link target="write()" name="write()" original="&lt; write() &gt;"> or <link target="update()" name="update()" original="&lt; update() &gt;">. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Special pre-processing for a <link target="write()" name="write()" original="&lt; write() &gt;"> or <link target="update()" name="update()" original="&lt; update() &gt;">. Called as a result of a <link target="write()" name="write()" original="&lt; write() &gt;"> or <link target="update()" name="update()" original="&lt; update() &gt;">. It is an error to attempt a write to a full FIFO or a write while an update is still pending. An update is pending after one or more calls to <link target="set()" name="set()" original="&lt; set() &gt;">. If in your application the DUT allows writes to a full FIFO, you must override <i>pre_write</i> as appropriate.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicTitle: pre_read
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | QualifiedName(uvm_pkg::uvm_reg_fifo::pre_read)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | TopicType(task)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Keyword(Task)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | NumChilderen(0)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Summary(Special post-processing for a <link target="write()" name="write()" original="&lt; write() &gt;"> or <link target="update()" name="update()" original="&lt; update() &gt;">. )
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | | Body(<p>Special post-processing for a <link target="write()" name="write()" original="&lt; write() &gt;"> or <link target="update()" name="update()" original="&lt; update() &gt;">. Aborts the operation if the internal FIFO is empty. If in your application the DUT does not behave this way, you must override <i>pre_write</i> as appropriate.</p>)
| | [uvm_reg_fifo.svh] | [uvm_reg_fifo] | +-------------------------------------------------------------------
| | [uvm_reg_fifo.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_file.svh
| +-------------------------------------------------------------------
| | [uvm_reg_file.svh] +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | TopicTitle: uvm_reg_file
| | [uvm_reg_file.svh] +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | QualifiedName(uvm_pkg::uvm_reg_file)
| | [uvm_reg_file.svh] | TopicType(class)
| | [uvm_reg_file.svh] | Keyword(CLASS)
| | [uvm_reg_file.svh] | NumChilderen(16)
| | [uvm_reg_file.svh] | Summary(Register file abstraction base class)
| | [uvm_reg_file.svh] | Body(<p>Register file abstraction base class</p><p>A register file is a collection of register files and registers used to create regular repeated structures.</p><p>Register files are usually instantiated as arrays.</p>)
| | [uvm_reg_file.svh] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | | Children
| | [uvm_reg_file.svh] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: Initialization
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(Initialization)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary()
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body()
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: new
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::new)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Create a new instance)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Create a new instance</p><p>Creates an instance of a register file abstraction class with the specified name.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: configure
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::configure)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Configure a register file instance)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Configure a register file instance</p><p>Specify the parent block and register file of the register file instance. If the register file is instantiated in a block, <i>regfile_parent</i> is specified as <i>null</i>. If the register file is instantiated in a register file, <i>blk_parent</i> must be the block parent of that register file and <i>regfile_parent</i> is specified as that register file.</p><p>If the register file corresponds to a hierarchical RTL structure, it's contribution to the HDL path is specified as the <i>hdl_path</i>. Otherwise, the register file does not correspond to a hierarchical RTL structure (e.g. it is physically flattened) and does not contribute to the hierarchical HDL path of any contained registers.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: Introspection
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(Introspection)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary()
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body()
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_name
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(get_name)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the simple name)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the simple name</p><p>Return the simple object name of this register file.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_full_name
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_full_name)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the hierarchical name)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this register file. The base of the hierarchical name is the root block.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_parent
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_parent)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the parent block)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the parent block</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_regfile
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_regfile)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the parent register file)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the parent register file</p><p>Returns <i>null</i> if this register file is instantiated in a block.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: Backdoor
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(Backdoor)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Group)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary()
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body()
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: clear_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::clear_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Delete HDL paths)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Delete HDL paths</p><p>Remove any previously specified HDL path to the register file instance for the specified design abstraction.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: add_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::add_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Add an HDL path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Add an HDL path</p><p>Add the specified HDL path to the register file instance for the specified design abstraction. This method may be called more than once for the same design abstraction if the register file is physically duplicated in the design abstraction</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: has_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::has_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Check if a HDL path is specified)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Check if a HDL path is specified</p><p>Returns TRUE if the register file instance has a HDL path defined for the specified design abstraction. If no design abstraction is specified, uses the default design abstraction specified for the nearest enclosing register file or block</p><p>If no design asbtraction is specified, the default design abstraction for this register file is used.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the incremental HDL path(s))
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the incremental HDL path(s)</p><p>Returns the HDL path(s) defined for the specified design abstraction in the register file instance. If no design abstraction is specified, uses the default design abstraction specified for the nearest enclosing register file or block. Returns only the component of the HDL paths that corresponds to the register file, not a full hierarchical path</p><p>If no design asbtraction is specified, the default design abstraction for this register file is used.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_full_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_full_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the full hierarchical HDL path(s))
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the full hierarchical HDL path(s)</p><p>Returns the full hierarchical HDL path(s) defined for the specified design abstraction in the register file instance. If no design abstraction is specified, uses the default design abstraction specified for the nearest enclosing register file or block. There may be more than one path returned even if only one path was defined for the register file instance, if any of the parent components have more than one path defined for the same design abstraction</p><p>If no design asbtraction is specified, the default design abstraction for each ancestor register file or block is used to get each incremental path.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: set_default_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::set_default_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Set the default design abstraction)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Set the default design abstraction</p><p>Set the default design abstraction for this register file instance.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicTitle: get_default_hdl_path
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] | [uvm_reg_file] | | QualifiedName(uvm_pkg::uvm_reg_file::get_default_hdl_path)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | TopicType(function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Keyword(Function)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | NumChilderen(0)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Summary(Get the default design abstraction)
| | [uvm_reg_file.svh] | [uvm_reg_file] | | Body(<p>Get the default design abstraction</p><p>Returns the default design abstraction for this register file instance. If a default design abstraction has not been explicitly set for this register file instance, returns the default design absraction for the nearest register file or block ancestor. Returns &quot;&quot; if no default design abstraction has been specified.</p>)
| | [uvm_reg_file.svh] | [uvm_reg_file] | +-------------------------------------------------------------------
| | [uvm_reg_file.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_hw_reset_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | TopicTitle: uvm_reg_hw_reset_seq
| | [uvm_reg_hw_reset_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_hw_reset_seq)
| | [uvm_reg_hw_reset_seq.svh] | TopicType(class)
| | [uvm_reg_hw_reset_seq.svh] | Keyword(class)
| | [uvm_reg_hw_reset_seq.svh] | NumChilderen(3)
| | [uvm_reg_hw_reset_seq.svh] | Summary(Test the hard reset values of registers)
| | [uvm_reg_hw_reset_seq.svh] | Body(<p>Test the hard reset values of registers</p><p>The test sequence performs the following steps</p><p>1. resets the DUT and the block abstraction class associated with this sequence.</p><p>2. reads all of the registers in the block, via all of the available address maps, comparing the value read with the expected reset value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_HW_RESET_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block or register, the block or register is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote><p>This is usually the first test executed on any DUT.</p>)
| | [uvm_reg_hw_reset_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | | Children
| | [uvm_reg_hw_reset_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicTitle: model
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | QualifiedName(model)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicType(variable)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Keyword(Variable)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | NumChilderen(0)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Summary(The block to be tested. )
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicTitle: body
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | QualifiedName(uvm_pkg::uvm_reg_hw_reset_seq::body)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicType(variable)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Keyword(Variable)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | NumChilderen(0)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Summary(Executes the Hardware Reset sequence. )
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Body(<p>Executes the Hardware Reset sequence. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicTitle: reset_blk
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | QualifiedName(uvm_pkg::uvm_reg_hw_reset_seq::reset_blk)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | TopicType(task)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Keyword(task)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | NumChilderen(0)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_reg_hw_reset_seq.svh] | [uvm_reg_hw_reset_seq] | +-------------------------------------------------------------------
| | [uvm_reg_hw_reset_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_indirect.svh
| +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | TopicTitle: uvm_reg_indirect_data
| | [uvm_reg_indirect.svh] +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | QualifiedName(uvm_pkg::uvm_reg_indirect_data)
| | [uvm_reg_indirect.svh] | TopicType(class)
| | [uvm_reg_indirect.svh] | Keyword(CLASS)
| | [uvm_reg_indirect.svh] | NumChilderen(2)
| | [uvm_reg_indirect.svh] | Summary(Indirect data access abstraction class)
| | [uvm_reg_indirect.svh] | Body(<p>Indirect data access abstraction class</p><p>Models the behavior of a register used to indirectly access a register array, indexed by a second <i>address</i> register.</p><p>This class should not be instantiated directly. A type-specific class extension should be used to provide a factory-enabled constructor and specify the <i>n_bits</i> and coverage models.</p>)
| | [uvm_reg_indirect.svh] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | | Children
| | [uvm_reg_indirect.svh] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | TopicTitle: new
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | QualifiedName(uvm_pkg::uvm_reg_indirect_data::new)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | TopicType(function)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Keyword(Function)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | NumChilderen(0)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Summary(Create an instance of this class)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Body(<p>Create an instance of this class</p><p>Should not be called directly, other than via super.new(). The value of <i>n_bits</i> must match the number of bits in the indirect register array.</p>)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | TopicTitle: configure
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | QualifiedName(uvm_pkg::uvm_reg_indirect_data::configure)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | TopicType(function)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Keyword(Function)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | NumChilderen(0)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Summary(Configure the indirect data register.)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | | Body(<p>Configure the indirect data register.</p><p>The <i>idx</i> register specifies the index, in the <i>reg_a</i> register array, of the register to access. The <i>idx</i> must be written to first. A read or write operation to this register will subsequently read or write the indexed register in the register array.</p><p>The number of bits in each register in the register array must be equal to <i>n_bits</i> of this register.</p><p>See <link target="uvm_reg::configure()" name="uvm_reg::configure()" original="&lt; uvm_reg::configure() &gt;"> for the remaining arguments.</p>)
| | [uvm_reg_indirect.svh] | [uvm_reg_indirect_data] | +-------------------------------------------------------------------
| | [uvm_reg_indirect.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_item.svh
| +-------------------------------------------------------------------
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | TopicTitle: Generic Register Operation Descriptors
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | QualifiedName(Generic Register Operation Descriptors)
| | [uvm_reg_item.svh] | TopicType(section)
| | [uvm_reg_item.svh] | Keyword(Title)
| | [uvm_reg_item.svh] | NumChilderen(0)
| | [uvm_reg_item.svh] | Summary(This section defines the abtract register transaction item. )
| | [uvm_reg_item.svh] | Body(<p>This section defines the abtract register transaction item. It also defines a descriptor for a physical bus operation that is used by <link target="uvm_reg_adapter" name="uvm_reg_adapter" original="&lt; uvm_reg_adapter &gt;"> subtypes to convert from a protocol-specific address/data/rw operation to a bus-independent, canonical r/w operation.</p>)
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | TopicTitle: uvm_reg_item
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | QualifiedName(uvm_pkg::uvm_reg_item)
| | [uvm_reg_item.svh] | TopicType(class)
| | [uvm_reg_item.svh] | Keyword(CLASS)
| | [uvm_reg_item.svh] | NumChilderen(18)
| | [uvm_reg_item.svh] | Summary(Defines an abstract register transaction item. )
| | [uvm_reg_item.svh] | Body(<p>Defines an abstract register transaction item. No bus-specific information is present, although a handle to a <link target="uvm_reg_map" name="uvm_reg_map" original="&lt; uvm_reg_map &gt;"> is provided in case a user wishes to implement a custom address translation algorithm.</p>)
| | [uvm_reg_item.svh] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | | Children
| | [uvm_reg_item.svh] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: element_kind
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::element_kind)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Kind of element being accessed: REG, MEM, or FIELD. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Kind of element being accessed: REG, MEM, or FIELD. See <link target="uvm_elem_kind_e" name="uvm_elem_kind_e" original="&lt; uvm_elem_kind_e &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: element
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::element)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(A handle to the RegModel model element associated with this transaction. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>A handle to the RegModel model element associated with this transaction. Use <link target="element_kind" name="element_kind" original="&lt; element_kind &gt;"> to determine the type to cast  to: <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;">, <link target="uvm_mem" name="uvm_mem" original="&lt; uvm_mem &gt;">, or <link target="uvm_reg_field" name="uvm_reg_field" original="&lt; uvm_reg_field &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: kind
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::kind)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Kind of access: READ or WRITE.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Kind of access: READ or WRITE.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: value
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::value)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The value to write to, or after completion, the value read from the DUT. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The value to write to, or after completion, the value read from the DUT. Burst operations use the <link target="values" name="values" original="&lt; values &gt;"> property.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: offset
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::offset)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(For memory accesses, the offset address. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>For memory accesses, the offset address. For bursts, the <i>starting</i> offset address.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: status
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::status)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The result of the transaction: IS_OK, HAS_X, or ERROR. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The result of the transaction: IS_OK, HAS_X, or ERROR. See <link target="uvm_status_e" name="uvm_status_e" original="&lt; uvm_status_e &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: local_map
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::local_map)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The local map used to obtain addresses. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The local map used to obtain addresses. Users may customize address-translation using this map. Access to the sequencer and bus adapter can be obtained by getting this map's root map, then calling <link target="uvm_reg_map::get_sequencer" name="uvm_reg_map::get_sequencer" original="&lt; uvm_reg_map::get_sequencer &gt;"> and <link target="uvm_reg_map::get_adapter" name="uvm_reg_map::get_adapter" original="&lt; uvm_reg_map::get_adapter &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: map
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::map)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The original map specified for the operation. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The original map specified for the operation. The actual <link target="map" name="map" original="&lt; map &gt;"> used may differ when a test or sequence written at the block level is reused at the system level.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: path
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::path)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The path being used: <link target="UVM_FRONTDOOR" name="UVM_FRONTDOOR" original="&lt; UVM_FRONTDOOR &gt;"> or <link target="UVM_BACKDOOR" name="UVM_BACKDOOR" original="&lt; UVM_BACKDOOR &gt;">.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The path being used: <link target="UVM_FRONTDOOR" name="UVM_FRONTDOOR" original="&lt; UVM_FRONTDOOR &gt;"> or <link target="UVM_BACKDOOR" name="UVM_BACKDOOR" original="&lt; UVM_BACKDOOR &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: parent
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::parent)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The sequence from which the operation originated.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The sequence from which the operation originated.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: prior
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::prior)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The priority requested of this transfer, as defined by <link target="uvm_sequence_base::start_item" name="uvm_sequence_base::start_item" original="&lt; uvm_sequence_base::start_item &gt;">.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The priority requested of this transfer, as defined by <link target="uvm_sequence_base::start_item" name="uvm_sequence_base::start_item" original="&lt; uvm_sequence_base::start_item &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: extension
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::extension)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Handle to optional user data, as conveyed in the call to write(), read(), mirror(), or update() used to trigger the operation.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Handle to optional user data, as conveyed in the call to write(), read(), mirror(), or update() used to trigger the operation.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: bd_kind
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::bd_kind)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(If path is UVM_BACKDOOR, this member specifies the abstraction kind for the backdoor access, e.g. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>If path is UVM_BACKDOOR, this member specifies the abstraction kind for the backdoor access, e.g. &quot;RTL&quot; or &quot;GATES&quot;.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: fname
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::fname)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The file name from where this transaction originated, if provided at the call site.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The file name from where this transaction originated, if provided at the call site.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: lineno
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::lineno)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(The file name from where this transaction originated, if provided at the call site.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>The file name from where this transaction originated, if provided at the call site.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: new
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::new)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Create a new instance of this type, giving it the optional <i>name</i>.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Create a new instance of this type, giving it the optional <i>name</i>.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: convert2string
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::convert2string)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Returns a string showing the contents of this transaction.)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Returns a string showing the contents of this transaction.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicTitle: do_copy
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_item] | | QualifiedName(uvm_pkg::uvm_reg_item::do_copy)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | TopicType(function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Keyword(Function)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Summary(Copy the <i>rhs</i> object into this object. )
| | [uvm_reg_item.svh] | [uvm_reg_item] | | Body(<p>Copy the <i>rhs</i> object into this object. The <i>rhs</i> object must derive from <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_item] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | TopicTitle: uvm_reg_bus_op
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | QualifiedName(uvm_reg_bus_op)
| | [uvm_reg_item.svh] | TopicType(class)
| | [uvm_reg_item.svh] | Keyword(CLASS)
| | [uvm_reg_item.svh] | NumChilderen(6)
| | [uvm_reg_item.svh] | Summary(Struct that defines a generic bus transaction for register and memory accesses, having <i>kind</i> (read or write), <i>address</i>, <i>data</i>, and <i>byte enable</i> information. )
| | [uvm_reg_item.svh] | Body(<p>Struct that defines a generic bus transaction for register and memory accesses, having <i>kind</i> (read or write), <i>address</i>, <i>data</i>, and <i>byte enable</i> information. If the bus is narrower than the register or memory location being accessed, there will be multiple of these bus operations for every abstract <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> transaction. In this case, <i>data</i> represents the portion of <link target="uvm_reg_item::value" name="uvm_reg_item::value" original="&lt; uvm_reg_item::value &gt;"> being transferred during this bus cycle. If the bus is wide enough to perform the register or memory operation in a single cycle, <i>data</i> will be the same as <link target="uvm_reg_item::value" name="uvm_reg_item::value" original="&lt; uvm_reg_item::value &gt;">.</p>)
| | [uvm_reg_item.svh] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | | Children
| | [uvm_reg_item.svh] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: kind
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(kind)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(Kind of access: READ or WRITE.)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>Kind of access: READ or WRITE.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: addr
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(addr)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(The bus address.)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>The bus address.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: data
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(data)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(The data to write. )
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>The data to write. If the bus width is smaller than the register or memory width, <i>data</i> represents only the portion of <i>value</i> that is being transferred this bus cycle.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: n_bits
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(n_bits)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(The number of bits of <link target="uvm_reg_item::value" name="uvm_reg_item::value" original="&lt; uvm_reg_item::value &gt;"> being transferred by this transaction.)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>The number of bits of <link target="uvm_reg_item::value" name="uvm_reg_item::value" original="&lt; uvm_reg_item::value &gt;"> being transferred by this transaction.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: byte_en
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(byte_en)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(Enables for the byte lanes on the bus. )
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>Enables for the byte lanes on the bus. Meaningful only when the bus supports byte enables and the operation originates from a field write/read.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicTitle: status
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | QualifiedName(status)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | TopicType(variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Keyword(Variable)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | NumChilderen(0)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Summary(The result of the transaction: UVM_IS_OK, UVM_HAS_X, UVM_NOT_OK. )
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | | Body(<p>The result of the transaction: UVM_IS_OK, UVM_HAS_X, UVM_NOT_OK. See <link target="uvm_status_e" name="uvm_status_e" original="&lt; uvm_status_e &gt;">.</p>)
| | [uvm_reg_item.svh] | [uvm_reg_bus_op] | +-------------------------------------------------------------------
| | [uvm_reg_item.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_map.svh
| +-------------------------------------------------------------------
| | [uvm_reg_map.svh] +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | TopicTitle: uvm_reg_map
| | [uvm_reg_map.svh] +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | QualifiedName(uvm_pkg::uvm_reg_map)
| | [uvm_reg_map.svh] | TopicType(class)
| | [uvm_reg_map.svh] | Keyword(Class)
| | [uvm_reg_map.svh] | NumChilderen(41)
| | [uvm_reg_map.svh] | Summary()
| | [uvm_reg_map.svh] | Body(<blockquote><pre>Address map abstraction class
</pre></blockquote><p>This class represents an address map. An address map is a collection of registers and memories accessible via a specific physical interface. Address maps can be composed into higher-level address maps.</p><p>Address maps are created using the <link target="uvm_reg_block::create_map()" name="uvm_reg_block::create_map()" original="&lt; uvm_reg_block::create_map() &gt;"> method.</p>)
| | [uvm_reg_map.svh] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | | Children
| | [uvm_reg_map.svh] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: backdoor
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::backdoor)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Return the backdoor pseudo-map singleton)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Return the backdoor pseudo-map singleton</p><p>This pseudo-map is used to specify or configure the backdoor instead of a real address map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: Initialization
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(Initialization)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary()
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body()
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: new
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::new)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Create a new instance)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Create a new instance</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: configure
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::configure)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Instance-specific configuration)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Instance-specific configuration</p><p>Configures this map with the following properties.</p><dl><de> parent</de><dd>the block in which this map is created and applied</dd><de> base_addr</de><dd>the base address for this map. All registers, memories, and sub-blocks will be at offsets to this address</dd><de> n_bytes</de><dd>the byte-width of the bus on which this map is used</dd><de> endian</de><dd>the endian format. See <link target="uvm_endianness_e" name="uvm_endianness_e" original="&lt; uvm_endianness_e &gt;"> for possible values</dd><de> byte_addressing</de><dd>specifies whether the address increment is on a per-byte basis. For example, consecutive memory locations with ~n_bytes~=4 (32-bit bus) are 4 apart: 0, 4, 8, and so on. Default is TRUE.</dd></dl>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: add_reg
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::add_reg)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Add a register)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Add a register</p><p>Add the specified register instance <i>rg</i> to this address map.</p><p>The register is located at the specified address <i>offset</i> from this maps configured base address.</p><p>The <i>rights</i> specify the register's accessibility via this map. Valid values are &quot;RW&quot;, &quot;RO&quot;, and &quot;WO&quot;. Whether a register field can be read or written depends on both the field's configured access policy (see <link target="uvm_reg_field::configure" name="uvm_reg_field::configure" original="&lt; uvm_reg_field::configure &gt;"> and the register's rights in the map being used to access the field.</p><p>The number of consecutive physical addresses occupied by the register depends on the width of the register and the number of bytes in the physical interface corresponding to this address map.</p><p>If <i>unmapped</i> is TRUE, the register does not occupy any physical addresses and the base address is ignored. Unmapped registers require a user-defined <i>frontdoor</i> to be specified.</p><p>A register may be added to multiple address maps if it is accessible from multiple physical interfaces. A register may only be added to an address map whose parent block is the same as the register's parent block.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: add_mem
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::add_mem)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Add a memory)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Add a memory</p><p>Add the specified memory instance to this address map. The memory is located at the specified base address and has the specified access rights (&quot;RW&quot;, &quot;RO&quot; or &quot;WO&quot;). The number of consecutive physical addresses occupied by the memory depends on the width and size of the memory and the number of bytes in the physical interface corresponding to this address map.</p><p>If <i>unmapped</i> is TRUE, the memory does not occupy any physical addresses and the base address is ignored. Unmapped memorys require a user-defined <i>frontdoor</i> to be specified.</p><p>A memory may be added to multiple address maps if it is accessible from multiple physical interfaces. A memory may only be added to an address map whose parent block is the same as the memory's parent block.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: add_submap
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::add_submap)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Add an address map)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Add an address map</p><p>Add the specified address map instance to this address map. The address map is located at the specified base address. The number of consecutive physical addresses occupied by the submap depends on the number of bytes in the physical interface that corresponds to the submap, the number of addresses used in the submap and the number of bytes in the physical interface corresponding to this address map.</p><p>An address map may be added to multiple address maps if it is accessible from multiple physical interfaces. An address map may only be added to an address map in the grand-parent block of the address submap.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: set_sequencer
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::set_sequencer)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Set the sequencer and adapter associated with this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Set the sequencer and adapter associated with this map. This method <i>must</i> be called before starting any sequences based on uvm_reg_sequence.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: set_submap_offset
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::set_submap_offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Set the offset of the given <i>submap</i> to <i>offset</i>.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Set the offset of the given <i>submap</i> to <i>offset</i>.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_submap_offset
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_submap_offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Return the offset of the given <i>submap</i>.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Return the offset of the given <i>submap</i>.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: set_base_addr
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::set_base_addr)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Set the base address of this map.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Set the base address of this map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: reset
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::reset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Reset the mirror for all registers in this address map.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Reset the mirror for all registers in this address map.</p><p>Sets the mirror value of all registers in this address map and all of its submaps to the reset value corresponding to the specified reset event. See <link target="uvm_reg_field::reset()" name="uvm_reg_field::reset()" original="&lt; uvm_reg_field::reset() &gt;"> for more details. Does not actually set the value of the registers in the design, only the values mirrored in their corresponding mirror.</p><p>Note that, unlike the other reset() method, the default reset event for this method is &quot;SOFT&quot;.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: Introspection
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(Introspection)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary()
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body()
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_name
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(get_name)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the simple name)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the simple name</p><p>Return the simple object name of this address map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_full_name
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_full_name)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the hierarchical name)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this address map. The base of the hierarchical name is the root block.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_root_map
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_root_map)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the externally-visible address map)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the externally-visible address map</p><p>Get the top-most address map where this address map is instantiated. It corresponds to the externally-visible address map that can be accessed by the verification environment.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_parent
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_parent)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the parent block)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the parent block</p><p>Return the block that is the parent of this address map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_parent_map
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_parent_map)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the higher-level address map)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the higher-level address map</p><p>Return the address map in which this address map is mapped. returns <i>null</i> if this is a top-level address map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_base_addr
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_base_addr)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the base offset address for this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the base offset address for this map. If this map is the root map, the base address is that set with the <i>base_addr</i> argument to <link target="uvm_reg_block::create_map()" name="uvm_reg_block::create_map()" original="&lt; uvm_reg_block::create_map() &gt;">. If this map is a submap of a higher-level map, the base address is offset given this submap by the parent map. See <link target="set_submap_offset" name="set_submap_offset" original="&lt; set_submap_offset &gt;">.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_n_bytes
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_n_bytes)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the width in bytes of the bus associated with this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the width in bytes of the bus associated with this map. If <i>hier</i> is <i>UVM_HIER</i>, then gets the effective bus width relative to the system level. The effective bus width is the narrowest bus width from this map to the top-level root map. Each bus access will be limited to this bus width.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_addr_unit_bytes
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_addr_unit_bytes)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the number of bytes in the smallest addressable unit in the map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the number of bytes in the smallest addressable unit in the map. Returns 1 if the address map was configured using byte-level addressing. Returns <link target="get_n_bytes()" name="get_n_bytes()" original="&lt; get_n_bytes() &gt;"> otherwise.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_base_addr
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(get_base_addr)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Gets the endianness of the bus associated with this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Gets the endianness of the bus associated with this map. If <i>hier</i> is set to <i>UVM_HIER</i>, gets the system-level endianness.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_sequencer
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_sequencer)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Gets the sequencer for the bus associated with this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Gets the sequencer for the bus associated with this map. If <i>hier</i> is set to <i>UVM_HIER</i>, gets the sequencer for the bus at the system-level. See <link target="set_sequencer" name="set_sequencer" original="&lt; set_sequencer &gt;">.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_adapter
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_adapter)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Gets the bus adapter for the bus associated with this map. )
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Gets the bus adapter for the bus associated with this map. If <i>hier</i> is set to <i>UVM_HIER</i>, gets the adapter for the bus used at the system-level. See <link target="set_sequencer" name="set_sequencer" original="&lt; set_sequencer &gt;">.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_submaps
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_submaps)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the address sub-maps)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the address sub-maps</p><p>Get the address maps instantiated in this address map. If <i>hier</i> is <i>UVM_HIER</i>, recursively includes the address maps, in the sub-maps.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_registers
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_registers)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the registers)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the registers</p><p>Get the registers instantiated in this address map. If <i>hier</i> is <i>UVM_HIER</i>, recursively includes the registers in the sub-maps.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_fields
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_fields)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the fields)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the fields</p><p>Get the fields in the registers instantiated in this address map. If <i>hier</i> is <i>UVM_HIER</i>, recursively includes the fields of the registers in the sub-maps.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_virtual_registers
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_virtual_registers)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the virtual registers)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the virtual registers</p><p>Get the virtual registers instantiated in this address map. If <i>hier</i> is <i>UVM_HIER</i>, recursively includes the virtual registers in the sub-maps.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_virtual_fields
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_virtual_fields)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get the virtual fields)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get the virtual fields</p><p>Get the virtual fields from the virtual registers instantiated in this address map. If <i>hier</i> is <i>UVM_HIER</i>, recursively includes the virtual fields in the virtual registers in the sub-maps.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_physical_addresses
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_physical_addresses)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Translate a local address into external addresses)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Translate a local address into external addresses</p><p>Identify the sequence of addresses that must be accessed physically to access the specified number of bytes at the specified address within this address map. Returns the number of bytes of valid data in each access.</p><p>Returns in <i>addr</i> a list of address in little endian order, with the granularity of the top-level address map.</p><p>A register is specified using a base address with <i>mem_offset</i> as 0. A location within a memory is specified using the base address of the memory and the index of the location within that memory.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_reg_by_offset
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_reg_by_offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get register mapped at offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get register mapped at offset</p><p>Identify the register located at the specified offset within this address map for the specified type of access. Returns <i>null</i> if no such register is found.</p><p>The model must be locked using <link target="uvm_reg_block::lock_model()" name="uvm_reg_block::lock_model()" original="&lt; uvm_reg_block::lock_model() &gt;"> to enable this functionality.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_mem_by_offset
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_mem_by_offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Get memory mapped at offset)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Get memory mapped at offset</p><p>Identify the memory located at the specified offset within this address map. The offset may refer to any memory location in that memory. Returns <i>null</i> if no such memory is found.</p><p>The model must be locked using <link target="uvm_reg_block::lock_model()" name="uvm_reg_block::lock_model()" original="&lt; uvm_reg_block::lock_model() &gt;"> to enable this functionality.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: Bus Access
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(Bus Access)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Group)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary()
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body()
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: set_auto_predict
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::set_auto_predict)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Sets the auto-predict mode for his map.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Sets the auto-predict mode for his map.</p><p>When <i>on</i> is <i>TRUE</i>, the register model will automatically update its mirror (what it thinks should be in the DUT) immediately after any bus read or write operation via this map. Before a <link target="uvm_reg::write" name="uvm_reg::write" original="&lt; uvm_reg::write &gt;"> or <link target="uvm_reg::read" name="uvm_reg::read" original="&lt; uvm_reg::read &gt;"> operation returns, the register's <link target="uvm_reg::predict" name="uvm_reg::predict" original="&lt; uvm_reg::predict &gt;"> method is called to update the mirrored value in the register.</p><p>When <i>on</i> is <i>FALSE</i>, bus reads and writes via this map do not automatically update the mirror. For real-time updates to the mirror in this mode, you connect a <link target="uvm_reg_predictor" name="uvm_reg_predictor" original="&lt; uvm_reg_predictor &gt;"> instance to the bus monitor. The predictor takes observed bus transactions from the bus monitor, looks up the associated <link target="uvm_reg" name="uvm_reg" original="&lt; uvm_reg &gt;"> register given the address, then calls that register's <link target="uvm_reg::predict" name="uvm_reg::predict" original="&lt; uvm_reg::predict &gt;"> method. While more complex, this mode will capture all register read/write activity, including that not directly descendant from calls to <link target="uvm_reg::write" name="uvm_reg::write" original="&lt; uvm_reg::write &gt;"> and <link target="uvm_reg::read" name="uvm_reg::read" original="&lt; uvm_reg::read &gt;">.</p><p>By default, auto-prediction is turned off.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_auto_predict
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_auto_predict)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Gets the auto-predict mode setting for this map.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Gets the auto-predict mode setting for this map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: set_check_on_read
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::set_check_on_read)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Sets the check-on-read mode for his map and all of its submaps.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Sets the check-on-read mode for his map and all of its submaps.</p><p>When <i>on</i> is <i>TRUE</i>, the register model will automatically check any value read back from a register or field against the current value in its mirror and report any discrepancy. This effectively combines the functionality of the <link target="uvm_reg::read()" name="uvm_reg::read()" original="&lt; uvm_reg::read() &gt;"> and <link target="uvm_reg::mirror(UVM_CHECK)" name="uvm_reg::mirror(UVM_CHECK)" original="&lt; uvm_reg::mirror(UVM_CHECK) &gt;"> method. This mode is useful when the register model is used passively.</p><p>When <i>on</i> is <i>FALSE</i>, no check is made against the mirrored value.</p><p>At the end of the read operation, the mirror value is updated based on the value that was read reguardless of this mode setting.</p><p>By default, auto-prediction is turned off.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: get_check_on_read
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::get_check_on_read)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Function)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Gets the check-on-read mode setting for this map.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Gets the check-on-read mode setting for this map.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: do_bus_write
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::do_bus_write)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Perform a bus write operation.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Perform a bus write operation.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: do_bus_read
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::do_bus_read)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Perform a bus read operation.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Perform a bus read operation.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: do_write
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::do_write)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Perform a write operation.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Perform a write operation.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicTitle: do_read
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] | [uvm_reg_map] | | QualifiedName(uvm_pkg::uvm_reg_map::do_read)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | TopicType(task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Keyword(Task)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | NumChilderen(0)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Summary(Perform a read operation.)
| | [uvm_reg_map.svh] | [uvm_reg_map] | | Body(<p>Perform a read operation.</p>)
| | [uvm_reg_map.svh] | [uvm_reg_map] | +-------------------------------------------------------------------
| | [uvm_reg_map.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_built_in_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | TopicTitle: uvm_reg_mem_built_in_seq
| | [uvm_reg_mem_built_in_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_mem_built_in_seq)
| | [uvm_reg_mem_built_in_seq.svh] | TopicType(class)
| | [uvm_reg_mem_built_in_seq.svh] | Keyword(Class)
| | [uvm_reg_mem_built_in_seq.svh] | NumChilderen(3)
| | [uvm_reg_mem_built_in_seq.svh] | Summary(Sequence that executes a user-defined selection of pre-defined register and memory test sequences.)
| | [uvm_reg_mem_built_in_seq.svh] | Body(<p>Sequence that executes a user-defined selection of pre-defined register and memory test sequences.</p>)
| | [uvm_reg_mem_built_in_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | | Children
| | [uvm_reg_mem_built_in_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicTitle: model
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | QualifiedName(model)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicType(variable)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Keyword(Variable)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | NumChilderen(0)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Summary(The block to be tested. )
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Body(<p>The block to be tested. Declared in the base class.</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicTitle: tests
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_built_in_seq::tests)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicType(variable)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Keyword(Variable)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | NumChilderen(0)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Summary(The pre-defined test sequences to be executed.)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Body(<p>The pre-defined test sequences to be executed.</p>)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicTitle: body
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_built_in_seq::body)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | TopicType(task)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Keyword(Task)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | NumChilderen(0)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Summary(Executes any or all the built-in register and memory sequences. )
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | | Body(<p>Executes any or all the built-in register and memory sequences. Do not call directly. Use seq.start() instead.</p>)
| | [uvm_reg_mem_built_in_seq.svh] | [uvm_reg_mem_built_in_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_built_in_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_hdl_paths_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | TopicTitle: HDL Paths Checking Test Sequence
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | QualifiedName(HDL Paths Checking Test Sequence)
| | [uvm_reg_mem_hdl_paths_seq.svh] | TopicType(section)
| | [uvm_reg_mem_hdl_paths_seq.svh] | Keyword(TITLE)
| | [uvm_reg_mem_hdl_paths_seq.svh] | NumChilderen(0)
| | [uvm_reg_mem_hdl_paths_seq.svh] | Summary()
| | [uvm_reg_mem_hdl_paths_seq.svh] | Body()
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | TopicTitle: uvm_reg_mem_hdl_paths_seq
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_mem_hdl_paths_seq)
| | [uvm_reg_mem_hdl_paths_seq.svh] | TopicType(class)
| | [uvm_reg_mem_hdl_paths_seq.svh] | Keyword(class)
| | [uvm_reg_mem_hdl_paths_seq.svh] | NumChilderen(1)
| | [uvm_reg_mem_hdl_paths_seq.svh] | Summary(Verify the correctness of HDL paths specified for registers and memories.)
| | [uvm_reg_mem_hdl_paths_seq.svh] | Body(<p>Verify the correctness of HDL paths specified for registers and memories.</p><p>This sequence is be used to check that the specified backdoor paths are indeed accessible by the simulator. By default, the check is performed for the default design abstraction. If the simulation contains multiple models of the DUT, HDL paths for multiple design abstractions can be checked.</p><p>If a path is not accessible by the simulator, it cannot be used for read/write backdoor accesses. In that case a warning is produced. A simulator may have finer-grained access permissions such as separate read or write permissions. These extra access permissions are NOT checked.</p><p>The test is performed in zero time and does not require any reads/writes to/from the DUT.</p>)
| | [uvm_reg_mem_hdl_paths_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | | Children
| | [uvm_reg_mem_hdl_paths_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | TopicTitle: abstractions
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_hdl_paths_seq::abstractions)
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | TopicType(variable)
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | Keyword(Variable)
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | NumChilderen(0)
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | Summary(If set, check the HDL paths for the specified design abstractions. )
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | | Body(<p>If set, check the HDL paths for the specified design abstractions. If empty, check the HDL path for the default design abstraction, as specified with <link target="uvm_reg_block::set_default_hdl_path()" name="uvm_reg_block::set_default_hdl_path()" original="&lt; uvm_reg_block::set_default_hdl_path() &gt;"></p>)
| | [uvm_reg_mem_hdl_paths_seq.svh] | [uvm_reg_mem_hdl_paths_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_hdl_paths_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_mem_shared_access_seq.svh
| +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | TopicTitle: Shared Register and Memory Access Test Sequences
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | QualifiedName(Shared Register and Memory Access Test Sequences)
| | [uvm_reg_mem_shared_access_seq.svh] | TopicType(section)
| | [uvm_reg_mem_shared_access_seq.svh] | Keyword(Title)
| | [uvm_reg_mem_shared_access_seq.svh] | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | Summary(This section defines sequences for testing registers and memories that are shared between two or more physical interfaces, i.e. )
| | [uvm_reg_mem_shared_access_seq.svh] | Body(<p>This section defines sequences for testing registers and memories that are shared between two or more physical interfaces, i.e. are associated with more than one <link target="uvm_reg_map" name="uvm_reg_map" original="&lt; uvm_reg_map &gt;"> instance.</p>)
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | TopicTitle: uvm_reg_shared_access_seq
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_shared_access_seq)
| | [uvm_reg_mem_shared_access_seq.svh] | TopicType(class)
| | [uvm_reg_mem_shared_access_seq.svh] | Keyword(Class)
| | [uvm_reg_mem_shared_access_seq.svh] | NumChilderen(1)
| | [uvm_reg_mem_shared_access_seq.svh] | Summary(Verify the accessibility of a shared register by writing through each address map then reading it via every other address maps in which the register is readable and the backdoor, making sure that the resulting value matches the mirrored value.)
| | [uvm_reg_mem_shared_access_seq.svh] | Body(<p>Verify the accessibility of a shared register by writing through each address map then reading it via every other address maps in which the register is readable and the backdoor, making sure that the resulting value matches the mirrored value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot; or &quot;NO_REG_SHARED_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the register, the register is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.r0.get_full_name()},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote><p>Registers that contain fields with unknown access policies cannot be tested.</p><p>The DUT should be idle and not modify any register during this test.</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | | Children
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | TopicTitle: rg
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_shared_access_seq::rg)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | TopicType(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | Keyword(Variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | Summary(The register to be tested)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | | Body(<p>The register to be tested</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | TopicTitle: uvm_mem_shared_access_seq
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | QualifiedName(uvm_pkg::uvm_mem_shared_access_seq)
| | [uvm_reg_mem_shared_access_seq.svh] | TopicType(class)
| | [uvm_reg_mem_shared_access_seq.svh] | Keyword(Class)
| | [uvm_reg_mem_shared_access_seq.svh] | NumChilderen(1)
| | [uvm_reg_mem_shared_access_seq.svh] | Summary(Verify the accessibility of a shared memory by writing through each address map then reading it via every other address maps in which the memory is readable and the backdoor, making sure that the resulting value matches the written value.)
| | [uvm_reg_mem_shared_access_seq.svh] | Body(<p>Verify the accessibility of a shared memory by writing through each address map then reading it via every other address maps in which the memory is readable and the backdoor, making sure that the resulting value matches the written value.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, &quot;NO_REG_SHARED_ACCESS_TEST&quot; or &quot;NO_MEM_SHARED_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the memory, the memory is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.mem0.get_full_name()},
                           &quot;NO_MEM_TESTS&quot;, 1, this);
</pre></blockquote><p>The DUT should be idle and not modify the memory during this test.</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | | Children
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | TopicTitle: mem
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_mem_shared_access_seq::mem)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | TopicType(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | Keyword(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | Summary(The memory to be tested)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | | Body(<p>The memory to be tested</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | TopicTitle: uvm_reg_mem_shared_access_seq
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq)
| | [uvm_reg_mem_shared_access_seq.svh] | TopicType(class)
| | [uvm_reg_mem_shared_access_seq.svh] | Keyword(Class)
| | [uvm_reg_mem_shared_access_seq.svh] | NumChilderen(6)
| | [uvm_reg_mem_shared_access_seq.svh] | Summary(Verify the accessibility of all shared registers and memories in a block by executing the <link target="uvm_reg_shared_access_seq" name="uvm_reg_shared_access_seq" original="&lt; uvm_reg_shared_access_seq &gt;"> and <link target="uvm_mem_shared_access_seq" name="uvm_mem_shared_access_seq" original="&lt; uvm_mem_shared_access_seq &gt;"> sequence respectively on every register and memory within it.)
| | [uvm_reg_mem_shared_access_seq.svh] | Body(<p>Verify the accessibility of all shared registers and memories in a block by executing the <link target="uvm_reg_shared_access_seq" name="uvm_reg_shared_access_seq" original="&lt; uvm_reg_shared_access_seq &gt;"> and <link target="uvm_mem_shared_access_seq" name="uvm_mem_shared_access_seq" original="&lt; uvm_mem_shared_access_seq &gt;"> sequence respectively on every register and memory within it.</p><p>If bit-type resource named &quot;NO_REG_TESTS&quot;, &quot;NO_MEM_TESTS&quot;, &quot;NO_REG_SHARED_ACCESS_TEST&quot; or &quot;NO_MEM_SHARED_ACCESS_TEST&quot; in the &quot;REG::&quot; namespace matches the full name of the block, the block is not tested.</p><blockquote><pre>uvm_resource_db#(bit)::set({&quot;REG::&quot;,regmodel.blk.get_full_name(),&quot;.*&quot;},
                           &quot;NO_REG_TESTS&quot;, 1, this);
</pre></blockquote>)
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | | Children
| | [uvm_reg_mem_shared_access_seq.svh] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: model
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(model)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(Variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(The block to be tested)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>The block to be tested</p><blockquote><pre>uvm_reg_block model;</pre></blockquote>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: reg_seq
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq::reg_seq)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(Variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(The sequence used to test one register)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>The sequence used to test one register</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: mem_seq
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq::mem_seq)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(Variable)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(The sequence used to test one memory)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>The sequence used to test one memory</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: body
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq::body)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(Task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(Executes the Shared Register and Memory sequence)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>Executes the Shared Register and Memory sequence</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: do_block
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq::do_block)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(Task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(Test all of the registers and memories in a block)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>Test all of the registers and memories in a block</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicTitle: reset_blk
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | QualifiedName(uvm_pkg::uvm_reg_mem_shared_access_seq::reset_blk)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | TopicType(task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Keyword(task)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | NumChilderen(0)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Summary(Reset the DUT that corresponds to the specified block abstraction class.)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | | Body(<p>Reset the DUT that corresponds to the specified block abstraction class.</p><p>Currently empty. Will rollback the environment's phase to the <i>reset</i> phase once the new phasing is available.</p><p>In the meantime, the DUT should be reset before executing this test sequence or this method should be implemented in an extension to reset the DUT.</p>)
| | [uvm_reg_mem_shared_access_seq.svh] | [uvm_reg_mem_shared_access_seq] | +-------------------------------------------------------------------
| | [uvm_reg_mem_shared_access_seq.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_model.svh
| +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | TopicTitle: Global Declarations for the Register Layer
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | QualifiedName(Global Declarations for the Register Layer)
| | [uvm_reg_model.svh] | TopicType(section)
| | [uvm_reg_model.svh] | Keyword(TITLE)
| | [uvm_reg_model.svh] | NumChilderen(0)
| | [uvm_reg_model.svh] | Summary(This section defines globally available types, enums, and utility classes.)
| | [uvm_reg_model.svh] | Body(<p>This section defines globally available types, enums, and utility classes.</p>)
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | TopicTitle: Types
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | QualifiedName(Types)
| | [uvm_reg_model.svh] | TopicType(group)
| | [uvm_reg_model.svh] | Keyword(Group)
| | [uvm_reg_model.svh] | NumChilderen(0)
| | [uvm_reg_model.svh] | Summary()
| | [uvm_reg_model.svh] | Body()
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | TopicTitle: Enumerations
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | QualifiedName(Enumerations)
| | [uvm_reg_model.svh] | TopicType(group)
| | [uvm_reg_model.svh] | Keyword(Group)
| | [uvm_reg_model.svh] | NumChilderen(0)
| | [uvm_reg_model.svh] | Summary()
| | [uvm_reg_model.svh] | Body()
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | TopicTitle: Utility Classes
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | QualifiedName(Utility Classes)
| | [uvm_reg_model.svh] | TopicType(group)
| | [uvm_reg_model.svh] | Keyword(Group)
| | [uvm_reg_model.svh] | NumChilderen(0)
| | [uvm_reg_model.svh] | Summary()
| | [uvm_reg_model.svh] | Body()
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | TopicTitle: uvm_hdl_path_concat
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | QualifiedName(uvm_pkg::uvm_hdl_path_concat)
| | [uvm_reg_model.svh] | TopicType(class)
| | [uvm_reg_model.svh] | Keyword(Class)
| | [uvm_reg_model.svh] | NumChilderen(4)
| | [uvm_reg_model.svh] | Summary(Concatenation of HDL variables)
| | [uvm_reg_model.svh] | Body(<p>Concatenation of HDL variables</p><p>An dArray of <link target="uvm_hdl_path_slice" name="uvm_hdl_path_slice" original="&lt; uvm_hdl_path_slice &gt;"> specifing a concatenation of HDL variables that implement a register in the HDL.</p><p>Slices must be specified in most-to-least significant order. Slices must not overlap. Gaps may exists in the concatentation if portions of the registers are not implemented.</p><p>For example, the following register</p><blockquote><pre>       1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
Bits:  5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
      +-+---+-------------+---+-------+
      |A|xxx|      B      |xxx|   C   |
      +-+---+-------------+---+-------+

</pre></blockquote><p>If the register is implementd using a single HDL variable, The array should specify a single slice with its <i>offset</i> and <i>size</i> specified as -1. For example:</p><blockquote><pre>concat.set('{ '{&quot;r1&quot;, -1, -1} });
</pre></blockquote>)
| | [uvm_reg_model.svh] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | | Children
| | [uvm_reg_model.svh] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicTitle: slices
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | QualifiedName(uvm_pkg::uvm_hdl_path_concat::slices)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicType(variable)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Keyword(Variable)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | NumChilderen(0)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Summary(Array of individual slices, stored in most-to-least significant order)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Body(<p>Array of individual slices, stored in most-to-least significant order</p>)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicTitle: set
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | QualifiedName(uvm_pkg::uvm_hdl_path_concat::set)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicType(function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Keyword(Function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | NumChilderen(0)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Summary(Initialize the concatenation using an array literal)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Body(<p>Initialize the concatenation using an array literal</p>)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicTitle: add_slice
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | QualifiedName(uvm_pkg::uvm_hdl_path_concat::add_slice)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicType(function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Keyword(Function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | NumChilderen(0)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Summary(Append the specified <i>slice</i> literal to the path concatenation)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Body(<p>Append the specified <i>slice</i> literal to the path concatenation</p>)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicTitle: add_path
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | QualifiedName(uvm_pkg::uvm_hdl_path_concat::add_path)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | TopicType(function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Keyword(Function)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | NumChilderen(0)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Summary(Append the specified <i>path</i> to the path concatenation, for the specified number of bits at the specified <i>offset</i>.)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | | Body(<p>Append the specified <i>path</i> to the path concatenation, for the specified number of bits at the specified <i>offset</i>.</p>)
| | [uvm_reg_model.svh] | [uvm_hdl_path_concat] | +-------------------------------------------------------------------
| | [uvm_reg_model.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_predictor.svh
| +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | TopicTitle: Explicit Register Predictor
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | QualifiedName(Explicit Register Predictor)
| | [uvm_reg_predictor.svh] | TopicType(section)
| | [uvm_reg_predictor.svh] | Keyword(TITLE)
| | [uvm_reg_predictor.svh] | NumChilderen(0)
| | [uvm_reg_predictor.svh] | Summary(The <link target="uvm_reg_predictor" name="uvm_reg_predictor" original="&lt; uvm_reg_predictor &gt;"> class defines a predictor component, which is used to update the register model's mirror values based on transactions explicitly observed on a physical bus.)
| | [uvm_reg_predictor.svh] | Body(<p>The <link target="uvm_reg_predictor" name="uvm_reg_predictor" original="&lt; uvm_reg_predictor &gt;"> class defines a predictor component, which is used to update the register model's mirror values based on transactions explicitly observed on a physical bus.</p>)
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | TopicTitle: uvm_reg_predictor
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | QualifiedName(uvm_pkg::uvm_reg_predictor)
| | [uvm_reg_predictor.svh] | TopicType(class)
| | [uvm_reg_predictor.svh] | Keyword(CLASS)
| | [uvm_reg_predictor.svh] | NumChilderen(7)
| | [uvm_reg_predictor.svh] | Summary(Updates the register model mirror based on observed bus transactions)
| | [uvm_reg_predictor.svh] | Body(<p>Updates the register model mirror based on observed bus transactions</p><p>This class converts observed bus transactions of type <i>BUSTYPE</i> to generic registers transactions, determines the register being accessed based on the bus address, then updates the register's mirror value with the observed bus data, subject to the register's access mode. See <link target="uvm_reg::predict" name="uvm_reg::predict" original="&lt; uvm_reg::predict &gt;"> for details.</p><p>Memories can be large, so their accesses are not predicted.</p>)
| | [uvm_reg_predictor.svh] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | | Children
| | [uvm_reg_predictor.svh] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: bus_in
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::bus_in)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(Observed bus transactions of type <i>BUSTYPE</i> are received from this port and processed.)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>Observed bus transactions of type <i>BUSTYPE</i> are received from this port and processed.</p><p>For each incoming transaction, the predictor will attempt to get the register or memory handle corresponding to the observed bus address.</p><p>If there is a match, the predictor calls the register or memory's predict method, passing in the observed bus data. The register or memory mirror will be updated with this data, subject to its configured access behavior--RW, RO, WO, etc. The predictor will also convert the bus transaction to a generic <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> and send it out the <i>reg_ap</i> analysis port.</p><p>If the register is wider than the bus, the predictor will collect the multiple bus transactions needed to determine the value being read or written.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: reg_ap
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::reg_ap)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(Analysis output port that publishes <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> transactions converted from bus transactions received on <i>bus_in</i>.)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>Analysis output port that publishes <link target="uvm_reg_item" name="uvm_reg_item" original="&lt; uvm_reg_item &gt;"> transactions converted from bus transactions received on <i>bus_in</i>.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: map
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::map)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(The map used to convert a bus address to the corresponding register or memory handle. )
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>The map used to convert a bus address to the corresponding register or memory handle. Must be configured before the run phase.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: adapter
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::adapter)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Variable)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(The adapter used to convey the parameters of a bus operation in terms of a canonical <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> datum. )
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>The adapter used to convey the parameters of a bus operation in terms of a canonical <link target="uvm_reg_bus_op" name="uvm_reg_bus_op" original="&lt; uvm_reg_bus_op &gt;"> datum. The <link target="uvm_reg_adapter" name="uvm_reg_adapter" original="&lt; uvm_reg_adapter &gt;"> must be configured before the run phase.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: new
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::new)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(Create a new instance of this type, giving it the optional <i>name</i> and <i>parent</i>.)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>Create a new instance of this type, giving it the optional <i>name</i> and <i>parent</i>.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: pre_predict
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::pre_predict)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(Override this method to change the value or re-direct the target register)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>Override this method to change the value or re-direct the target register</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicTitle: check_phase
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | QualifiedName(uvm_pkg::uvm_reg_predictor::check_phase)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | TopicType(function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Keyword(Function)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | NumChilderen(0)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Summary(Checks that no pending register transactions are still enqueued.)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | | Body(<p>Checks that no pending register transactions are still enqueued.</p>)
| | [uvm_reg_predictor.svh] | [uvm_reg_predictor] | +-------------------------------------------------------------------
| | [uvm_reg_predictor.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_reg_sequence.svh
| +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | TopicTitle: Register Sequence Classes
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | QualifiedName(Register Sequence Classes)
| | [uvm_reg_sequence.svh] | TopicType(section)
| | [uvm_reg_sequence.svh] | Keyword(TITLE)
| | [uvm_reg_sequence.svh] | NumChilderen(0)
| | [uvm_reg_sequence.svh] | Summary(This section defines the base classes used for register stimulus generation.)
| | [uvm_reg_sequence.svh] | Body(<p>This section defines the base classes used for register stimulus generation.</p>)
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | TopicTitle: uvm_reg_sequence
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | QualifiedName(uvm_pkg::uvm_reg_sequence)
| | [uvm_reg_sequence.svh] | TopicType(class)
| | [uvm_reg_sequence.svh] | Keyword(CLASS)
| | [uvm_reg_sequence.svh] | NumChilderen(17)
| | [uvm_reg_sequence.svh] | Summary(This class provides base functionality for both user-defined RegModel test sequences and &quot;register translation sequences&quot;.)
| | [uvm_reg_sequence.svh] | Body(<p>This class provides base functionality for both user-defined RegModel test sequences and &quot;register translation sequences&quot;.</p><ul><li>When used as a base for user-defined RegModel test sequences, this class provides convenience methods for reading and writing registers and memories. Users implement the body() method to interact directly with the RegModel model (held in the <link target="model" name="model" original="&lt; model &gt;"> property) or indirectly via the delegation methods in this class.</li><li>When used as a translation sequence, objects of this class are executed directly on a bus sequencerwhich are used in support of a layered sequencer use model, a pre-defined convert-and-execute algorithm is provided.</li></ul><p>Register operations do not require extending this class if none of the above services are needed. Register test sequences can be extend from the base <link target="uvm_sequence #(REQ,RSP)" name="uvm_sequence #(REQ,RSP)" original="&lt; uvm_sequence #(REQ,RSP) &gt;"> base class or even from outside a sequence.</p><p>Note- The convenience API not yet implemented.</p>)
| | [uvm_reg_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | | Children
| | [uvm_reg_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: model
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::model)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Block abstraction this sequence executes on, defined only when this sequence is a user-defined test sequence.)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Block abstraction this sequence executes on, defined only when this sequence is a user-defined test sequence.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: adapter
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::adapter)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Adapter to use for translating between abstract register transactions and physical bus transactions, defined only when this sequence is a translation sequence.)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Adapter to use for translating between abstract register transactions and physical bus transactions, defined only when this sequence is a translation sequence.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: reg_seqr
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::reg_seqr)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Layered upstream &quot;register&quot; sequencer.)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Layered upstream &quot;register&quot; sequencer.</p><p>Specifies the upstream sequencer between abstract register transactions and physical bus transactions. Defined only when this sequence is a translation sequence, and we want to &quot;pull&quot; from an upstream sequencer.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: new
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::new)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(function)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Function)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Create a new instance, giving it the optional <i>name</i>.)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Create a new instance, giving it the optional <i>name</i>.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: body
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::body)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Continually gets a register transaction from the configured upstream sequencer, <link target="reg_seqr" name="reg_seqr" original="&lt; reg_seqr &gt;">, and executes the corresponding bus transaction via <link target="do_rw_access" name="do_rw_access" original="&lt; do_rw_access &gt;">.)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Continually gets a register transaction from the configured upstream sequencer, <link target="reg_seqr" name="reg_seqr" original="&lt; reg_seqr &gt;">, and executes the corresponding bus transaction via <link target="do_rw_access" name="do_rw_access" original="&lt; do_rw_access &gt;">.</p><p>User-defined RegModel test sequences must override body() and not call super.body(), else a warning will be issued and the calling process not return.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: do_reg_item
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::do_reg_item)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(function)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Function)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Executes the given register transaction, <i>rw</i>, via the sequencer on which this sequence was started (i.e. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Executes the given register transaction, <i>rw</i>, via the sequencer on which this sequence was started (i.e. m_sequencer). Uses the configured <link target="adapter" name="adapter" original="&lt; adapter &gt;"> to convert the register transaction into the type expected by this sequencer.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: Convenience Write/Read API
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(Convenience Write/Read API)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(group)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Group)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(The following methods delegate to the corresponding method in the register or memory element. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>The following methods delegate to the corresponding method in the register or memory element. They allow a sequence <i>body()</i> to do reads and writes without having to explicitly supply itself to <i>parent</i> sequence argument. Thus, a register write</p><blockquote><pre>model.regA.write(status, value, .parent(this));
</pre></blockquote><p>can be written instead as</p><blockquote><pre>write_reg(model.regA, status, value);</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: write_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::write_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Writes the given register <i>rg</i> using <link target="uvm_reg::write" name="uvm_reg::write" original="&lt; uvm_reg::write &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Writes the given register <i>rg</i> using <link target="uvm_reg::write" name="uvm_reg::write" original="&lt; uvm_reg::write &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>write_reg(model.regA, status, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.write(status, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: read_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::read_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Reads the given register <i>rg</i> using <link target="uvm_reg::read" name="uvm_reg::read" original="&lt; uvm_reg::read &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Reads the given register <i>rg</i> using <link target="uvm_reg::read" name="uvm_reg::read" original="&lt; uvm_reg::read &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>read_reg(model.regA, status, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.read(status, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: poke_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::poke_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Pokes the given register <i>rg</i> using <link target="uvm_reg::poke" name="uvm_reg::poke" original="&lt; uvm_reg::poke &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Pokes the given register <i>rg</i> using <link target="uvm_reg::poke" name="uvm_reg::poke" original="&lt; uvm_reg::poke &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>poke_reg(model.regA, status, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.poke(status, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: peek_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::peek_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Peeks the given register <i>rg</i> using <link target="uvm_reg::peek" name="uvm_reg::peek" original="&lt; uvm_reg::peek &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Peeks the given register <i>rg</i> using <link target="uvm_reg::peek" name="uvm_reg::peek" original="&lt; uvm_reg::peek &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>peek_reg(model.regA, status, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.peek(status, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: update_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::update_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Updates the given register <i>rg</i> using <link target="uvm_reg::update" name="uvm_reg::update" original="&lt; uvm_reg::update &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Updates the given register <i>rg</i> using <link target="uvm_reg::update" name="uvm_reg::update" original="&lt; uvm_reg::update &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>update_reg(model.regA, status, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.update(status, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: mirror_reg
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::mirror_reg)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Mirrors the given register <i>rg</i> using <link target="uvm_reg::mirror" name="uvm_reg::mirror" original="&lt; uvm_reg::mirror &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Mirrors the given register <i>rg</i> using <link target="uvm_reg::mirror" name="uvm_reg::mirror" original="&lt; uvm_reg::mirror &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>mirror_reg(model.regA, status, UVM_CHECK);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.mirror(status, UVM_CHECK, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: write_mem
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::write_mem)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Writes the given memory <i>mem</i> using <link target="uvm_mem::write" name="uvm_mem::write" original="&lt; uvm_mem::write &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Writes the given memory <i>mem</i> using <link target="uvm_mem::write" name="uvm_mem::write" original="&lt; uvm_mem::write &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>write_mem(model.regA, status, offset, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.write(status, offset, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: read_mem
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::read_mem)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Reads the given memory <i>mem</i> using <link target="uvm_mem::read" name="uvm_mem::read" original="&lt; uvm_mem::read &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Reads the given memory <i>mem</i> using <link target="uvm_mem::read" name="uvm_mem::read" original="&lt; uvm_mem::read &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>read_mem(model.regA, status, offset, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.read(status, offset, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: poke_mem
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::poke_mem)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Pokes the given memory <i>mem</i> using <link target="uvm_mem::poke" name="uvm_mem::poke" original="&lt; uvm_mem::poke &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Pokes the given memory <i>mem</i> using <link target="uvm_mem::poke" name="uvm_mem::poke" original="&lt; uvm_mem::poke &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>poke_mem(model.regA, status, offset, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.poke(status, offset, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicTitle: peek_mem
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | QualifiedName(uvm_pkg::uvm_reg_sequence::peek_mem)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | TopicType(task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Keyword(Task)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Summary(Peeks the given memory <i>mem</i> using <link target="uvm_mem::peek" name="uvm_mem::peek" original="&lt; uvm_mem::peek &gt;">, supplying 'this' as the <i>parent</i> argument. )
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | | Body(<p>Peeks the given memory <i>mem</i> using <link target="uvm_mem::peek" name="uvm_mem::peek" original="&lt; uvm_mem::peek &gt;">, supplying 'this' as the <i>parent</i> argument. Thus,</p><blockquote><pre>peek_mem(model.regA, status, offset, value);
</pre></blockquote><p>is equivalent to</p><blockquote><pre>model.regA.peek(status, offset, value, .parent(this));</pre></blockquote>)
| | [uvm_reg_sequence.svh] | [uvm_reg_sequence] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | TopicTitle: uvm_reg_frontdoor
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | QualifiedName(uvm_pkg::uvm_reg_frontdoor)
| | [uvm_reg_sequence.svh] | TopicType(class)
| | [uvm_reg_sequence.svh] | Keyword(Class)
| | [uvm_reg_sequence.svh] | NumChilderen(3)
| | [uvm_reg_sequence.svh] | Summary(Facade class for register and memory frontdoor access.)
| | [uvm_reg_sequence.svh] | Body(<p>Facade class for register and memory frontdoor access.</p><p>User-defined frontdoor access sequence</p><p>Base class for user-defined access to register and memory reads and writes through a physical interface.</p><p>By default, different registers and memories are mapped to different addresses in the address space and are accessed via those exclusively through physical addresses.</p><p>The frontdoor allows access using a non-linear and/or non-mapped mechanism. Users can extend this class to provide the physical access to these registers.</p>)
| | [uvm_reg_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | | Children
| | [uvm_reg_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicTitle: rw_info
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | QualifiedName(uvm_pkg::uvm_reg_frontdoor::rw_info)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicType(variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Keyword(Variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Summary(Holds information about the register being read or written)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Body(<p>Holds information about the register being read or written</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicTitle: sequencer
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | QualifiedName(uvm_pkg::uvm_reg_frontdoor::sequencer)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicType(variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Keyword(Variable)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Summary(Sequencer executing the operation)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Body(<p>Sequencer executing the operation</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicTitle: new
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | QualifiedName(uvm_pkg::uvm_reg_frontdoor::new)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | TopicType(function)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Keyword(Function)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | NumChilderen(0)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Summary(Constructor, new object givne optional <i>name</i>.)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | | Body(<p>Constructor, new object givne optional <i>name</i>.</p>)
| | [uvm_reg_sequence.svh] | [uvm_reg_frontdoor] | +-------------------------------------------------------------------
| | [uvm_reg_sequence.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_registry.svh
| +-------------------------------------------------------------------
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | TopicTitle: Factory Component and Object Wrappers
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | QualifiedName(Factory Component and Object Wrappers)
| | [uvm_registry.svh] | TopicType(section)
| | [uvm_registry.svh] | Keyword(Title)
| | [uvm_registry.svh] | NumChilderen(0)
| | [uvm_registry.svh] | Summary(Topic: Intro)
| | [uvm_registry.svh] | Body(<p>Topic: Intro</p><p>This section defines the proxy component and object classes used by the factory. To avoid the overhead of creating an instance of every component and object that get registered, the factory holds lightweight wrappers, or proxies. When a request for a new object is made, the factory calls upon the proxy to create the object it represents.</p>)
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | TopicTitle: uvm_component_registry #(T,Tname)
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | QualifiedName(uvm_component_registry #(T,Tname))
| | [uvm_registry.svh] | TopicType(class)
| | [uvm_registry.svh] | Keyword(CLASS)
| | [uvm_registry.svh] | NumChilderen(6)
| | [uvm_registry.svh] | Summary(The uvm_component_registry serves as a lightweight proxy for a component of type <i>T</i> and type name <i>Tname</i>, a string. )
| | [uvm_registry.svh] | Body(<p>The uvm_component_registry serves as a lightweight proxy for a component of type <i>T</i> and type name <i>Tname</i>, a string. The proxy enables efficient registration with the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">. Without it, registration would require an instance of the component itself.</p><p>See <link target="Usage" name="Usage" original="&lt; Usage &gt;"> section below for information on using uvm_component_registry.</p>)
| | [uvm_registry.svh] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | | Children
| | [uvm_registry.svh] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: create_component
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(create_component)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Creates a component of type T having the provided <i>name</i> and <i>parent</i>. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Creates a component of type T having the provided <i>name</i> and <i>parent</i>. This is an override of the method in <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">. It is called by the factory after determining the type of object to create. You should not call this method directly. Call <link target="create" name="create" original="&lt; create &gt;"> instead.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: get_type_name
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(get_type_name)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Returns the value given by the string parameter, <i>Tname</i>. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Returns the value given by the string parameter, <i>Tname</i>. This method overrides the method in <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: get
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(get)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Returns the singleton instance of this type. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Returns the singleton instance of this type. Type-based factory operation depends on there being a single proxy instance for each registered type.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: create
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(create)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Returns an instance of the component type, <i>T</i>, represented by this proxy, subject to any factory overrides based on the context provided by the <i>parent</i>'s full name. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Returns an instance of the component type, <i>T</i>, represented by this proxy, subject to any factory overrides based on the context provided by the <i>parent</i>'s full name. The <i>contxt</i> argument, if supplied, supercedes the <i>parent</i>'s context. The new instance will have the given leaf <i>name</i> and <i>parent</i>.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: set_type_override
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(set_type_override)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type, <i>T</i>, represented by this proxy, provided no instance override applies. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type, <i>T</i>, represented by this proxy, provided no instance override applies. The original type, <i>T</i>, is typically a super class of the override type.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicTitle: set_inst_override
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | QualifiedName(set_inst_override)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Summary(Configures the factory to create a component of the type represented by <i>override_type</i> whenever a request is made to create an object of the type, <i>T</i>, represented by this proxy,  with matching instance paths. )
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | | Body(<p>Configures the factory to create a component of the type represented by <i>override_type</i> whenever a request is made to create an object of the type, <i>T</i>, represented by this proxy,  with matching instance paths. The original type, <i>T</i>, is typically a super class of the override type.</p><p>If <i>parent</i> is not specified, <i>inst_path</i> is interpreted as an absolute instance path, which enables instance overrides to be set from outside component classes. If <i>parent</i> is specified, <i>inst_path</i> is interpreted as being relative to the <i>parent</i>'s hierarchical instance path, i.e. <i>{parent.get_full_name(),&quot;.&quot;,inst_path}</i> is the instance path that is registered with the override. The <i>inst_path</i> may contain wildcards for matching against multiple contexts.</p>)
| | [uvm_registry.svh] | [uvm_component_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | TopicTitle: uvm_object_registry #(T,Tname)
| | [uvm_registry.svh] +-------------------------------------------------------------------
| | [uvm_registry.svh] | QualifiedName(uvm_object_registry #(T,Tname))
| | [uvm_registry.svh] | TopicType(class)
| | [uvm_registry.svh] | Keyword(CLASS)
| | [uvm_registry.svh] | NumChilderen(7)
| | [uvm_registry.svh] | Summary(The uvm_object_registry serves as a lightweight proxy for an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> of type <i>T</i> and type name <i>Tname</i>, a string. )
| | [uvm_registry.svh] | Body(<p>The uvm_object_registry serves as a lightweight proxy for an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> of type <i>T</i> and type name <i>Tname</i>, a string. The proxy enables efficient registration with the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">. Without it, registration would require an instance of the object itself.</p><p>See <link target="Usage" name="Usage" original="&lt; Usage &gt;"> section below for information on using uvm_component_registry.</p>)
| | [uvm_registry.svh] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | | Children
| | [uvm_registry.svh] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: create_object
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(create_object)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Creates an object of type <i>T</i> and returns it as a handle to an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Creates an object of type <i>T</i> and returns it as a handle to an <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;">. This is an override of the method in <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">. It is called by the factory after determining the type of object to create. You should not call this method directly. Call <link target="create" name="create" original="&lt; create &gt;"> instead.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: get_type_name
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(get_type_name)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Returns the value given by the string parameter, <i>Tname</i>. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Returns the value given by the string parameter, <i>Tname</i>. This method overrides the method in <link target="uvm_object_wrapper" name="uvm_object_wrapper" original="&lt; uvm_object_wrapper &gt;">.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: get
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(get)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Returns the singleton instance of this type. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Returns the singleton instance of this type. Type-based factory operation depends on there being a single proxy instance for each registered type.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: create
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(create)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Returns an instance of the object type, <i>T</i>, represented by this proxy, subject to any factory overrides based on the context provided by the <i>parent</i>'s full name. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Returns an instance of the object type, <i>T</i>, represented by this proxy, subject to any factory overrides based on the context provided by the <i>parent</i>'s full name. The <i>contxt</i> argument, if supplied, supercedes the <i>parent</i>'s context. The new instance will have the given leaf <i>name</i>, if provided.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: set_type_override
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(set_type_override)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type represented by this proxy, provided no instance override applies. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type represented by this proxy, provided no instance override applies. The original type, <i>T</i>, is typically a super class of the override type.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: set_inst_override
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(set_inst_override)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Function)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type represented by this proxy, with matching instance paths. )
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>Configures the factory to create an object of the type represented by <i>override_type</i> whenever a request is made to create an object of the type represented by this proxy, with matching instance paths. The original type, <i>T</i>, is typically a super class of the override type.</p><p>If <i>parent</i> is not specified, <i>inst_path</i> is interpreted as an absolute instance path, which enables instance overrides to be set from outside component classes. If <i>parent</i> is specified, <i>inst_path</i> is interpreted as being relative to the <i>parent</i>'s hierarchical instance path, i.e. <i>{parent.get_full_name(),&quot;.&quot;,inst_path}</i> is the instance path that is registered with the override. The <i>inst_path</i> may contain wildcards for matching against multiple contexts.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicTitle: Usage
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | QualifiedName(Usage)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | TopicType(group)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Keyword(Group)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | NumChilderen(0)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Summary(This section describes usage for the uvm_*_registry classes.)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | | Body(<p>This section describes usage for the uvm_*_registry classes.</p><p>The wrapper classes are used to register lightweight proxies of objects and components.</p><p>To register a particular component type, you need only typedef a specialization of its proxy class, which is typically done inside the class.</p><p>For example, to register an UVM component of type <i>mycomp</i></p><blockquote><pre>class mycomp extends uvm_component;
  typedef uvm_component_registry #(mycomp,&quot;mycomp&quot;) type_id;
endclass
</pre></blockquote><p>However, because of differences between simulators, it is necessary to use a macro to ensure vendor interoperability with factory registration. To register an UVM component of type <i>mycomp</i> in a vendor-independent way, you would write instead:</p><blockquote><pre>class mycomp extends uvm_component;
  `uvm_component_utils(mycomp);
  ...
endclass
</pre></blockquote><p>The <link target="`uvm_component_utils" name="`uvm_component_utils" original="&lt; `uvm_component_utils &gt;"> macro is for non-parameterized classes. In this example, the typedef underlying the macro specifies the <i>Tname</i> parameter as &quot;mycomp&quot;, and <i>mycomp</i>'s get_type_name() is defined to return the same. With <i>Tname</i> defined, you can use the factory's name-based methods to set overrides and create objects and components of non-parameterized types.</p><p>For parameterized types, the type name changes with each specialization, so you can not specify a <i>Tname</i> inside a parameterized class and get the behavior you want; the same type name string would be registered for all specializations of the class! (The factory would produce warnings for each specialization beyond the first.) To avoid the warnings and simulator interoperability issues with parameterized classes, you must register parameterized classes with a different macro.</p><p>For example, to register an UVM component of type driver #(T), you would write:</p><blockquote><pre>class driver #(type T=int) extends uvm_component;
  `uvm_component_param_utils(driver #(T));
  ...
endclass
</pre></blockquote><p>The <link target="`uvm_component_param_utils" name="`uvm_component_param_utils" original="&lt; `uvm_component_param_utils &gt;"> and <link target="`uvm_object_param_utils" name="`uvm_object_param_utils" original="&lt; `uvm_object_param_utils &gt;"> macros are used to register parameterized classes with the factory. Unlike the the non-param versions, these macros do not specify the <i>Tname</i> parameter in the underlying uvm_component_registry typedef, and they do not define the get_type_name method for the user class. Consequently, you will not be able to use the factory's name-based methods for parameterized classes.</p><p>The primary purpose for adding the factory's type-based methods was to accommodate registration of parameterized types and eliminate the many sources of errors associated with string-based factory usage. Thus, use of name-based lookup in <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;"> is no longer recommended.</p>)
| | [uvm_registry.svh] | [uvm_object_registry #(T,Tname)] | +-------------------------------------------------------------------
| | [uvm_registry.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_catcher.svh
| +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | TopicTitle: uvm_report_catcher
| | [uvm_report_catcher.svh] +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | QualifiedName(uvm_pkg::uvm_report_catcher)
| | [uvm_report_catcher.svh] | TopicType(class)
| | [uvm_report_catcher.svh] | Keyword(CLASS)
| | [uvm_report_catcher.svh] | NumChilderen(29)
| | [uvm_report_catcher.svh] | Summary(The uvm_report_catcher is used to catch messages issued by the uvm report server. )
| | [uvm_report_catcher.svh] | Body(<p>The uvm_report_catcher is used to catch messages issued by the uvm report server. Catchers are uvm_callbacks#(<link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">,uvm_report_catcher) objects, so all factilities in the <link target="uvm_callback" name="uvm_callback" original="&lt; uvm_callback &gt;"> and <link target="uvm_callbacks#(T,CB)" name="uvm_callbacks#(T,CB)" original="&lt; uvm_callbacks#(T,CB) &gt;"> classes are available for registering catchers and controlling catcher state. The uvm_callbacks#(<link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">,uvm_report_catcher) class is aliased to <i>uvm_report_cb</i> to make it easier to use. Multiple report catchers can be registered with a report object. The catchers can be registered as default catchers which catch all reports on all <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> reporters, or catchers can be attached to specific report objects (i.e. components).</p><p>User extensions of <link target="uvm_report_catcher" name="uvm_report_catcher" original="&lt; uvm_report_catcher &gt;"> must implement the <link target="catch" name="catch" original="&lt; catch &gt;"> method in which the action to be taken on catching the report is specified. The catch method can return <i>CAUGHT</i>, in which case further processing of the report is immediately stopped, or return <i>THROW</i> in which case the (possibly modified) report is passed on to other registered catchers. The catchers are processed in the order in which they are registered.</p><p>On catching a report, the <link target="catch" name="catch" original="&lt; catch &gt;"> method can modify the severity, id, action, verbosity or the report string itself before the report is finally issued by the report server. The report can be immediately issued from within the catcher class by calling the <link target="issue" name="issue" original="&lt; issue &gt;"> method.</p><p>The catcher maintains a count of all reports with FATAL,ERROR or WARNING severity and a count of all reports with FATAL, ERROR or WARNING severity whose severity was lowered. These statistics are reported in the summary of the <link target="uvm_report_server" name="uvm_report_server" original="&lt; uvm_report_server &gt;">.</p><p>This example shows the basic concept of creating a report catching callback and attaching it to all messages that get emitted:</p><blockquote><pre>class my_error_demoter extends uvm_report_catcher;
  function new(string name=&quot;my_error_demoter&quot;);
    super.new(name);
  endfunction
  //This example demotes &quot;MY_ID&quot; errors to an info message
  function action_e catch();
    if(get_severity() == UVM_ERROR &amp;&amp; get_id() == &quot;MY_ID&quot;)
      set_severity(UVM_INFO);
    return THROW;
  endfunction
endclass

my_error_demoter demoter = new;
initial begin
 // Catchers are callbacks on report objects (components are report
 // objects, so catchers can be attached to components).

 // To affect all reporters, use null for the object
 uvm_report_cb::add(null, demoter);

 // To affect some specific object use the specific reporter
 uvm_report_cb::add(mytest.myenv.myagent.mydriver, demoter);

 // To affect some set of components using the component name
 uvm_report_cb::add_by_name(&quot;*.*driver&quot;, demoter);
end
</pre></blockquote>)
| | [uvm_report_catcher.svh] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | | Children
| | [uvm_report_catcher.svh] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: new
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::new)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Create a new report catcher. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Create a new report catcher. The name argument is optional, but should generally be provided to aid in debugging.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: Current Message State
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(Current Message State)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_client
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_client)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> that has generated the message that is currently being processes.)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> that has generated the message that is currently being processes.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_severity
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_severity)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the <link target="uvm_severity" name="uvm_severity" original="&lt; uvm_severity &gt;"> of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the <link target="uvm_severity" name="uvm_severity" original="&lt; uvm_severity &gt;"> of the message that is currently being processed. If the severity was modified by a previously executed catcher object (which re-threw the message), then the returned severity is the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_context
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_context)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the context (source) of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the context (source) of the message that is currently being processed. This is typically the full hierarchical name of the component that issued the message. However, when the message comes via a report handler that is not associated with a component, the context is user-defined.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_verbosity
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_verbosity)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the verbosity of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the verbosity of the message that is currently being processed. If the verbosity was modified by a previously executed catcher (which re-threw the message), then the returned verbosity is the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_id
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_id)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the string id of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the string id of the message that is currently being processed. If the id was modified by a previously executed catcher (which re-threw the message), then the returned id is the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_message
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_message)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the string message of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the string message of the message that is currently being processed. If the message was modified by a previously executed catcher (which re-threw the message), then the returned message is the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_action
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_action)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the <link target="uvm_action" name="uvm_action" original="&lt; uvm_action &gt;"> of the message that is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the <link target="uvm_action" name="uvm_action" original="&lt; uvm_action &gt;"> of the message that is currently being processed. If the action was modified by a previously executed catcher (which re-threw the message), then the returned action is the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_fname
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_fname)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the file name of the message.)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the file name of the message.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_line
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_line)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the line number of the message.)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the line number of the message.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: Change Message State
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(Change Message State)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: set_severity
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::set_severity)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Change the severity of the message to <i>severity</i>. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Change the severity of the message to <i>severity</i>. Any other report catchers will see the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: set_verbosity
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::set_verbosity)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Change the verbosity of the message to <i>verbosity</i>. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Change the verbosity of the message to <i>verbosity</i>. Any other report catchers will see the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: set_id
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::set_id)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Change the id of the message to <i>id</i>. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Change the id of the message to <i>id</i>. Any other report catchers will see the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: set_message
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::set_message)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Change the text of the message to <i>message</i>. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Change the text of the message to <i>message</i>. Any other report catchers will see the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: set_action
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::set_action)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Change the action of the message to <i>action</i>. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Change the action of the message to <i>action</i>. Any other report catchers will see the modified value.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: Debug
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(Debug)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: get_report_catcher
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::get_report_catcher)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Returns the first report catcher that has <i>name</i>.)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Returns the first report catcher that has <i>name</i>.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: print_catcher
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::print_catcher)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Prints information about all of the report catchers that are registered. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Prints information about all of the report catchers that are registered. For finer grained detail, the <link target="uvm_callbacks #(T,CB)::display" name="uvm_callbacks #(T,CB)::display" original="&lt; uvm_callbacks #(T,CB)::display &gt;"> method can be used by calling uvm_report_cb::display(<link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">).</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: Callback Interface
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(Callback Interface)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: catch
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::catch)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(This is the method that is called for each registered report catcher. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>This is the method that is called for each registered report catcher. There are no arguments to this function. The <link target="Current Message State" name="Current Message State" original="&lt; Current Message State &gt;"> interface methods can be used to access information about the current message being processed.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: Reporting
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(Reporting)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Group)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body()
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: uvm_report_fatal
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::uvm_report_fatal)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Issues a fatal message using the current message's report object. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Issues a fatal message using the current message's report object. This message will bypass any message catching callbacks.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: uvm_report_error
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::uvm_report_error)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Issues a error message using the current message's report object. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Issues a error message using the current message's report object. This message will bypass any message catching callbacks.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: uvm_report_warning
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::uvm_report_warning)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Issues a warning message using the current message's report object. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Issues a warning message using the current message's report object. This message will bypass any message catching callbacks.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: uvm_report_info
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::uvm_report_info)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Issues a info message using the current message's report object. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Issues a info message using the current message's report object. This message will bypass any message catching callbacks.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: issue
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::issue)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(Immediately issues the message which is currently being processed. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>Immediately issues the message which is currently being processed. This is useful if the message is being <i>CAUGHT</i> but should still be emitted.</p><p>Issuing a message will update the report_server stats, possibly multiple times if the message is not <i>CAUGHT</i>.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicTitle: summarize_report_catcher
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | QualifiedName(uvm_pkg::uvm_report_catcher::summarize_report_catcher)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | TopicType(function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Keyword(Function)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | NumChilderen(0)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Summary(This function is called automatically by <link target="uvm_report_server::summarize()" name="uvm_report_server::summarize()" original="&lt; uvm_report_server::summarize() &gt;">. )
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | | Body(<p>This function is called automatically by <link target="uvm_report_server::summarize()" name="uvm_report_server::summarize()" original="&lt; uvm_report_server::summarize() &gt;">. It prints the statistics for the active catchers.</p>)
| | [uvm_report_catcher.svh] | [uvm_report_catcher] | +-------------------------------------------------------------------
| | [uvm_report_catcher.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_handler.svh
| +-------------------------------------------------------------------
| | [uvm_report_handler.svh] +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | TopicTitle: uvm_report_handler
| | [uvm_report_handler.svh] +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | QualifiedName(uvm_pkg::uvm_report_handler)
| | [uvm_report_handler.svh] | TopicType(class)
| | [uvm_report_handler.svh] | Keyword(CLASS)
| | [uvm_report_handler.svh] | NumChilderen(7)
| | [uvm_report_handler.svh] | Summary(The uvm_report_handler is the class to which most methods in <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> delegate. )
| | [uvm_report_handler.svh] | Body(<p>The uvm_report_handler is the class to which most methods in <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> delegate. It stores the maximum verbosity, actions, and files that affect the way reports are handled.</p><p>The report handler is not intended for direct use. See <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> for information on the UVM reporting mechanism.</p><p>The relationship between <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;"> (a base class for uvm_component) and uvm_report_handler is typically one to one, but it can be many to one if several uvm_report_objects are configured to use the same uvm_report_handler_object. See <link target="uvm_report_object::set_report_handler" name="uvm_report_object::set_report_handler" original="&lt; uvm_report_object::set_report_handler &gt;">.</p><p>The relationship between uvm_report_handler and <link target="uvm_report_server" name="uvm_report_server" original="&lt; uvm_report_server &gt;"> is many to one.</p>)
| | [uvm_report_handler.svh] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | | Children
| | [uvm_report_handler.svh] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: new
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::new)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(Creates and initializes a new uvm_report_handler object.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>Creates and initializes a new uvm_report_handler object.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: run_hooks
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::run_hooks)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(The run_hooks method is called if the <link target="UVM_CALL_HOOK" name="UVM_CALL_HOOK" original="&lt; UVM_CALL_HOOK &gt;"> action is set for a report. )
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>The run_hooks method is called if the <link target="UVM_CALL_HOOK" name="UVM_CALL_HOOK" original="&lt; UVM_CALL_HOOK &gt;"> action is set for a report. It first calls the client's <link target="uvm_report_object::report_hook" name="uvm_report_object::report_hook" original="&lt; uvm_report_object::report_hook &gt;"> method, followed by the appropriate severity-specific hook method. If either returns 0, then the report is not processed.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: get_verbosity_level
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::get_verbosity_level)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(Returns the verbosity associated with the given <i>severity</i> and <i>id</i>.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>Returns the verbosity associated with the given <i>severity</i> and <i>id</i>.</p><p>First, if there is a verbosity associated with the <i>(severity,id)</i> pair, return that.  Else, if there is an verbosity associated with the <i>id</i>, return that.  Else, return the max verbosity setting.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: get_action
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::get_action)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(Returns the action associated with the given <i>severity</i> and <i>id</i>.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>Returns the action associated with the given <i>severity</i> and <i>id</i>.</p><p>First, if there is an action associated with the <i>(severity,id)</i> pair, return that.  Else, if there is an action associated with the <i>id</i>, return that.  Else, if there is an action associated with the <i>severity</i>, return that. Else, return the default action associated with the <i>severity</i>.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: get_file_handle
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::get_file_handle)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(Returns the file descriptor associated with the given <i>severity</i> and <i>id</i>.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>Returns the file descriptor associated with the given <i>severity</i> and <i>id</i>.</p><p>First, if there is a file handle associated with the <i>(severity,id)</i> pair, return that. Else, if there is a file handle associated with the <i>id</i>, return that. Else, if there is an file handle associated with the <i>severity</i>, return that. Else, return the default file handle.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: report
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::report)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(This is the common handler method used by the four core reporting methods (e.g., uvm_report_error) in <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>This is the common handler method used by the four core reporting methods (e.g., uvm_report_error) in <link target="uvm_report_object" name="uvm_report_object" original="&lt; uvm_report_object &gt;">.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicTitle: format_action
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] | [uvm_report_handler] | | QualifiedName(uvm_pkg::uvm_report_handler::format_action)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | TopicType(function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Keyword(Function)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | NumChilderen(0)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Summary(Returns a string representation of the <i>action</i>, e.g., &quot;DISPLAY&quot;.)
| | [uvm_report_handler.svh] | [uvm_report_handler] | | Body(<p>Returns a string representation of the <i>action</i>, e.g., &quot;DISPLAY&quot;.</p>)
| | [uvm_report_handler.svh] | [uvm_report_handler] | +-------------------------------------------------------------------
| | [uvm_report_handler.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_object.svh
| +-------------------------------------------------------------------
| | [uvm_report_object.svh] +-------------------------------------------------------------------
| | [uvm_report_object.svh] | TopicTitle: uvm_report_object
| | [uvm_report_object.svh] +-------------------------------------------------------------------
| | [uvm_report_object.svh] | QualifiedName(uvm_pkg::uvm_report_object)
| | [uvm_report_object.svh] | TopicType(class)
| | [uvm_report_object.svh] | Keyword(CLASS)
| | [uvm_report_object.svh] | NumChilderen(39)
| | [uvm_report_object.svh] | Summary(The uvm_report_object provides an interface to the UVM reporting facility. )
| | [uvm_report_object.svh] | Body(<p>The uvm_report_object provides an interface to the UVM reporting facility. Through this interface, components issue the various messages that occur during simulation. Users can configure what actions are taken and what file(s) are output for individual messages from a particular component or for all messages from all components in the environment. Defaults are applied where there is no explicit configuration.</p><p>Most methods in uvm_report_object are delegated to an internal instance of an <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;">, which stores the reporting configuration and determines whether an issued message should be displayed based on that configuration. Then, to display a message, the report handler delegates the actual formatting and production of messages to a central <link target="uvm_report_server" name="uvm_report_server" original="&lt; uvm_report_server &gt;">.</p><p>A report consists of an id string, severity, verbosity level, and the textual message itself. They may optionally include the filename and line number from which the message came. If the verbosity level of a report is greater than the configured maximum verbosity level of its report object, it is ignored. If a report passes the verbosity filter in effect, the report's action is determined. If the action includes output to a file, the configured file descriptor(s) are determined.</p><dl><de> Actions</de><dd>can be set for (in increasing priority) severity, id, and (severity,id) pair. They include output to the screen <link target="UVM_DISPLAY" name="UVM_DISPLAY" original="&lt; UVM_DISPLAY &gt;">, whether the message counters should be incremented <link target="UVM_COUNT" name="UVM_COUNT" original="&lt; UVM_COUNT &gt;">, and whether a $finish should occur <link target="UVM_EXIT" name="UVM_EXIT" original="&lt; UVM_EXIT &gt;">.</dd><de> Default Actions</de><dd>The following provides the default actions assigned to each severity. These can be overridden by any of the set_*_action methods.</dd></dl><blockquote><pre>UVM_INFO -       UVM_DISPLAY
UVM_WARNING -    UVM_DISPLAY
UVM_ERROR -      UVM_DISPLAY | UVM_COUNT
UVM_FATAL -      UVM_DISPLAY | UVM_EXIT
</pre></blockquote><dl><de> File descriptors</de><dd>These can be set by (in increasing priority) default, severity level, an id, or (severity,id) pair.  File descriptors are standard verilog file descriptors; they may refer to more than one file. It is the user's responsibility to open and close them.</dd><de> Default file handle</de><dd>The default file handle is 0, which means that reports are not sent to a file even if an UVM_LOG attribute is set in the action associated with the report. This can be overridden by any of the set_*_file methods.</dd></dl>)
| | [uvm_report_object.svh] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | | Children
| | [uvm_report_object.svh] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: new
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::new)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Creates a new report object with the given name. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Creates a new report object with the given name. This method also creates a new <link target="uvm_report_handler" name="uvm_report_handler" original="&lt; uvm_report_handler &gt;"> object to which most tasks are delegated.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: Reporting
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(Reporting)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(group)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Group)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: uvm_report_info
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::uvm_report_info)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: uvm_report_warning
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::uvm_report_warning)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: uvm_report_error
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::uvm_report_error)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: uvm_report_fatal
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::uvm_report_fatal)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These are the primary reporting methods in the UVM. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These are the primary reporting methods in the UVM. Using these instead of <i>$display</i> and other ad hoc approaches ensures consistent output and central control over where output is directed and any actions that result. All reporting methods have the same arguments, although each has a different default verbosity:</p><dl><de>   id</de><dd>a unique id for the report or report group that can be used for identification and therefore targeted filtering. You can configure an individual report's actions and output file(s) using this id string.</dd><de>   message</de><dd>the message body, preformatted if necessary to a single string.</dd><de>   verbosity</de><dd>the verbosity of the message, indicating its relative importance. If this number is less than or equal to the effective verbosity level, see <link target="set_report_verbosity_level" name="set_report_verbosity_level" original="&lt; set_report_verbosity_level &gt;">, then the report is issued, subject to the configured action and file descriptor settings.  Verbosity is ignored for warnings, errors, and fatals. However, if a warning, error or fatal is demoted to an info message using the <link target="uvm_report_catcher" name="uvm_report_catcher" original="&lt; uvm_report_catcher &gt;">, then the verbosity is taken into account.</dd><de>   filename/line</de><dd>(Optional) The location from which the report was issued. Use the predefined macros, `__FILE__ and `__LINE__. If specified, it is displayed in the output.</dd></dl>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: Callbacks
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(Callbacks)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(group)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Group)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_info_hook
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_info_hook)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_error_hook
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_error_hook)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_warning_hook
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_warning_hook)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_fatal_hook
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_fatal_hook)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_hook
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_hook)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These hook methods can be defined in derived classes to perform additional actions when reports are issued. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These hook methods can be defined in derived classes to perform additional actions when reports are issued. They are called only if the <link target="UVM_CALL_HOOK" name="UVM_CALL_HOOK" original="&lt; UVM_CALL_HOOK &gt;"> bit is specified in the action associated with the report. The default implementations return 1, which allows the report to be processed. If an override returns 0, then the report is not processed.</p><p>First, the report_hook method is called, followed by the severity severity specific hook (report_info_hook, etc.). If either hook method returns 0 then the report is not processed further.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_header
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_header)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Prints version and copyright information. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Prints version and copyright information. This information is sent to the command line if <i>file</i> is 0, or to the file descriptor <i>file</i> if it is not 0. The <link target="uvm_root::run_test" name="uvm_root::run_test" original="&lt; uvm_root::run_test &gt;"> task calls this method just before it component phasing begins.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: report_summarize
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::report_summarize)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Outputs statistical information on the reports issued by the central report server. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Outputs statistical information on the reports issued by the central report server. This information will be sent to the command line if <i>file</i> is 0, or to the file descriptor <i>file</i> if it is not 0.</p><p>The run_test method in uvm_top calls this method.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: die
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::die)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(This method is called by the report server if a report reaches the maximum quit count or has an UVM_EXIT action associated with it, e.g., as with fatal errors.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>This method is called by the report server if a report reaches the maximum quit count or has an UVM_EXIT action associated with it, e.g., as with fatal errors.</p><p>Calls the <link target="uvm_component::pre_abort()" name="uvm_component::pre_abort()" original="&lt; uvm_component::pre_abort() &gt;"> method on the entire <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> hierarchy in a bottom-up fashion. It then call calls <link target="report_summarize" name="report_summarize" original="&lt; report_summarize &gt;"> and terminates the simulation with <i>$finish</i>.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: Configuration
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(Configuration)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(group)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Group)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_verbosity_level
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_verbosity_level)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(This method sets the maximum verbosity level for reports for this component. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>This method sets the maximum verbosity level for reports for this component. Any report from this component whose verbosity exceeds this maximum will be ignored.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_id_verbosity
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_id_verbosity)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_id_verbosity
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_id_verbosity)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These methods associate the specified verbosity with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These methods associate the specified verbosity with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. An verbosity associated with a particular <i>severity-id</i> pair takes precedence over an verbosity associated with <i>id</i>, which take precedence over an an verbosity associated with a <i>severity</i>.</p><p>The <i>verbosity</i> argument can be any integer, but is most commonaly a predefined <link target="uvm_verbosity" name="uvm_verbosity" original="&lt; uvm_verbosity &gt;"> value, <link target="UVM_NONE" name="UVM_NONE" original="&lt; UVM_NONE &gt;">, <link target="UVM_LOW" name="UVM_LOW" original="&lt; UVM_LOW &gt;">, <link target="UVM_MEDIUM" name="UVM_MEDIUM" original="&lt; UVM_MEDIUM &gt;">, <link target="UVM_HIGH" name="UVM_HIGH" original="&lt; UVM_HIGH &gt;">, <link target="UVM_FULL" name="UVM_FULL" original="&lt; UVM_FULL &gt;">.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_action
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_action)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_id_action
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_id_action)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_id_action
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_id_action)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These methods associate the specified action or actions with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These methods associate the specified action or actions with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair. An action associated with a particular <i>severity-id</i> pair takes precedence over an action associated with <i>id</i>, which takes precedence over an an action associated with a <i>severity</i>.</p><p>The <i>action</i> argument can take the value <link target="UVM_NO_ACTION" name="UVM_NO_ACTION" original="&lt; UVM_NO_ACTION &gt;">, or it can be a bitwise OR of any combination of <link target="UVM_DISPLAY" name="UVM_DISPLAY" original="&lt; UVM_DISPLAY &gt;">, <link target="UVM_LOG" name="UVM_LOG" original="&lt; UVM_LOG &gt;">, <link target="UVM_COUNT" name="UVM_COUNT" original="&lt; UVM_COUNT &gt;">, <link target="UVM_STOP" name="UVM_STOP" original="&lt; UVM_STOP &gt;">, <link target="UVM_EXIT" name="UVM_EXIT" original="&lt; UVM_EXIT &gt;">, and <link target="UVM_CALL_HOOK" name="UVM_CALL_HOOK" original="&lt; UVM_CALL_HOOK &gt;">.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_override
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_override)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_id_override
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_id_override)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These methods provide the ability to upgrade or downgrade a message in terms of severity given <i>severity</i> and <i>id</i>. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These methods provide the ability to upgrade or downgrade a message in terms of severity given <i>severity</i> and <i>id</i>.  An upgrade or downgrade for a specific <i>id</i> takes precedence over an upgrade or downgrade associated with a <i>severity</i>.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_default_file
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_default_file)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_file
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_file)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_id_file
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_id_file)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_severity_id_file
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_severity_id_file)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(These methods configure the report handler to direct some or all of its output to the given file descriptor. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>These methods configure the report handler to direct some or all of its output to the given file descriptor. The <i>file</i> argument must be a multi-channel descriptor (mcd) or file id compatible with $fdisplay.</p><p>A FILE descriptor can be associated with with reports of the given <i>severity</i>, <i>id</i>, or <i>severity-id</i> pair.  A FILE associated with a particular <i>severity-id</i> pair takes precedence over a FILE associated with <i>id</i>, which take precedence over an a FILE associated with a <i>severity</i>, which takes precedence over the default FILE descriptor.</p><p>When a report is issued and its associated action has the UVM_LOG bit set, the report will be sent to its associated FILE descriptor. The user is responsible for opening and closing these files.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: get_report_verbosity_level
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::get_report_verbosity_level)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Gets the verbosity level in effect for this object. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Gets the verbosity level in effect for this object. Reports issued with verbosity greater than this will be filtered out. The severity and tag arguments check if the verbosity level has been modified for specific severity/tag combinations.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: get_report_action
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::get_report_action)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Gets the action associated with reports having the given <i>severity</i> and <i>id</i>.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Gets the action associated with reports having the given <i>severity</i> and <i>id</i>.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: get_report_file_handle
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::get_report_file_handle)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Gets the file descriptor associated with reports having the given <i>severity</i> and <i>id</i>.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Gets the file descriptor associated with reports having the given <i>severity</i> and <i>id</i>.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: uvm_report_enabled
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::uvm_report_enabled)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Returns 1 if the configured verbosity for this severity/id is greater than <i>verbosity</i> and the action associated with the given <i>severity</i> and <i>id</i> is not UVM_NO_ACTION, else returns 0.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Returns 1 if the configured verbosity for this severity/id is greater than <i>verbosity</i> and the action associated with the given <i>severity</i> and <i>id</i> is not UVM_NO_ACTION, else returns 0.</p><p>See also <link target="get_report_verbosity_level" name="get_report_verbosity_level" original="&lt; get_report_verbosity_level &gt;"> and <link target="get_report_action" name="get_report_action" original="&lt; get_report_action &gt;">, and the global version of <link target="uvm_report_enabled" name="uvm_report_enabled" original="&lt; uvm_report_enabled &gt;">.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_max_quit_count
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_max_quit_count)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Sets the maximum quit count in the report handler to <i>max_count</i>. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Sets the maximum quit count in the report handler to <i>max_count</i>. When the number of UVM_COUNT actions reaches <i>max_count</i>, the <link target="die" name="die" original="&lt; die &gt;"> method is called.</p><p>The default value of 0 indicates that there is no upper limit to the number of UVM_COUNT reports.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: Setup
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(Setup)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(group)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Group)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary()
| | [uvm_report_object.svh] | [uvm_report_object] | | Body()
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: set_report_handler
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::set_report_handler)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Sets the report handler, overwriting the default instance. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Sets the report handler, overwriting the default instance. This allows more than one component to share the same report handler.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: get_report_handler
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::get_report_handler)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Returns the underlying report handler to which most reporting tasks are delegated.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Returns the underlying report handler to which most reporting tasks are delegated.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: reset_report_handler
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::reset_report_handler)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Resets the underlying report handler to its default settings. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Resets the underlying report handler to its default settings. This clears any settings made with the set_report_* methods (see below).</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: get_report_server
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::get_report_server)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(Returns the <link target="uvm_report_server" name="uvm_report_server" original="&lt; uvm_report_server &gt;"> instance associated with this report object.)
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>Returns the <link target="uvm_report_server" name="uvm_report_server" original="&lt; uvm_report_server &gt;"> instance associated with this report object.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicTitle: dump_report_state
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] | [uvm_report_object] | | QualifiedName(uvm_pkg::uvm_report_object::dump_report_state)
| | [uvm_report_object.svh] | [uvm_report_object] | | TopicType(function)
| | [uvm_report_object.svh] | [uvm_report_object] | | Keyword(Function)
| | [uvm_report_object.svh] | [uvm_report_object] | | NumChilderen(0)
| | [uvm_report_object.svh] | [uvm_report_object] | | Summary(This method dumps the internal state of the report handler. )
| | [uvm_report_object.svh] | [uvm_report_object] | | Body(<p>This method dumps the internal state of the report handler. This includes information about the maximum quit count, the maximum verbosity, and the action and files associated with severities, ids, and (severity, id) pairs.</p>)
| | [uvm_report_object.svh] | [uvm_report_object] | +-------------------------------------------------------------------
| | [uvm_report_object.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_report_server.svh
| +-------------------------------------------------------------------
| | [uvm_report_server.svh] +-------------------------------------------------------------------
| | [uvm_report_server.svh] | TopicTitle: uvm_report_server
| | [uvm_report_server.svh] +-------------------------------------------------------------------
| | [uvm_report_server.svh] | QualifiedName(uvm_pkg::uvm_report_server)
| | [uvm_report_server.svh] | TopicType(class)
| | [uvm_report_server.svh] | Keyword(CLASS)
| | [uvm_report_server.svh] | NumChilderen(23)
| | [uvm_report_server.svh] | Summary(uvm_report_server is a global server that processes all of the reports generated by an uvm_report_handler. )
| | [uvm_report_server.svh] | Body(<p>uvm_report_server is a global server that processes all of the reports generated by an uvm_report_handler. None of its methods are intended to be called by normal testbench code, although in some circumstances the virtual methods process_report and/or compose_uvm_info may be overloaded in a subclass.</p>)
| | [uvm_report_server.svh] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | | Children
| | [uvm_report_server.svh] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: id_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::id_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(variable)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Variable)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(An associative array holding the number of occurences for each unique report ID.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>An associative array holding the number of occurences for each unique report ID.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: new
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::new)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Creates the central report server, if not already created. )
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Creates the central report server, if not already created. Else, does nothing. The constructor is protected to enforce a singleton.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: set_server
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::set_server)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Sets the global report server to use for reporting. )
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Sets the global report server to use for reporting. The report server is responsible for formatting messages.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_server
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::get_server)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Gets the global report server. )
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Gets the global report server. The method will always return a valid handle to a report server.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: set_max_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::set_max_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_max_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::get_max_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Get or set the maximum number of COUNT actions that can be tolerated before an UVM_EXIT action is taken. )
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Get or set the maximum number of COUNT actions that can be tolerated before an UVM_EXIT action is taken. The default is 0, which specifies no maximum.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: set_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::set_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::get_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: incr_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::incr_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: reset_quit_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::reset_quit_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Set, get, increment, or reset to 0 the quit count, i.e., the number of COUNT actions issued.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Set, get, increment, or reset to 0 the quit count, i.e., the number of COUNT actions issued.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: is_quit_count_reached
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::is_quit_count_reached)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(If is_quit_count_reached returns 1, then the quit counter has reached the maximum.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>If is_quit_count_reached returns 1, then the quit counter has reached the maximum.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: set_severity_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::set_severity_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_severity_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::get_severity_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: incr_severity_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::incr_severity_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: reset_severity_counts
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::reset_severity_counts)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Set, get, or increment the counter for the given severity, or reset all severity counters to 0.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Set, get, or increment the counter for the given severity, or reset all severity counters to 0.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: set_id_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::set_id_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_id_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::get_id_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary()
| | [uvm_report_server.svh] | [uvm_report_server] | | Body()
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: incr_id_count
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::incr_id_count)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Set, get, or increment the counter for reports with the given id.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Set, get, or increment the counter for reports with the given id.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: process_report
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::process_report)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Calls <link target="compose_message" name="compose_message" original="&lt; compose_message &gt;"> to construct the actual message to be output. )
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Calls <link target="compose_message" name="compose_message" original="&lt; compose_message &gt;"> to construct the actual message to be output. It then takes the appropriate action according to the value of action and file.</p><p>This method can be overloaded by expert users to customize the way the reporting system processes reports and the actions enabled for them.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: compose_message
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::compose_message)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Constructs the actual string sent to the file or command line from the severity, component name, report id, and the message itself.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Constructs the actual string sent to the file or command line from the severity, component name, report id, and the message itself.</p><p>Expert users can overload this method to customize report formatting.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: summarize
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::summarize)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(See <link target="uvm_report_object::report_summarize" name="uvm_report_object::report_summarize" original="&lt; uvm_report_object::report_summarize &gt;"> method.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>See <link target="uvm_report_object::report_summarize" name="uvm_report_object::report_summarize" original="&lt; uvm_report_object::report_summarize &gt;"> method.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: dump_server_state
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(uvm_pkg::uvm_report_server::dump_server_state)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Dumps server state information.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Dumps server state information.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicTitle: get_server
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] | [uvm_report_server] | | QualifiedName(get_server)
| | [uvm_report_server.svh] | [uvm_report_server] | | TopicType(function)
| | [uvm_report_server.svh] | [uvm_report_server] | | Keyword(Function)
| | [uvm_report_server.svh] | [uvm_report_server] | | NumChilderen(0)
| | [uvm_report_server.svh] | [uvm_report_server] | | Summary(Returns a handle to the central report server.)
| | [uvm_report_server.svh] | [uvm_report_server] | | Body(<p>Returns a handle to the central report server.</p>)
| | [uvm_report_server.svh] | [uvm_report_server] | +-------------------------------------------------------------------
| | [uvm_report_server.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_resource.svh
| +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: Resources
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(Resources)
| | [uvm_resource.svh] | TopicType(section)
| | [uvm_resource.svh] | Keyword(Title)
| | [uvm_resource.svh] | NumChilderen(0)
| | [uvm_resource.svh] | Summary(Topic: Intro)
| | [uvm_resource.svh] | Body(<p>Topic: Intro</p><p>A resource is a parameterized container that holds arbitrary data. Resources can be used to configure components, supply data to sequences, or enable sharing of information across disparate parts of a testbench.  They are stored using scoping information so their visibility can be constrained to certain parts of the testbench. Resource containers can hold any type of data, constrained only by the data types available in SystemVerilog.  Resources can contain scalar objects, class handles, queues, lists, or even virtual interfaces.</p><p>Resources are stored in a resource database so that each resource can be retrieved by name or by type. The databse has both a name table and a type table and each resource is entered into both. The database is globally accessible.</p><p>Each resource has a set of scopes over which it is visible.  The set of scopes is represented as a regular expression.  When a resource is looked up the scope of the entity doing the looking up is supplied to the lookup function.  This is called the <i>current scope</i>.  If the current scope is in the set of scopes over which a resource is visible then the resource can be retuned in the lookup.</p><p>Resources can be looked up by name or by type. To support type lookup each resource has a static type handle that uniquely identifies the type of each specialized resource container.</p><p>Mutliple resources that have the same name are stored in a queue. Each resource is pushed into a queue with the first one at the front of the queue and each subsequent one behind it.  The same happens for multiple resources that have the same type.  The resource queues are searched front to back, so those placed earlier in the queue have precedence over those placed later.</p><p>The precedence of resources with the same name or same type can be altered.  One way is to set the <i>precedence</i> member of the resource container to any arbitrary value.  The search algorithm will return the resource with the highest precedence.  In the case where there are multiple resources that match the search criteria and have the same (highest) precedence, the earliest one located in the queue will be one returned.  Another way to change the precedence is to use the set_priority function to move a resource to either the front or back of the queue.</p><p>The classes defined here form the low level layer of the resource database.  The classes include the resource container and the database that holds the containers.  The following set of classes are defined here:</p><p><link target="uvm_resource_types" name="uvm_resource_types" original="&lt; uvm_resource_types &gt;">: A class without methods or members, only typedefs and enums. These types and enums are used throughout the resources facility.  Putting the types in a class keeps them confined to a specific name space.</p><p><link target="uvm_resource_options" name="uvm_resource_options" original="&lt; uvm_resource_options &gt;">: policy class for setting options, such as auditing, which effect resources.</p><p><link target="uvm_resource_base" name="uvm_resource_base" original="&lt; uvm_resource_base &gt;">: the base (untyped) resource class living in the resource database.  This class includes the interface for setting a resource as read-only, notification, scope management, altering search priority, and managing auditing.</p><p><link target="uvm_resource#(T)" name="uvm_resource#(T)" original="&lt; uvm_resource#(T) &gt;">: parameterized resource container.  This class includes the interfaces for reading and writing each resource. Because the class is parameterized, all the access functions are type sace.</p><p><link target="uvm_resource_pool" name="uvm_resource_pool" original="&lt; uvm_resource_pool &gt;">: the resource database. This is a singleton class object.</p>)
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: uvm_resource_types
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(uvm_pkg::uvm_resource_types)
| | [uvm_resource.svh] | TopicType(class)
| | [uvm_resource.svh] | Keyword(Class)
| | [uvm_resource.svh] | NumChilderen(0)
| | [uvm_resource.svh] | Summary(Provides typedefs and enums used throughout the resources facility. )
| | [uvm_resource.svh] | Body(<p>Provides typedefs and enums used throughout the resources facility. This class has no members or methods, only typedefs.  It's used in lieu of package-scope types.  When needed, other classes can use these types by prefixing their usage with uvm_resource_types::.  E.g.</p><blockquote><pre>uvm_resource_types::rsrc_q_t queue;
</pre></blockquote>)
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: uvm_resource_options
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(uvm_pkg::uvm_resource_options)
| | [uvm_resource.svh] | TopicType(class)
| | [uvm_resource.svh] | Keyword(Class)
| | [uvm_resource.svh] | NumChilderen(3)
| | [uvm_resource.svh] | Summary(Provides a namespace for managing options for the resources facility. )
| | [uvm_resource.svh] | Body(<p>Provides a namespace for managing options for the resources facility.  The only thing allowed in this class is static local data members and static functions for manipulating and retrieving the value of the data members.  The static local data members represent options and settings that control the behavior of the resources facility.</p>)
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | | Children
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicTitle: turn_on_auditing
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | QualifiedName(uvm_pkg::uvm_resource_options::turn_on_auditing)
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_options] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_options] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_options] | | Summary(Turn auditing on for the resource database. )
| | [uvm_resource.svh] | [uvm_resource_options] | | Body(<p>Turn auditing on for the resource database. This causes all reads and writes to the database to store information about the accesses. Auditing is turned on by default.</p>)
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicTitle: turn_off_auditing
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | QualifiedName(uvm_pkg::uvm_resource_options::turn_off_auditing)
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_options] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_options] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_options] | | Summary(Turn auditing off for the resource database. )
| | [uvm_resource.svh] | [uvm_resource_options] | | Body(<p>Turn auditing off for the resource database. If auditing is turned off, it is not possible to get extra information about resource database accesses.</p>)
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicTitle: is_auditing
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_options] | | QualifiedName(uvm_pkg::uvm_resource_options::is_auditing)
| | [uvm_resource.svh] | [uvm_resource_options] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_options] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_options] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_options] | | Summary(Returns 1 if the auditing facility is on and 0 if it is off.)
| | [uvm_resource.svh] | [uvm_resource_options] | | Body(<p>Returns 1 if the auditing facility is on and 0 if it is off.</p>)
| | [uvm_resource.svh] | [uvm_resource_options] | +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: uvm_resource_base
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(uvm_pkg::uvm_resource_base)
| | [uvm_resource.svh] | TopicType(class)
| | [uvm_resource.svh] | Keyword(Class)
| | [uvm_resource.svh] | NumChilderen(22)
| | [uvm_resource.svh] | Summary(Non-parameterized base class for resources. )
| | [uvm_resource.svh] | Body(<p>Non-parameterized base class for resources.  Supports interfaces for scope matching, and virtual functions for printing the resource and for printing the accessor list</p>)
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | | Children
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: precedence
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::precedence)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(variable)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(variable)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(This variable is used to associate a precedence that a resource has with respect to other resources which match the same scope and name. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>This variable is used to associate a precedence that a resource has with respect to other resources which match the same scope and name. Resources are set to the <link target="default_precedence" name="default_precedence" original="&lt; default_precedence &gt;"> initially, and may be set to a higher or lower precedence as desired.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: default_precedence
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::default_precedence)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(variable)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(variable)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(The default precedence for an resource that has been created. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>The default precedence for an resource that has been created. When two resources have the same precedence, the first resource found has precedence.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: new
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::new)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(constructor for uvm_resource_base. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>constructor for uvm_resource_base.  The constructor takes two arguments, the name of the resource and a resgular expression which represents the set of scopes over which this resource is visible.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: get_type_handle
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::get_type_handle)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Pure virtual function that returns the type handle of the resource container.)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Pure virtual function that returns the type handle of the resource container.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Read-only Interface
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Read-only Interface)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_base] | | Body()
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: set_read_only
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::set_read_only)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Establishes this resource as a read-only resource. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Establishes this resource as a read-only resource.  An attempt to call <link target="uvm_resource#(T)::write" name="uvm_resource#(T)::write" original="&lt; uvm_resource#(T)::write &gt;"> on the resource will cause an error.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: is_read_only
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::is_read_only)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Retruns one if this resource has been set to read-only, zero otherwise)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Retruns one if this resource has been set to read-only, zero otherwise</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Notification
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Notification)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_base] | | Body()
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: wait_modified
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::wait_modified)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(task)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Task)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(This task blocks until the resource has been modified -- that is, a <link target="uvm_resource#(T)::write" name="uvm_resource#(T)::write" original="&lt; uvm_resource#(T)::write &gt;"> operation has been performed. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>This task blocks until the resource has been modified -- that is, a <link target="uvm_resource#(T)::write" name="uvm_resource#(T)::write" original="&lt; uvm_resource#(T)::write &gt;"> operation has been performed.  When a <link target="uvm_resource#(T)::write" name="uvm_resource#(T)::write" original="&lt; uvm_resource#(T)::write &gt;"> is performed the modified bit is set which releases the block.  Wait_modified() then clears the modified bit so it can be called repeatedly.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Scope Interface
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Scope Interface)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Each resource has a name, a value and a set of scopes over which it is visible. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Each resource has a name, a value and a set of scopes over which it is visible. A scope is a hierarchical entity or a context.  A scope name is a multi-element string that identifies a scope.  Each element refers to a scope context and the elements are separated by dots (.).</p><blockquote><pre>top.env.agent.monitor
</pre></blockquote><p>Consider the example above of a scope name.  It consists of four elements: &quot;top&quot;, &quot;env&quot;, &quot;agent&quot;, and &quot;monitor&quot;.  The elements are strung together with a dot separating each element.  <i>top.env.agent</i> is the parent of <i>top.env.agent.monitor</i>, <i>top.env</i> is the parent of <i>top.env.agent</i>, and so on.  A set of scopes can be represented by a set of scope name strings.  A very straightforward way to represent a set of strings is to use regular expressions.  A regular expression is a special string that contains placeholders which can be substituted in various ways to generate or recognize a particular set of strings.  Here are a few simple examples:</p><blockquote><pre> top\..*                   all of the scopes whose top-level component
                        is top
top\.env\..*\.monitor   all of the scopes in env that end in monitor;
                        i.e. all the monitors two levels down from env
.*\.monitor               all of the scopes that end in monitor; i.e.
                        all the monitors (assuming a naming convention
                        was used where all monitors are named &quot;monitor&quot;)
top\.u[1-5]\.*           all of the scopes rooted and named u1, u2, u3,
</pre></blockquote><p>u4, or u5, and any of their subscopes.</p><p>The examples above use posix regular expression notation.  This is a very general and expressive notation.  It is not always the case that so much expressiveness is required.  Sometimes an expression syntax that is easy to read and easy to write is useful, even if the syntax is not as expressive as the full power of posix regular expressions.  A popular substitute for regular expressions is globs.  A glob is a simplified regular expression. It only has three metacharacters -- *, +, and ?.  Character ranges are not allowed and dots are not a metacharacter in globs as they are in regular expressions.  The following table shows glob metacharacters.</p><blockquote><pre>char   meaning                   regular expression
                              equivalent
*       0 or more characters   .*
+       1 or more characters   .+
?       exactly one character   .
</pre></blockquote><p>Of the examples above, the first three can easily be translated into globs.  The last one cannot.  It relies on notation that is not available in glob syntax.</p><blockquote><pre>regular expression       glob equivalent
---------------------      ------------------
top\..*               top.*
top\.env\..*\.monitor       top.env.*.monitor
.*\.monitor               *.monitor
</pre></blockquote><p>The resource facility supports both regular expression and glob syntax.  Regular expressions are identified as such when they surrounded by '/' characters. For example, ~/^top\.*/~ is interpreted as the regular expression <i>^top\.*</i>, where the surrounding '/' characters have been removed. All other expressions are treated as glob expressions. They are converted from glob notation to regular expression notation internally.  Regular expression compilation and matching as well as glob-to-regular expression conversion are handled by three DPI functions:</p><blockquote><pre>function int uvm_re_match(string re, string str);
function string uvm_glob_to_re(string glob);
</pre></blockquote><p>uvm_re_match both compiles and matches the regular expression. of the matching is done using regular expressions, so globs are converted to regular expressions and then processed.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: set_scope
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::set_scope)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Set the value of the regular expression that identifies the set of scopes over which this resource is visible. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Set the value of the regular expression that identifies the set of scopes over which this resource is visible.  If the supplied argument is a glob it will be converted to a regular expression before it is stored.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: get_scope
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::get_scope)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Retrieve the regular expression string that identifies the set of scopes over which this resource is visible.)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Retrieve the regular expression string that identifies the set of scopes over which this resource is visible.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: match_scope
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::match_scope)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Using the regular expression facility, determine if this resource is visible in a scope. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Using the regular expression facility, determine if this resource is visible in a scope.  Return one if it is, zero otherwise.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Priority
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Priority)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Functions for manipulating the search priority of resources. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Functions for manipulating the search priority of resources.  The function definitions here are pure virtual and are implemented in derived classes.  The definitons serve as a priority management interface.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: set priority
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(set priority)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Change the search priority of the resource based on the value of the priority enum argument.)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Change the search priority of the resource based on the value of the priority enum argument.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Utility Functions
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Utility Functions)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_base] | | Body()
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: do_print
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::do_print)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Implementation of do_print which is called by print().)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Implementation of do_print which is called by print().</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: Audit Trail
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(Audit Trail)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(To find out what is happening as the simulation proceeds, an audit trail of each read and write is kept. )
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>To find out what is happening as the simulation proceeds, an audit trail of each read and write is kept. The read and write methods in uvm_resource#(T) each take an accessor argument.  This is a handle to the object that performed that resource access.</p><blockquote><pre>function T read(uvm_object accessor = null);
function void write(T t, uvm_object accessor = null);
</pre></blockquote><p>The accessor can by anything as long as it is derived from uvm_object.  The accessor object can be a component or a sequence or whatever object from which a read or write was invoked. Typically the <i>this</i> handle is used as the accessor.  For example:</p><blockquote><pre>uvm_resource#(int) rint;
int i;
...
rint.write(7, this);
i = rint.read(this);
</pre></blockquote><p>The accessor's <i>get_full_name()</i> is stored as part of the audit trail. This way you can find out what object performed each resource access. Each audit record also includes the time of the access (simulation time) and the particular operation performed (read or write).</p><p>Auditting is controlled through the <link target="uvm_resource_options" name="uvm_resource_options" original="&lt; uvm_resource_options &gt;"> class.</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: record_read_access
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::record_read_access)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_base] | | Body()
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: record_write_access
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::record_write_access)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_base] | | Body()
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: print_accessors
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::print_accessors)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Dump the access records for this resource)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Dump the access records for this resource</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicTitle: init_access_record
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_base] | | QualifiedName(uvm_pkg::uvm_resource_base::init_access_record)
| | [uvm_resource.svh] | [uvm_resource_base] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_base] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_base] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_base] | | Summary(Initalize a new access record)
| | [uvm_resource.svh] | [uvm_resource_base] | | Body(<p>Initalize a new access record</p>)
| | [uvm_resource.svh] | [uvm_resource_base] | +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: uvm_resource_pool
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(uvm_pkg::uvm_resource_pool)
| | [uvm_resource.svh] | TopicType(class)
| | [uvm_resource.svh] | Keyword(Class)
| | [uvm_resource.svh] | NumChilderen(25)
| | [uvm_resource.svh] | Summary(The global (singleton) resource database.)
| | [uvm_resource.svh] | Body(<p>The global (singleton) resource database.</p><p>Each resource is stored both by primary name and by type handle.  The resource pool contains two associative arrays, one with name as the key and one with the type handle as the key.  Each associative array contains a queue of resources.  Each resource has a regular expression that represents the set of scopes over with it is visible.</p><blockquote><pre>+------+------------+                          +------------+------+
| name | rsrc queue |                          | rsrc queue | type |
+------+------------+                          +------------+------+
|      |            |                          |            |      |
+------+------------+                  +-+-+   +------------+------+
|      |            |                  | | |&lt;--+---*        |  T   |
+------+------------+   +-+-+          +-+-+   +------------+------+
|  A   |        *---+--&gt;| | |           |      |            |      |
+------+------------+   +-+-+           |      +------------+------+
|      |            |      |            |      |            |      |
+------+------------+      +-------+  +-+      +------------+------+
|      |            |              |  |        |            |      |
+------+------------+              |  |        +------------+------+
|      |            |              V  V        |            |      |
+------+------------+            +------+      +------------+------+
|      |            |            | rsrc |      |            |      |
+------+------------+            +------+      +------------+------+
</pre></blockquote><p>The above diagrams illustrates how a resource whose name is A and type is T is stored in the pool.  The pool contains an entry in the type map for type T and an entry in the name map for name A.  The queues in each of the arrays each contain an entry for the resource A whose type is T.  The name map can contain in its queue other resources whose name is A which may or may not have the same type as our resource A.  Similarly, the type map can contain in its queue other resources whose type is T and whose name may or may not be A.</p><p>Resources are added to the pool by calling <link target="set" name="set" original="&lt; set &gt;">; they are retrieved from the pool by calling <link target="get_by_name" name="get_by_name" original="&lt; get_by_name &gt;"> or <link target="get_by_type" name="get_by_type" original="&lt; get_by_type &gt;">.  When an object creates a new resource and calls <link target="set" name="set" original="&lt; set &gt;"> the resource is made available to be retrieved by other objects outside of itsef; an object gets a resource when it wants to access a resource not currently available in its scope.</p><p>The scope is stored in the resource itself (not in the pool) so whether you get by name or by type the resource's visibility is the same.</p><p>As an auditing capability, the pool contains a history of gets.  A record of each get, whether by <link target="get_by_type" name="get_by_type" original="&lt; get_by_type &gt;"> or <link target="get_by_name" name="get_by_name" original="&lt; get_by_name &gt;">, is stored in the audit record.  Both successful and failed gets are recorded. At the end of simulation, or any time for that matter, you can dump the history list.  This will tell which resources were successfully located and which were not.  You can use this information to determine if there is some error in name, type, or scope that has caused a resource to not be located or to be incorrrectly located (i.e. the wrong resource is located).</p>)
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | | Children
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: get
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::get)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Returns the singleton handle to the resource pool)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Returns the singleton handle to the resource pool</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: spell_check
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::spell_check)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Invokes the spell checker for a string s. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Invokes the spell checker for a string s.  The universe of correctly spelled strings -- i.e. the dictionary -- is the name map.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: Set
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(Set)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body()
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Add a new resource to the resource pool. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Add a new resource to the resource pool.  The resource is inserted into both the name map and type map so it can be located by either.</p><p>An object creates a resources and <i>sets</i> it into the resource pool. Later, other objects that want to access the resource must <i>get</i> it from the pool</p><p>Overrides can be specified using this interface.  Either a name override, a type override or both can be specified.  If an override is specified then the resource is entered at the front of the queue instead of at the back.  It is not recommended that users specify the override paramterer directly, rather they use the <link target="set_override" name="set_override" original="&lt; set_override &gt;">, <link target="set_name_override" name="set_name_override" original="&lt; set_name_override &gt;">, or <link target="set_type_override" name="set_type_override" original="&lt; set_type_override &gt;"> functions.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_override
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_override)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(The resource provided as an argument will be entered into the pool and will override both by name and type.)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>The resource provided as an argument will be entered into the pool and will override both by name and type.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_name_override
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_name_override)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(The resource provided as an argument will entered into the pool using normal precedence in the type map and will override the name.)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>The resource provided as an argument will entered into the pool using normal precedence in the type map and will override the name.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_type_override
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_type_override)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(The resource provided as an argument will be entered into the pool using noraml precedence in the name map and will override the type.)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>The resource provided as an argument will be entered into the pool using noraml precedence in the name map and will override the type.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: Lookup
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(Lookup)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(This group of functions is for finding resources in the resource database.)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>This group of functions is for finding resources in the resource database.</p><p><link target="lookup_name" name="lookup_name" original="&lt; lookup_name &gt;"> and <link target="lookup_type" name="lookup_type" original="&lt; lookup_type &gt;"> locate the set of resources that matches the name or type (respectively) and is visible in the current scope.  These functions return a queue of resources.</p><p><link target="get_highest_precedence" name="get_highest_precedence" original="&lt; get_highest_precedence &gt;"> traverese a queue of resources and returns the one with the highest precedence -- i.e. the one whose precedence member has the highest value.</p><p><link target="get_by_name" name="get_by_name" original="&lt; get_by_name &gt;"> and <link target="get_by_type" name="get_by_type" original="&lt; get_by_type &gt;"> use <link target="lookup_name" name="lookup_name" original="&lt; lookup_name &gt;"> and <link target="lookup_type" name="lookup_type" original="&lt; lookup_type &gt;"> (respectively) and <link target="get_highest_precedence" name="get_highest_precedence" original="&lt; get_highest_precedence &gt;"> to find the resource with the highest priority that matches the other search criteria.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: lookup_name
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::lookup_name)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Lookup resources by <i>name</i>. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Lookup resources by <i>name</i>.  Returns a queue of resources that match the <i>name</i>, <i>scope</i>, and <i>type_handle</i>.  If no resources match the queue is returned empty. If <i>rpterr</i> is set then a warning is issued if no matches are found, and the spell checker is invoked on <i>name</i>.  If <i>type_handle</i> is null then a type check is not made and resources are returned that match only <i>name</i> and <i>scope</i>.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: get_highest_precedence
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::get_highest_precedence)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Traverse a queue, <i>q</i>, of resources and return the one with the highest precedence. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Traverse a queue, <i>q</i>, of resources and return the one with the highest precedence.  In the case where there exists more than one resource with the highest precedence value, the first one that has that precedence will be the one that is returned.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: sort_by_precedence
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::sort_by_precedence)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Given a list of resources, obtained for example from <link target="lookup_scope" name="lookup_scope" original="&lt; lookup_scope &gt;">, sort the resources in  precedence order. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Given a list of resources, obtained for example from <link target="lookup_scope" name="lookup_scope" original="&lt; lookup_scope &gt;">, sort the resources in  precedence order. The highest precedence resource will be first in the list and the lowest precedence will be last. Resources that have the same precedence and the same name will be ordered by most recently set first.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: get_by_name
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::get_by_name)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Lookup a resource by <i>name</i>, <i>scope</i>, and <i>type_handle</i>. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Lookup a resource by <i>name</i>, <i>scope</i>, and <i>type_handle</i>.  Whether the get succeeds or fails, save a record of the get attempt.  The <i>rpterr</i> flag indicates whether to report errors or not. Essentially, it serves as a verbose flag.  If set then the spell checker will be invoked and warnings about multiple resources will be produced.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: lookup_type
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::lookup_type)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Lookup resources by type. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Lookup resources by type. Return a queue of resources that match the <i>type_handle</i> and <i>scope</i>.  If no resources match then the returned queue is empty.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: get_by_type
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::get_by_type)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Lookup a resource by <i>type_handle</i> and <i>scope</i>. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Lookup a resource by <i>type_handle</i> and <i>scope</i>.  Insert a record into the get history list whether or not the get succeeded.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: lookup_regex_names
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::lookup_regex_names)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(This utility function answers the question, for a given <i>name</i>, <i>scope</i>,and <i>type_handle</i>, what are all of the resources with a matching name (where the resource name may be a regular expression), a matching scope (where the resoucre scope may be a regular expression), and a matching type? )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>This utility function answers the question, for a given <i>name</i>, <i>scope</i>,and <i>type_handle</i>, what are all of the resources with a matching name (where the resource name may be a regular expression), a matching scope (where the resoucre scope may be a regular expression), and a matching type? <i>name</i> and <i>scope</i> are explicit values.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: lookup_regex
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::lookup_regex)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Looks for all the resources whose name matches the regular expression argument and whose scope matches the current scope.)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Looks for all the resources whose name matches the regular expression argument and whose scope matches the current scope.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: lookup_scope
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::lookup_scope)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(This is a utility function that answers the question: For a given <i>scope</i>, what resources are visible to it? )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>This is a utility function that answers the question: For a given <i>scope</i>, what resources are visible to it?  Locate all the resources that are visible to a particular scope.  This operation could be quite expensive, as it has to traverse all of the resources in the database.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: Set Priority
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(Set Priority)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Functions for altering the search priority of resources. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Functions for altering the search priority of resources.  Resources are stored in queues in the type and name maps.  When retrieving resoures, either by type or by name, the resource queue is search from front to back.  The first one that matches the search criteria is the one that is returned.  The <i>set_priority</i> functions let you change the order in which resources are searched.  For any particular resource, you can set its priority to UVM_HIGH, in which case the resource is moved to the front of the queue, or to UVM_LOW in which case the resource is moved to the back of the queue.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_priority_type
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_priority_type)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Change the priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Change the priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument.  This function changes the priority only in the type map, leavint the name map untouched.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_priority_name
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_priority_name)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Change the priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Change the priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument.  This function changes the priority only in the name map, leaving the type map untouched.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: set_priority
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::set_priority)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Change the search priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Change the search priority of the <i>rsrc</i> based on the value of <i>pri</i>, the priority enum argument.  This function changes the priority in both the name and type maps.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: Debug
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(Debug)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary()
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body()
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: find_unused_resources
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::find_unused_resources)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Locate all the resources that have at least one write and no reads)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Locate all the resources that have at least one write and no reads</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: print_resources
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::print_resources)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(Print the resources that are in a single queue, <i>rq</i>. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>Print the resources that are in a single queue, <i>rq</i>.  This is a utility function that can be used to print any collection of resources stored in a queue.  The <i>audit</i> flag determines whether or not the audit trail is printed for each resource along with the name, value, and scope regular expression.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicTitle: dump
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource_pool] | | QualifiedName(uvm_pkg::uvm_resource_pool::dump)
| | [uvm_resource.svh] | [uvm_resource_pool] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource_pool] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource_pool] | | Summary(dump the entire resource pool. )
| | [uvm_resource.svh] | [uvm_resource_pool] | | Body(<p>dump the entire resource pool.  The resource pool is traversed and each resource is printed.  The utility function print_resources() is used to initiate the printing. If the <i>audit</i> bit is set then the audit trail is dumped for each resource.</p>)
| | [uvm_resource.svh] | [uvm_resource_pool] | +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | TopicTitle: uvm_resource #(T)
| | [uvm_resource.svh] +-------------------------------------------------------------------
| | [uvm_resource.svh] | QualifiedName(uvm_resource #(T))
| | [uvm_resource.svh] | TopicType(class)
| | [uvm_resource.svh] | Keyword(Class)
| | [uvm_resource.svh] | NumChilderen(14)
| | [uvm_resource.svh] | Summary(Parameterized resource. )
| | [uvm_resource.svh] | Body(<p>Parameterized resource.  Provides essential access methods to read from and write to the resource database.</p>)
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | | Children
| | [uvm_resource.svh] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: Type Interface
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(Type Interface)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Resources can be identified by type using a static type handle. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Resources can be identified by type using a static type handle. The parent class provides the virtual function interface <link target="get_type_handle" name="get_type_handle" original="&lt; get_type_handle &gt;">.  Here we implement it by returning the static type handle.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: get_type
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(get_type)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Static function that returns the static type handle. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Static function that returns the static type handle.  The return type is this_type, which is the type of the parameterized class.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: get_type_handle
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(get_type_handle)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Returns the static type handle of this resource in a polymorphic fashion. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Returns the static type handle of this resource in a polymorphic fashion.  The return type of get_type_handle() is uvm_resource_base.  This function is not static and therefore can only be used by instances of a parameterized resource.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: Set/Get Interface
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(Set/Get Interface)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(uvm_resource#(T) provides an interface for setting and getting a resources. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>uvm_resource#(T) provides an interface for setting and getting a resources.  Specifically, a resource can insert itself into the resource pool.  It doesn't make sense for a resource to get itself, since you can't call a funtion on a handle you don't have. However, a static get interface is provided as a convenience.  This obviates the need for the user to get a handle to the global resource pool as this is done for him here.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: set
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(set)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Simply put this resource into the global resource pool)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Simply put this resource into the global resource pool</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: set_override
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(set_override)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Put a resource into the global resource pool as an override. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Put a resource into the global resource pool as an override.  This means it gets put at the head of the list and is searched before other existing resources that occupy the same position in the name map or the type map.  The default is to override both the name and type maps.  However, using the <i>override</i> argument you can specify that either the name map or type map is overridden.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: get_by_name
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(get_by_name)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(looks up a resource by <i>name</i> in the name map. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>looks up a resource by <i>name</i> in the name map. The first resource with the specified nam, whose type is the current type, and is visible in the specified <i>scope</i> is returned, if one exists.  The <i>rpterr</i> flag indicates whether or not an error should be reported if the search fails.  If <i>rpterr</i> is set to one then a failure message is issued, including suggested spelling alternatives, based on resource names that exist in the database, gathered by the spell checker.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: get_by_type
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(get_by_type)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(looks up a resource by <i>type_handle</i> in the type map. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>looks up a resource by <i>type_handle</i> in the type map. The first resource with the specified <i>type_handle</i> that is visible in the specified <i>scope</i> is returned, if one exists. Null is returned if there is no resource matching the specifications.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: Read/Write Interface
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(Read/Write Interface)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(<link target="read" name="read" original="&lt; read &gt;"> and <link target="write" name="write" original="&lt; write &gt;"> provide a type-safe interface for getting and setting the object in the resource container. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p><link target="read" name="read" original="&lt; read &gt;"> and <link target="write" name="write" original="&lt; write &gt;"> provide a type-safe interface for getting and setting the object in the resource container.  The interface is type safe because the value argument for <link target="write" name="write" original="&lt; write &gt;"> and the return value of <link target="read" name="read" original="&lt; read &gt;"> are T, the type supplied in the class parameter. If either of these functions is used in an incorrect type context the compiler will complain.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: read
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(read)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Return the object stored in the resource container. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Return the object stored in the resource container.  If an <i>accessor</i> object is supplied then also update the accessor record for this resource.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: write
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(write)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Modify the object stored in this resource container. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Modify the object stored in this resource container.  If the resource is read-only then issue an error message and return without modifying the object in the container.  If the resource is not read-only and an <i>accessor</i> object has been supplied then also update the accessor record.  Lastly, replace the object value in the container with the value supplied as the argument, <i>t</i>, and release any processes blocked on <link target="uvm_resource_base::wait_modified" name="uvm_resource_base::wait_modified" original="&lt; uvm_resource_base::wait_modified &gt;">.  If the value to be written is the same as the value already present in the resource then the write is not done.  That also means that the accessor record is not updated and the modified bit is not set.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: Priority
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(Priority)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Group)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Functions for manipulating the search priority of resources. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Functions for manipulating the search priority of resources.  These implementations of the interface defined in the base class delegate to the resource pool.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: set priority
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(set priority)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(Change the search priority of the resource based on the value of the priority enum argument, <i>pri</i>.)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>Change the search priority of the resource based on the value of the priority enum argument, <i>pri</i>.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicTitle: get_highest_precedence
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] | [uvm_resource #(T)] | | QualifiedName(get_highest_precedence)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | TopicType(function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Keyword(Function)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | NumChilderen(0)
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Summary(In a queue of resources, locate the first one with the highest precedence whose type is T. )
| | [uvm_resource.svh] | [uvm_resource #(T)] | | Body(<p>In a queue of resources, locate the first one with the highest precedence whose type is T.  This function is static so that it can be called from anywhere.</p>)
| | [uvm_resource.svh] | [uvm_resource #(T)] | +-------------------------------------------------------------------
| | [uvm_resource.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_resource_db.svh
| +-------------------------------------------------------------------
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | TopicTitle: UVM Resource Database
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | QualifiedName(UVM Resource Database)
| | [uvm_resource_db.svh] | TopicType(section)
| | [uvm_resource_db.svh] | Keyword(Title)
| | [uvm_resource_db.svh] | NumChilderen(0)
| | [uvm_resource_db.svh] | Summary(Topic: Intro)
| | [uvm_resource_db.svh] | Body(<p>Topic: Intro</p><p>The <link target="uvm_resource_db" name="uvm_resource_db" original="&lt; uvm_resource_db &gt;"> class provides a convenience interface for the resources facility.  In many cases basic operations such as creating and setting a resource or getting a resource could take multiple lines of code using the interfaces in <link target="uvm_resource_base" name="uvm_resource_base" original="&lt; uvm_resource_base &gt;"> or <link target="uvm_resource#(T)" name="uvm_resource#(T)" original="&lt; uvm_resource#(T) &gt;">.  The convenience layer in <link target="uvm_resource_db" name="uvm_resource_db" original="&lt; uvm_resource_db &gt;"> reduces many of those operations to a single line of code.</p><p>If the run-time <i>+UVM_RESOURCE_DB_TRACE</i> command line option is specified, all resource DB accesses (read and write) are displayed.</p>)
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | TopicTitle: uvm_resource_db
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | QualifiedName(uvm_pkg::uvm_resource_db)
| | [uvm_resource_db.svh] | TopicType(class)
| | [uvm_resource_db.svh] | Keyword(class)
| | [uvm_resource_db.svh] | NumChilderen(10)
| | [uvm_resource_db.svh] | Summary(All of the functions in uvm_resource_db#(T) are static, so they must be called using the :: operator. )
| | [uvm_resource_db.svh] | Body(<p>All of the functions in uvm_resource_db#(T) are static, so they must be called using the :: operator.  For example:</p><blockquote><pre>uvm_resource_db#(int)::set(&quot;A&quot;, &quot;*&quot;, 17, this);
</pre></blockquote><p>The parameter value &quot;int&quot; identifies the resource type as uvm_resource#(int).  Thus, the type of the object in the resource container is int. This maintains the type-safety characteristics of resource operations.</p>)
| | [uvm_resource_db.svh] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | | Children
| | [uvm_resource_db.svh] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: get_by_type
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::get_by_type)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Get a resource by type. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Get a resource by type.  The type is specified in the db class parameter so the only argument to this function is the <i>scope</i>.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: get_by_name
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::get_by_name)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Imports a resource by <i>name</i>. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Imports a resource by <i>name</i>.  The first argument is the <i>name</i> of the resource to be retrieved and the second argument is the current <i>scope</i>. The <i>rpterr</i> flag indicates whether or not to generate a warning if no matching resource is found.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: set_default
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::set_default)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(add a new item into the resources database. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>add a new item into the resources database.  The item will not be written to so it will have its default value. The resource is created using <i>name</i> and <i>scope</i> as the lookup parameters.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: set
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::set)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Create a new resource, write a <i>val</i> to it, and set it into the database using <i>name</i> and <i>scope</i> as the lookup parameters. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Create a new resource, write a <i>val</i> to it, and set it into the database using <i>name</i> and <i>scope</i> as the lookup parameters. The <i>accessor</i> is used for auditting.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: set_anonymous
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::set_anonymous)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Create a new resource, write a <i>val</i> to it, and set it into the database. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Create a new resource, write a <i>val</i> to it, and set it into the database.  The resource has no name and therefore will not be entered into the name map. But is does have a <i>scope</i> for lookup purposes. The <i>accessor</i> is used for auditting.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: read_by_name
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::read_by_name)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(locate a resource by <i>name</i> and <i>scope</i> and read its value. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>locate a resource by <i>name</i> and <i>scope</i> and read its value. The value is returned through the output argument <i>val</i>.  The return value is a bit that indicates whether or not the read was successful. The <i>accessor</i> is used for auditting.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: read_by_type
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::read_by_type)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Read a value by type. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Read a value by type.  The value is returned through the output argument <i>val</i>.  The <i>scope</i> is used for the lookup. The return value is a bit that indicates whether or not the read is successful. The <i>accessor</i> is used for auditting.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: write_by_name
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::write_by_name)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(write a <i>val</i> into the resources database. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>write a <i>val</i> into the resources database.  First, look up the resource by <i>name</i> and <i>scope</i>.  If it is not located then add a new resource to the database and then write its value.</p><p>Because the <i>scope</i> is matched to a resource which may be a regular expression, and consequently may target other scopes beyond the <i>scope</i> argument. Care must be taken with this function. If a <link target="get_by_name" name="get_by_name" original="&lt; get_by_name &gt;"> match is found for <i>name</i> and <i>scope</i> then <i>val</i> will be written to that matching resource and thus may impact other scopes which also match the resource.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: write_by_type
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::write_by_type)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(write a <i>val</i> into the resources database. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>write a <i>val</i> into the resources database.  First, look up the resource by type.  If it is not located then add a new resource to the database and then write its value.</p><p>Because the <i>scope</i> is matched to a resource which may be a regular expression, and consequently may target other scopes beyond the <i>scope</i> argument. Care must be taken with this function. If a <link target="get_by_name" name="get_by_name" original="&lt; get_by_name &gt;"> match is found for <i>name</i> and <i>scope</i> then <i>val</i> will be written to that matching resource and thus may impact other scopes which also match the resource.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicTitle: dump
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db] | | QualifiedName(uvm_pkg::uvm_resource_db::dump)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Keyword(function)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Summary(Dump all the resources in the resource pool. )
| | [uvm_resource_db.svh] | [uvm_resource_db] | | Body(<p>Dump all the resources in the resource pool. This is useful for debugging purposes.  This function does not use the parameter T, so it will dump the same thing -- the entire database -- no matter the value of the parameter.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | TopicTitle: uvm_resource_db_options
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | QualifiedName(uvm_pkg::uvm_resource_db_options)
| | [uvm_resource_db.svh] | TopicType(class)
| | [uvm_resource_db.svh] | Keyword(Class)
| | [uvm_resource_db.svh] | NumChilderen(3)
| | [uvm_resource_db.svh] | Summary(Provides a namespace for managing options for the resources DB facility. )
| | [uvm_resource_db.svh] | Body(<p>Provides a namespace for managing options for the resources DB facility.  The only thing allowed in this class is static local data members and static functions for manipulating and retrieving the value of the data members.  The static local data members represent options and settings that control the behavior of the resources DB facility.</p>)
| | [uvm_resource_db.svh] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | | Children
| | [uvm_resource_db.svh] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicTitle: turn_on_tracing
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | QualifiedName(uvm_pkg::uvm_resource_db_options::turn_on_tracing)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Keyword(Function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Summary(Turn tracing on for the resource database. )
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Body(<p>Turn tracing on for the resource database. This causes all reads and writes to the database to display information about the accesses. Tracing is off by default.</p><p>This method is implicitly called by the <i>+UVM_RESOURCE_DB_TRACE</i>.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicTitle: turn_off_tracing
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | QualifiedName(uvm_pkg::uvm_resource_db_options::turn_off_tracing)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Keyword(Function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Summary(Turn tracing off for the resource database.)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Body(<p>Turn tracing off for the resource database.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicTitle: is_tracing
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | QualifiedName(uvm_pkg::uvm_resource_db_options::is_tracing)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | TopicType(function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Keyword(Function)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | NumChilderen(0)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Summary(Returns 1 if the tracing facility is on and 0 if it is off.)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | | Body(<p>Returns 1 if the tracing facility is on and 0 if it is off.</p>)
| | [uvm_resource_db.svh] | [uvm_resource_db_options] | +-------------------------------------------------------------------
| | [uvm_resource_db.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_root.svh
| +-------------------------------------------------------------------
| | [uvm_root.svh] +-------------------------------------------------------------------
| | [uvm_root.svh] | TopicTitle: uvm_root
| | [uvm_root.svh] +-------------------------------------------------------------------
| | [uvm_root.svh] | QualifiedName(uvm_pkg::uvm_root)
| | [uvm_root.svh] | TopicType(class)
| | [uvm_root.svh] | Keyword(CLASS)
| | [uvm_root.svh] | NumChilderen(9)
| | [uvm_root.svh] | Summary(The <i>uvm_root</i> class serves as the implicit top-level and phase controller for all UVM components. )
| | [uvm_root.svh] | Body(<p>The <i>uvm_root</i> class serves as the implicit top-level and phase controller for all UVM components. Users do not directly instantiate <i>uvm_root</i>. The UVM automatically creates a single instance of <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;"> that users can access via the global (uvm_pkg-scope) variable, <i>uvm_top</i>.</p><p>(see uvm_ref_root.gif)</p><p>The <i>uvm_top</i> instance of <i>uvm_root</i> plays several key roles in the UVM.</p><dl><de> Implicit top-level</de><dd>The <i>uvm_top</i> serves as an implicit top-level component. Any component whose parent is specified as NULL becomes a child of <i>uvm_top</i>. Thus, all UVM components in simulation are descendants of <i>uvm_top</i>.</dd><de> Phase control</de><dd><i>uvm_top</i> manages the phasing for all components.</dd><de> Search</de><dd>Use <i>uvm_top</i> to search for components based on their hierarchical name. See <link target="find" name="find" original="&lt; find &gt;"> and <link target="find_all" name="find_all" original="&lt; find_all &gt;">.</dd><de> Report configuration</de><dd>Use <i>uvm_top</i> to globally configure report verbosity, log files, and actions. For example, <i>uvm_top.set_report_verbosity_level_hier(UVM_FULL)</i> would set full verbosity for all components in simulation.</dd><de> Global reporter</de><dd>Because <i>uvm_top</i> is globally accessible (in uvm_pkg scope), UVM's reporting mechanism is accessible from anywhere outside <i>uvm_component</i>, such as in modules and sequences. See <link target="uvm_report_error" name="uvm_report_error" original="&lt; uvm_report_error &gt;">, <link target="uvm_report_warning" name="uvm_report_warning" original="&lt; uvm_report_warning &gt;">, and other global methods.</dd></dl><p>The <i>uvm_top</i> instance checks during the end_of_elaboration phase if any errors have been generated so far. If errors are found an UVM_FATAL error is being generated as result so that the simulation will not continue to the start_of_simulation_phase.</p>)
| | [uvm_root.svh] | +-------------------------------------------------------------------
| | [uvm_root.svh] | | Children
| | [uvm_root.svh] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: run_test
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::run_test)
| | [uvm_root.svh] | [uvm_root] | | TopicType(task)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Task)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(Phases all components through all registered phases. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>Phases all components through all registered phases. If the optional test_name argument is provided, or if a command-line plusarg, +UVM_TESTNAME=TEST_NAME, is found, then the specified component is created just prior to phasing. The test may contain new verification components or the entire testbench, in which case the test and testbench can be chosen from the command line without forcing recompilation. If the global (package) variable, finish_on_completion, is set, then $finish is called after phasing completes.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: top_levels
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::top_levels)
| | [uvm_root.svh] | [uvm_root] | | TopicType(variable)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Variable)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(This variable is a list of all of the top level components in UVM. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>This variable is a list of all of the top level components in UVM. It includes the uvm_test_top component that is created by <link target="run_test" name="run_test" original="&lt; run_test &gt;"> as well as any other top level components that have been instantiated anywhere in the hierarchy.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: find
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::find)
| | [uvm_root.svh] | [uvm_root] | | TopicType(function)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Function)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary()
| | [uvm_root.svh] | [uvm_root] | | Body()
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: find_all
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::find_all)
| | [uvm_root.svh] | [uvm_root] | | TopicType(function)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Function)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(Returns the component handle (find) or list of components handles (find_all) matching a given string. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>Returns the component handle (find) or list of components handles (find_all) matching a given string. The string may contain the wildcards,</p><ul><li>and ?. Strings beginning with '.' are absolute path names. If optional comp arg is provided, then search begins from that component down (default=all components).</li></ul>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: print_topology
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::print_topology)
| | [uvm_root.svh] | [uvm_root] | | TopicType(function)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Function)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(Print the verification environment's component topology. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>Print the verification environment's component topology. The <i>printer</i> is a <link target="uvm_printer" name="uvm_printer" original="&lt; uvm_printer &gt;"> object that controls the format of the topology printout; a <i>null</i> printer prints with the default output.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: enable_print_topology
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::enable_print_topology)
| | [uvm_root.svh] | [uvm_root] | | TopicType(variable)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Variable)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(If set, then the entire testbench topology is printed just after completion of the end_of_elaboration phase.)
| | [uvm_root.svh] | [uvm_root] | | Body(<p>If set, then the entire testbench topology is printed just after completion of the end_of_elaboration phase.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: finish_on_completion
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::finish_on_completion)
| | [uvm_root.svh] | [uvm_root] | | TopicType(variable)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Variable)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(If set, then run_test will call $finish after all phases are executed.)
| | [uvm_root.svh] | [uvm_root] | | Body(<p>If set, then run_test will call $finish after all phases are executed.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: set_timeout
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_pkg::uvm_root::set_timeout)
| | [uvm_root.svh] | [uvm_root] | | TopicType(function)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Function)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(Specifies the timeout for task-based phases. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>Specifies the timeout for task-based phases. Default is 0, i.e. no timeout.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | TopicTitle: uvm_top
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] | [uvm_root] | | QualifiedName(uvm_top)
| | [uvm_root.svh] | [uvm_root] | | TopicType(variable)
| | [uvm_root.svh] | [uvm_root] | | Keyword(Variable)
| | [uvm_root.svh] | [uvm_root] | | NumChilderen(0)
| | [uvm_root.svh] | [uvm_root] | | Summary(This is the top-level that governs phase execution and provides component search interface. )
| | [uvm_root.svh] | [uvm_root] | | Body(<p>This is the top-level that governs phase execution and provides component search interface. See <link target="uvm_root" name="uvm_root" original="&lt; uvm_root &gt;"> for more information.</p>)
| | [uvm_root.svh] | [uvm_root] | +-------------------------------------------------------------------
| | [uvm_root.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_runtime_phases.svh
| +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: UVM Run-Time Phases
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(UVM Run-Time Phases)
| | [uvm_runtime_phases.svh] | TopicType(section)
| | [uvm_runtime_phases.svh] | Keyword(Title)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(The run-time schedule is the pre-defined phase schedule which runs concurrently to the <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> global run phase. )
| | [uvm_runtime_phases.svh] | Body(<p>The run-time schedule is the pre-defined phase schedule which runs concurrently to the <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> global run phase. By default, all &lt;uvm_component&gt;s using the run-time schedule are synchronized with respect to the pre-defined phases in the schedule. It is possible for components to belong to different domains in which case their schedules can be unsynchronized.</p><p>The run-time phases are executed in the sequence they are specified below.</p>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_pre_reset_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_pre_reset_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Before reset is asserted.)
| | [uvm_runtime_phases.svh] | Body(<p>Before reset is asserted.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::pre_reset_phase" name="uvm_component::pre_reset_phase" original="&lt; uvm_component::pre_reset_phase &gt;"> method. This phase starts at the same time as the <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> unless a user defined phase is inserted in front of this phase.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that power has been applied but not necessarily valid or stable.</li><li>There should not have been any active clock edges before entry into this phase.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Wait for power good.</li><li>Components connected to virtual interfaces should initialize their output to X's or Z's.</li><li>Initialize the clock signals to a valid value</li><li>Assign reset signals to X (power-on reset).</li><li>Wait for reset signal to be asserted if not driven by the verification environment.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>Reset signal, if driven by the verification environment, is ready to be asserted.</li><li>Reset signal, if not driven by the verification environment, is asserted.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_reset_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_reset_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Reset is asserted.)
| | [uvm_runtime_phases.svh] | Body(<p>Reset is asserted.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::reset_phase" name="uvm_component::reset_phase" original="&lt; uvm_component::reset_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the hardware reset signal is ready to be asserted.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Assert reset signals.</li><li>Components connected to virtual interfaces should drive their output to their specified reset or idle value.</li><li>Components and environments should initialize their state variables.</li><li>Clock generators start generating active edges.</li><li>De-assert the reset signal(s)  just before exit.</li><li>Wait for the reset signal(s) to be de-asserted.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>Reset signal has just been de-asserted.</li><li>Main or base clock is working and stable.</li><li>At least one active clock edge has occurred.</li><li>Output signals and state variables have been initialized.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_post_reset_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_post_reset_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(After reset is de-asserted.)
| | [uvm_runtime_phases.svh] | Body(<p>After reset is de-asserted.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::post_reset_phase" name="uvm_component::post_reset_phase" original="&lt; uvm_component::post_reset_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the DUT reset signal has been de-asserted.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Components should start behavior appropriate for reset being inactive. For example, components may start to transmit idle transactions or interface training and rate negotiation. This behavior typically continues beyond the end of this phase.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>The testbench and the DUT are in a known, active state.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_pre_configure_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_pre_configure_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Before the DUT is configured by the SW.)
| | [uvm_runtime_phases.svh] | Body(<p>Before the DUT is configured by the SW.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::pre_configure_phase" name="uvm_component::pre_configure_phase" original="&lt; uvm_component::pre_configure_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the DUT has been completed reset and is ready to be configured.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Procedurally modify the DUT configuration information as described in the environment (and that will be eventually uploaded into the DUT).</li><li>Wait for components required for DUT configuration to complete training and rate negotiation.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>DUT configuration information is defined.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_configure_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_configure_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(The SW configures the DUT.)
| | [uvm_runtime_phases.svh] | Body(<p>The SW configures the DUT.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::configure_phase" name="uvm_component::configure_phase" original="&lt; uvm_component::configure_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the DUT is ready to be configured.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Components required for DUT configuration execute transactions normally.</li><li>Set signals and program the DUT and memories (e.g. read/write operations and sequences) to match the desired configuration for the test and environment.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>The DUT has been configured and is ready to operate normally.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_post_configure_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_post_configure_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(After the SW has configured the DUT.)
| | [uvm_runtime_phases.svh] | Body(<p>After the SW has configured the DUT.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::post_configure_phase" name="uvm_component::post_configure_phase" original="&lt; uvm_component::post_configure_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the configuration information has been fully uploaded.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Wait for configuration information to fully propagate and take effect.</li><li>Wait for components to complete training and rate negotiation.</li><li>Enable the DUT.</li><li>Sample DUT configuration coverage.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>The DUT has been fully configured and enabled and is ready to start operating normally.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_pre_main_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_pre_main_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Before the primary test stimulus starts.)
| | [uvm_runtime_phases.svh] | Body(<p>Before the primary test stimulus starts.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::pre_main_phase" name="uvm_component::pre_main_phase" original="&lt; uvm_component::pre_main_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>Indicates that the DUT has been fully configured.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Wait for components to complete training and rate negotiation.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All components have completed training and rate negotiation.</li><li>All components are ready to generate and/or observe normal stimulus.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_main_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_main_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Primary test stimulus.)
| | [uvm_runtime_phases.svh] | Body(<p>Primary test stimulus.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::main_phase" name="uvm_component::main_phase" original="&lt; uvm_component::main_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>The stimulus associated with the test objectives is ready to be applied.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Components execute transactions normally.</li><li>Data stimulus sequences are started.</li><li>Wait for a time-out or certain amount of time, or completion of stimulus sequences.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>Enough stimulus has been applied to meet the primary stimulus objective of the test.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_post_main_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_post_main_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(After enough of the primary test stimulus.)
| | [uvm_runtime_phases.svh] | Body(<p>After enough of the primary test stimulus.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::post_main_phase" name="uvm_component::post_main_phase" original="&lt; uvm_component::post_main_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>The primary stimulus objective of the test has been met.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Included for symmetry.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>None.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_pre_shutdown_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_pre_shutdown_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Before things settle down.)
| | [uvm_runtime_phases.svh] | Body(<p>Before things settle down.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::pre_shutdown_phase" name="uvm_component::pre_shutdown_phase" original="&lt; uvm_component::pre_shutdown_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>None.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Included for symmetry.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>None.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_shutdown_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_shutdown_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(Letting things settle down.)
| | [uvm_runtime_phases.svh] | Body(<p>Letting things settle down.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::shutdown_phase" name="uvm_component::shutdown_phase" original="&lt; uvm_component::shutdown_phase &gt;"> method.</p><h4 class=CHeading> Upon Entry</h4><ul><li>None.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Wait for all data to be drained out of the DUT.</li><li>Extract data still buffered in the DUT, usually through read/write operations or sequences.</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All data has been drained or extracted from the DUT.</li><li>All interfaces are idle.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | TopicTitle: uvm_post_shutdown_phase
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| | [uvm_runtime_phases.svh] | QualifiedName(uvm_pkg::uvm_post_shutdown_phase)
| | [uvm_runtime_phases.svh] | TopicType(class)
| | [uvm_runtime_phases.svh] | Keyword(Class)
| | [uvm_runtime_phases.svh] | NumChilderen(0)
| | [uvm_runtime_phases.svh] | Summary(After things have settled down.)
| | [uvm_runtime_phases.svh] | Body(<p>After things have settled down.</p><p><link target="uvm_task_phase" name="uvm_task_phase" original="&lt; uvm_task_phase &gt;"> that calls the <link target="uvm_component::post_shutdown_phase" name="uvm_component::post_shutdown_phase" original="&lt; uvm_component::post_shutdown_phase &gt;"> method.  The end of this phase is synchronized to the end of the <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> phase unless a user defined phase is added after this phase.</p><h4 class=CHeading> Upon Entry</h4><ul><li>No more &quot;data&quot; stimulus is applied to the DUT.</li></ul><h4 class=CHeading> Typical Uses</h4><ul><li>Perform final checks that require run-time access to the DUT (e.g. read accounting registers or dump the content of memories).</li></ul><h4 class=CHeading> Exit Criteria</h4><ul><li>All run-time checks have been satisfied.</li><li>The <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> phase is ready to end.</li></ul>)
| | [uvm_runtime_phases.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_scoreboard.svh
| +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | TopicTitle: uvm_scoreboard
| | [uvm_scoreboard.svh] +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | QualifiedName(uvm_pkg::uvm_scoreboard)
| | [uvm_scoreboard.svh] | TopicType(class)
| | [uvm_scoreboard.svh] | Keyword(CLASS)
| | [uvm_scoreboard.svh] | NumChilderen(1)
| | [uvm_scoreboard.svh] | Summary(The uvm_scoreboard virtual class should be used as the base class for user-defined scoreboards.)
| | [uvm_scoreboard.svh] | Body(<p>The uvm_scoreboard virtual class should be used as the base class for user-defined scoreboards.</p><p>Deriving from uvm_scoreboard will allow you to distinguish scoreboards from other component types inheriting directly from uvm_component. Such scoreboards will automatically inherit and benefit from features that may be added to uvm_scoreboard in the future.</p>)
| | [uvm_scoreboard.svh] | +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | | Children
| | [uvm_scoreboard.svh] | +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | TopicTitle: new
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | QualifiedName(uvm_pkg::uvm_scoreboard::new)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | TopicType(function)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | Keyword(Function)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | NumChilderen(0)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_scoreboard.svh] | [uvm_scoreboard] | +-------------------------------------------------------------------
| | [uvm_scoreboard.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence.svh
| +-------------------------------------------------------------------
| | [uvm_sequence.svh] +-------------------------------------------------------------------
| | [uvm_sequence.svh] | TopicTitle: uvm_sequence #(REQ,RSP)
| | [uvm_sequence.svh] +-------------------------------------------------------------------
| | [uvm_sequence.svh] | QualifiedName(uvm_sequence #(REQ,RSP))
| | [uvm_sequence.svh] | TopicType(class)
| | [uvm_sequence.svh] | Keyword(CLASS)
| | [uvm_sequence.svh] | NumChilderen(4)
| | [uvm_sequence.svh] | Summary(The uvm_sequence class provides the interfaces necessary in order to create streams of sequence items and/or other sequences.)
| | [uvm_sequence.svh] | Body(<p>The uvm_sequence class provides the interfaces necessary in order to create streams of sequence items and/or other sequences.</p>)
| | [uvm_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | | Children
| | [uvm_sequence.svh] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicTitle: new
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Summary(Creates and initializes a new sequence object.)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Body(<p>Creates and initializes a new sequence object.</p>)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicTitle: send_request
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | QualifiedName(send_request)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Summary(This method will send the request item to the sequencer, which will forward it to the driver. )
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Body(<p>This method will send the request item to the sequencer, which will forward it to the driver.  If the rerandomize bit is set, the item will be randomized before being sent to the driver. The send_request function may only be called after <link target="uvm_sequence_base::wait_for_grant" name="uvm_sequence_base::wait_for_grant" original="&lt; uvm_sequence_base::wait_for_grant &gt;"> returns.</p>)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicTitle: get_current_item
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | QualifiedName(get_current_item)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Summary(Returns the request item currently being executed by the sequencer. )
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Body(<p>Returns the request item currently being executed by the sequencer. If the sequencer is not currently executing an item, this method will return null.</p><p>The sequencer is executing an item from the time that get_next_item or peek is called until the time that get or item_done is called.</p><p>Note that a driver that only calls get will never show a current item, since the item is completed at the same time as it is requested.</p>)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicTitle: get_response
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | QualifiedName(get_response)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | TopicType(task)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Summary(By default, sequences must retrieve responses by calling get_response. )
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | | Body(<p>By default, sequences must retrieve responses by calling get_response. If no transaction_id is specified, this task will return the next response sent to this sequence.  If no response is available in the response queue, the method will block until a response is recieved.</p><p>If a transaction_id is parameter is specified, the task will block until a response with that transaction_id is received in the response queue.</p><p>The default size of the response queue is 8.  The get_response method must be called soon enough to avoid an overflow of the response queue to prevent responses from being dropped.</p><p>If a response is dropped in the response queue, an error will be reported unless the error reporting is disabled via set_response_queue_error_report_disabled.</p>)
| | [uvm_sequence.svh] | [uvm_sequence #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequence.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_base.svh
| +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | TopicTitle: uvm_sequence_base
| | [uvm_sequence_base.svh] +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | QualifiedName(uvm_pkg::uvm_sequence_base)
| | [uvm_sequence_base.svh] | TopicType(class)
| | [uvm_sequence_base.svh] | Keyword(CLASS)
| | [uvm_sequence_base.svh] | NumChilderen(45)
| | [uvm_sequence_base.svh] | Summary(The uvm_sequence_base class provides the interfaces needed to create streams of sequence items and/or other sequences.)
| | [uvm_sequence_base.svh] | Body(<p>The uvm_sequence_base class provides the interfaces needed to create streams of sequence items and/or other sequences.</p><p>A sequence is executed by calling its <link target="start" name="start" original="&lt; start &gt;"> method, either directly or invocation of any of the `uvm_do_* macros.</p><h4 class=CHeading> Executing sequences via <link target="start" name="start" original="&lt; start &gt;"></h4><p>A sequence's <link target="start" name="start" original="&lt; start &gt;"> method has a <i>parent_sequence</i> argument that controls whether <link target="pre_do" name="pre_do" original="&lt; pre_do &gt;">, <link target="mid_do" name="mid_do" original="&lt; mid_do &gt;">, and <link target="post_do" name="post_do" original="&lt; post_do &gt;"> are called <b>in the parent</b> sequence. It also has a <i>call_pre_post</i> argument that controls whether its <link target="pre_body" name="pre_body" original="&lt; pre_body &gt;"> and <link target="post_body" name="post_body" original="&lt; post_body &gt;"> methods are called. In all cases, its <link target="pre_start" name="pre_start" original="&lt; pre_start &gt;"> and <link target="post_start" name="post_start" original="&lt; post_start &gt;"> methods are always called.</p><p>When <link target="start" name="start" original="&lt; start &gt;"> is called directly, you can provide the appropriate arguments according to your application.</p><p>The sequence execution flow looks like this</p><p>User code</p><blockquote><pre>sub_seq.randomize(...); // optional
sub_seq.start(seqr, parent_seq, priority, call_pre_post)

</pre></blockquote><p>The following methods are called, in order</p><blockquote><pre>sub_seq.pre_start()        (task)
sub_seq.pre_body()         (task)  if call_pre_post==1
  parent_seq.pre_do(0)     (task)  if parent_sequence!=null
  parent_seq.mid_do(this)  (func)  if parent_sequence!=null
sub_seq.body               (task)  YOUR STIMULUS CODE
  parent_seq.post_do(this) (func)  if parent_sequence!=null
sub_seq.post_body()        (task)  if call_pre_post==1
sub_seq.post_start()       (task)
</pre></blockquote><h4 class=CHeading> Executing sub-sequences via `uvm_do macros</h4><p>A sequence can also be indirectly started as a child in the <link target="body" name="body" original="&lt; body &gt;"> of a parent sequence. The child sequence's <link target="start" name="start" original="&lt; start &gt;"> method is called indirectly by invoking any of the `uvm_do macros. In thise cases, <link target="start" name="start" original="&lt; start &gt;"> is called with <i>call_pre_post</i> set to 0, preventing the started sequence's <link target="pre_body" name="pre_body" original="&lt; pre_body &gt;"> and <link target="post_body" name="post_body" original="&lt; post_body &gt;"> methods from being called. During execution of the child sequence, the parent's <link target="pre_do" name="pre_do" original="&lt; pre_do &gt;">, <link target="mid_do" name="mid_do" original="&lt; mid_do &gt;">, and <link target="post_do" name="post_do" original="&lt; post_do &gt;"> methods are called.</p><p>The sub-sequence execution flow looks like</p><p>User code</p><blockquote><pre>`uvm_do_with_prior(seq_seq, { constraints }, priority)

</pre></blockquote><p>The following methods are called, in order</p><blockquote><pre>sub_seq.pre_start()         (task)
parent_seq.pre_do(0)        (task)
parent_req.mid_do(sub_seq)  (func)
  sub_seq.body()            (task)
parent_seq.post_do(sub_seq) (func)
sub_seq.post_start()        (task)

</pre></blockquote><p>Remember, it is the <b>parent</b> sequence's pre|mid|post_do that are called, not the sequence being executed.</p><h4 class=CHeading> Executing sequence items via <link target="start_item" name="start_item" original="&lt; start_item &gt;">/<link target="finish_item" name="finish_item" original="&lt; finish_item &gt;"> or `uvm_do macros</h4><p>Items are started in the <link target="body" name="body" original="&lt; body &gt;"> of a parent sequence via calls to <link target="start_item" name="start_item" original="&lt; start_item &gt;">/<link target="finish_item" name="finish_item" original="&lt; finish_item &gt;"> or invocations of any of the `uvm_do macros. The <link target="pre_do" name="pre_do" original="&lt; pre_do &gt;">, <link target="mid_do" name="mid_do" original="&lt; mid_do &gt;">, and <link target="post_do" name="post_do" original="&lt; post_do &gt;"> methods of the parent sequence will be called as the item is executed.</p><p>The sequence-item execution flow looks like</p><p>User code</p><blockquote><pre>parent_seq.start_item(item, priority);
item.randomize(...) [with {constraints}];
parent_seq.finish_item(item);

or

`uvm_do_with_prior(item, constraints, priority)

</pre></blockquote><p>The following methods are called, in order</p><blockquote><pre>sequencer.wait_for_grant(prior) (task) \ start_item  \
parent_seq.pre_do(1)            (task) /              \
                                                   `uvm_do* macros
parent_seq.mid_do(item)         (func) \              /
sequencer.send_request(item)    (func)  \finish_item /
sequencer.wait_for_item_done()  (task)  /
parent_seq.post_do(item)        (func) /
</pre></blockquote><p>Attempting to execute a sequence via <link target="start_item" name="start_item" original="&lt; start_item &gt;">/<link target="finish_item" name="finish_item" original="&lt; finish_item &gt;"> will produce a run-time error.</p>)
| | [uvm_sequence_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | | Children
| | [uvm_sequence_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: do_not_randomize
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::do_not_randomize)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(variable)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Variable)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(If set, prevents the sequence from being randomized before being executed by the `uvm_do*() and `uvm_rand_send*() macros, or as a default sequence.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>If set, prevents the sequence from being randomized before being executed by the `uvm_do*() and `uvm_rand_send*() macros, or as a default sequence.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: new
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::new)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(The constructor for uvm_sequence_base.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>The constructor for uvm_sequence_base.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: is_item
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::is_item)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns 1 on items and 0 on sequences. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns 1 on items and 0 on sequences. As this object is a sequence, <i>is_item</i> will always return 0.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: get_sequence_state
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::get_sequence_state)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns the sequence state as an enumerated value. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns the sequence state as an enumerated value. Can use to wait on the sequence reaching or changing from one or more states.</p><blockquote><pre>wait(get_sequence_state() &amp; (STOPPED|FINISHED));</pre></blockquote>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: wait_for_sequence_state
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::wait_for_sequence_state)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Waits until the sequence reaches the given <i>state</i>. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Waits until the sequence reaches the given <i>state</i>. If the sequence is already in this state, this method returns immediately. Convenience for wait ( get_sequence_state == <i>state</i> );</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: Sequence Execution
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(Sequence Execution)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: start
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::start)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Executes this sequence, returning when the sequence has completed.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Executes this sequence, returning when the sequence has completed.</p><p>The <i>sequencer</i> argument specifies the sequencer on which to run this sequence. The sequencer must be compatible with the sequence.</p><p>If <i>parent_sequence</i> is null, then this sequence is a root parent, otherwise it is a child of <i>parent_sequence</i>. The <i>parent_sequence</i>'s pre_do, mid_do, and post_do methods will be called during the execution of this sequence.</p><p>By default, the <i>priority</i> of a sequence is the priority of its parent sequence. If it is a root sequence, its default priority is 100. A different priority may be specified by <i>this_priority</i>. Higher numbers indicate higher priority.</p><p>If <i>call_pre_post</i> is set to 1 (default), then the <link target="pre_body" name="pre_body" original="&lt; pre_body &gt;"> and <link target="post_body" name="post_body" original="&lt; post_body &gt;"> tasks will be called before and after the sequence <link target="body" name="body" original="&lt; body &gt;"> is called.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: pre_start
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::pre_start)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task is a user-definable callback that is called before the optional execution of <link target="pre_body" name="pre_body" original="&lt; pre_body &gt;">. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task is a user-definable callback that is called before the optional execution of <link target="pre_body" name="pre_body" original="&lt; pre_body &gt;">. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: pre_body
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::pre_body)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task is a user-definable callback that is called before the execution of <link target="body" name="body" original="&lt; body &gt;"> <i>only</i> when the sequence is started with <link target="start" name="start" original="&lt; start &gt;">. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task is a user-definable callback that is called before the execution of <link target="body" name="body" original="&lt; body &gt;"> <i>only</i> when the sequence is started with <link target="start" name="start" original="&lt; start &gt;">. If <link target="start" name="start" original="&lt; start &gt;"> is called with <i>call_pre_post</i> set to 0, <i>pre_body</i> is not called. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: pre_do
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::pre_do)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task is a user-definable callback task that is called <i>on the parent sequence</i>, if any.the sequence has issued a wait_for_grant() call and after the sequencer has selected this sequence, and before the item is randomized.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task is a user-definable callback task that is called <i>on the parent sequence</i>, if any.the sequence has issued a wait_for_grant() call and after the sequencer has selected this sequence, and before the item is randomized.</p><p>Although pre_do is a task, consuming simulation cycles may result in unexpected behavior on the driver.</p><p>This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: mid_do
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::mid_do)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This function is a user-definable callback function that is called after the sequence item has been randomized, and just before the item is sent to the driver. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This function is a user-definable callback function that is called after the sequence item has been randomized, and just before the item is sent to the driver.  This mehod should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: body
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::body)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This is the user-defined task where the main sequence code resides. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This is the user-defined task where the main sequence code resides. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: post_do
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::post_do)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This function is a user-definable callback function that is called after the driver has indicated that it has completed the item, using either this item_done or put methods. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This function is a user-definable callback function that is called after the driver has indicated that it has completed the item, using either this item_done or put methods. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: post_body
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::post_body)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task is a user-definable callback task that is called after the execution of <link target="body" name="body" original="&lt; body &gt;"> <i>only</i> when the sequence is started with <link target="start" name="start" original="&lt; start &gt;">. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task is a user-definable callback task that is called after the execution of <link target="body" name="body" original="&lt; body &gt;"> <i>only</i> when the sequence is started with <link target="start" name="start" original="&lt; start &gt;">. If <link target="start" name="start" original="&lt; start &gt;"> is called with <i>call_pre_post</i> set to 0, <i>post_body</i> is not called. This task is a user-definable callback task that is called after the execution of the body, unless the sequence is started with call_pre_post=0. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: post_start
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::post_start)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task is a user-definable callback that is called after the optional execution of <link target="post_body" name="post_body" original="&lt; post_body &gt;">. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task is a user-definable callback that is called after the optional execution of <link target="post_body" name="post_body" original="&lt; post_body &gt;">. This method should not be called directly by the user.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: starting_phase
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::starting_phase)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(variable)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Variable)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(If non-null, specifies the phase in which this sequence was started. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>If non-null, specifies the phase in which this sequence was started. The <i>starting_phase</i> is set automatically when this sequence is started as the default sequence. See <link target="uvm_sequencer_base::start_phase_sequence" name="uvm_sequencer_base::start_phase_sequence" original="&lt; uvm_sequencer_base::start_phase_sequence &gt;">.</p><blockquote><pre>virtual task user_sequence::body();
   if (starting_phase != null)
      starting_phase.raise_objection(this,&quot;user_seq not finished&quot;);
   ...
   if (starting_phase != null)
      starting_phase.drop_objection(this,&quot;user_seq finished&quot;);
endtask</pre></blockquote>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: Sequence Control
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(Sequence Control)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: set_priority
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::set_priority)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(The priority of a sequence may be changed at any point in time. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>The priority of a sequence may be changed at any point in time.  When the priority of a sequence is changed, the new priority will be used by the sequencer the next time that it arbitrates between sequences.</p><p>The default priority value for a sequence is 100.  Higher values result in higher priorities.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: get_priority
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::get_priority)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This function returns the current priority of the sequence.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This function returns the current priority of the sequence.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: is_relevant
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::is_relevant)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(The default is_relevant implementation returns 1, indicating that the sequence is always relevant.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>The default is_relevant implementation returns 1, indicating that the sequence is always relevant.</p><p>Users may choose to override with their own virtual function to indicate to the sequencer that the sequence is not currently relevant after a request has been made.</p><p>When the sequencer arbitrates, it will call is_relevant on each requesting, unblocked sequence to see if it is relevant. If a 0 is returned, then the sequence will not be chosen.</p><p>If all requesting sequences are not relevant, then the sequencer will call wait_for_relevant on all sequences and re-arbitrate upon its return.</p><p>Any sequence that implements is_relevant must also implement wait_for_relevant so that the sequencer has a way to wait for a sequence to become relevant.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: wait_for_relevant
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::wait_for_relevant)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This method is called by the sequencer when all available sequences are not relevant. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This method is called by the sequencer when all available sequences are not relevant.  When wait_for_relevant returns the sequencer attempt to re-arbitrate.</p><p>Returning from this call does not guarantee a sequence is relevant, although that would be the ideal. The method provide some delay to prevent an infinite loop.</p><p>If a sequence defines is_relevant so that it is not always relevant (by default, a sequence is always relevant), then the sequence must also supply a wait_for_relevant method.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: lock
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::lock)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Requests a lock on the specified sequencer. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Requests a lock on the specified sequencer. If sequencer is null, the lock will be requested on the current default sequencer.</p><p>A lock request will be arbitrated the same as any other request.  A lock is granted after all earlier requests are completed and no other locks or grabs are blocking this sequence.</p><p>The lock call will return when the lock has been granted.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: grab
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::grab)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Requests a lock on the specified sequencer. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Requests a lock on the specified sequencer.  If no argument is supplied, the lock will be requested on the current default sequencer.</p><p>A grab equest is put in front of the arbitration queue. It will be arbitrated before any other requests. A grab is granted when no other grabs or locks are blocking this sequence.</p><p>The grab call will return when the grab has been granted.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: unlock
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::unlock)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Removes any locks or grabs obtained by this sequence on the specified sequencer. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Removes any locks or grabs obtained by this sequence on the specified sequencer. If sequencer is null, then the unlock will be done on the current default sequencer.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: ungrab
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::ungrab)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Removes any locks or grabs obtained by this sequence on the specified sequencer. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Removes any locks or grabs obtained by this sequence on the specified sequencer. If sequencer is null, then the unlock will be done on the current default sequencer.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: is_blocked
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::is_blocked)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns a bit indicating whether this sequence is currently prevented from running due to another lock or grab. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns a bit indicating whether this sequence is currently prevented from running due to another lock or grab. A 1 is returned if the sequence is currently blocked. A 0 is returned if no lock or grab prevents this sequence from executing. Note that even if a sequence is not blocked, it is possible for another sequence to issue a lock or grab before this sequence can issue a request.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: has_lock
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::has_lock)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns 1 if this sequence has a lock, 0 otherwise.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns 1 if this sequence has a lock, 0 otherwise.</p><p>Note that even if this sequence has a lock, a child sequence may also have a lock, in which case the sequence is still blocked from issuing operations on the sequencer.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: kill
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::kill)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This function will kill the sequence, and cause all current locks and requests in the sequence's default sequencer to be removed. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This function will kill the sequence, and cause all current locks and requests in the sequence's default sequencer to be removed. The sequence state will change to STOPPED, and its post_body() method, if  will not b</p><p>If a sequence has issued locks, grabs, or requests on sequencers other than the default sequencer, then care must be taken to unregister the sequence with the other sequencer(s) using the sequencer unregister_sequence() method.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: do_kill
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::do_kill)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This function is a user hook that is called whenever a sequence is terminated by using either sequence.kill() or sequencer.stop_sequences() (which effectively calls sequence.kill()).)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This function is a user hook that is called whenever a sequence is terminated by using either sequence.kill() or sequencer.stop_sequences() (which effectively calls sequence.kill()).</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: Sequence Item Execution
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(Sequence Item Execution)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: create_item
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::create_item)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Create_item will create and initialize a sequence_item or sequence using the factory. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Create_item will create and initialize a sequence_item or sequence using the factory.  The sequence_item or sequence will be initialized to communicate with the specified sequencer.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: start_item
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::start_item)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(<i>start_item</i> and <link target="finish_item" name="finish_item" original="&lt; finish_item &gt;"> together will initiate operation of a sequence item. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p><i>start_item</i> and <link target="finish_item" name="finish_item" original="&lt; finish_item &gt;"> together will initiate operation of a sequence item.  If the item has not already been initialized using create_item, then it will be initialized here to use the default sequencer specified by m_sequencer.  Randomization may be done between start_item and finish_item to ensure late generation</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: finish_item
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::finish_item)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(finish_item, together with start_item together will initiate operation of a sequence_item. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>finish_item, together with start_item together will initiate operation of a sequence_item.  Finish_item must be called after start_item with no delays or delta-cycles.  Randomization, or other functions may be called between the start_item and finish_item calls.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: wait_for_grant
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::wait_for_grant)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(This task issues a request to the current sequencer. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>This task issues a request to the current sequencer.  If item_priority is not specified, then the current sequence priority will be used by the arbiter. If a lock_request is made, then the sequencer will issue a lock immediately before granting the sequence.  (Note that the lock may be granted without the sequence being granted if is_relevant is not asserted).</p><p>When this method returns, the sequencer has granted the sequence, and the sequence must call send_request without inserting any simulation delay other than delta cycles.  The driver is currently waiting for the next item to be sent via the send_request call.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: send_request
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::send_request)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(The send_request function may only be called after a wait_for_grant call. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>The send_request function may only be called after a wait_for_grant call. This call will send the request item to the sequencer, which will forward it to the driver. If the rerandomize bit is set, the item will be randomized before being sent to the driver.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: wait_for_item_done
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::wait_for_item_done)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Task)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(A sequence may optionally call wait_for_item_done. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>A sequence may optionally call wait_for_item_done.  This task will block until the driver calls item_done or put.  If no transaction_id parameter is specified, then the call will return the next time that the driver calls item_done or put.  If a specific transaction_id is specified, then the call will return when the driver indicates completion of that specific item.</p><p>Note that if a specific transaction_id has been specified, and the driver has already issued an item_done or put for that transaction, then the call will hang, having missed the earlier notification.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: Response API
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(Response API)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Group)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body()
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: use_response_handler
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::use_response_handler)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(When called with enable set to 1, responses will be sent to the response handler. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>When called with enable set to 1, responses will be sent to the response handler. Otherwise, responses must be retrieved using get_response.</p><p>By default, responses from the driver are retrieved in the sequence by calling get_response.</p><p>An alternative method is for the sequencer to call the response_handler function with each response.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: get_use_response_handler
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::get_use_response_handler)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns the state of the use_response_handler bit.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns the state of the use_response_handler bit.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: response_handler
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::response_handler)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(When the use_reponse_handler bit is set to 1, this virtual task is called by the sequencer for each response that arrives for this sequence.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>When the use_reponse_handler bit is set to 1, this virtual task is called by the sequencer for each response that arrives for this sequence.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: set_response_queue_error_report_disabled
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::set_response_queue_error_report_disabled)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(By default, if the response_queue overflows, an error is reported. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>By default, if the response_queue overflows, an error is reported. The response_queue will overflow if more responses are sent to this sequence from the driver than get_response calls are made. Setting value to 0 disables these errors, while setting it to 1 enables them.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: get_response_queue_error_report_disabled
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::get_response_queue_error_report_disabled)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(When this bit is 0 (default value), error reports are generated when the response queue overflows. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>When this bit is 0 (default value), error reports are generated when the response queue overflows. When this bit is 1, no such error reports are generated.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: set_response_queue_depth
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::set_response_queue_depth)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(The default maximum depth of the response queue is 8. )
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>The default maximum depth of the response queue is 8. These method is used to examine or change the maximum depth of the response queue.</p><p>Setting the response_queue_depth to -1 indicates an arbitrarily deep response queue.  No checking is done.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: get_response_queue_depth
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::get_response_queue_depth)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Returns the current depth setting for the response queue.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Returns the current depth setting for the response queue.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicTitle: clear_response_queue
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | QualifiedName(uvm_pkg::uvm_sequence_base::clear_response_queue)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | TopicType(function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Keyword(Function)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | NumChilderen(0)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Summary(Empties the response queue for this sequence.)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | | Body(<p>Empties the response queue for this sequence.</p>)
| | [uvm_sequence_base.svh] | [uvm_sequence_base] | +-------------------------------------------------------------------
| | [uvm_sequence_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_defines.svh
| +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | TopicTitle: Sequence-Related Macros
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | QualifiedName(Sequence-Related Macros)
| | [uvm_sequence_defines.svh] | TopicType(section)
| | [uvm_sequence_defines.svh] | Keyword(Title)
| | [uvm_sequence_defines.svh] | NumChilderen(0)
| | [uvm_sequence_defines.svh] | Summary()
| | [uvm_sequence_defines.svh] | Body()
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | TopicTitle: Sequence Action Macros
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | QualifiedName(Sequence Action Macros)
| | [uvm_sequence_defines.svh] | TopicType(group)
| | [uvm_sequence_defines.svh] | Keyword(Group)
| | [uvm_sequence_defines.svh] | NumChilderen(0)
| | [uvm_sequence_defines.svh] | Summary(These macros are used to start sequences and sequence items on the default sequencer, <i>m_sequencer</i>. )
| | [uvm_sequence_defines.svh] | Body(<p>These macros are used to start sequences and sequence items on the default sequencer, <i>m_sequencer</i>. This is determined a number of ways.</p><ul><li>the sequencer handle provided in the <link target="uvm_sequence_base::start" name="uvm_sequence_base::start" original="&lt; uvm_sequence_base::start &gt;"> method</li><li>the sequencer used by the parent sequence</li><li>the sequencer that was set using the <link target="uvm_sequence_item::set_sequencer" name="uvm_sequence_item::set_sequencer" original="&lt; uvm_sequence_item::set_sequencer &gt;"> method</li></ul>)
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | TopicTitle: Sequence on Sequencer Action Macros
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | QualifiedName(Sequence on Sequencer Action Macros)
| | [uvm_sequence_defines.svh] | TopicType(group)
| | [uvm_sequence_defines.svh] | Keyword(Group)
| | [uvm_sequence_defines.svh] | NumChilderen(0)
| | [uvm_sequence_defines.svh] | Summary(These macros are used to start sequences and sequence items on a specific sequencer. )
| | [uvm_sequence_defines.svh] | Body(<p>These macros are used to start sequences and sequence items on a specific sequencer. The sequence or item is created and executed on the given sequencer.</p>)
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | TopicTitle: Sequence Action Macros for Pre-Existing Sequences
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | QualifiedName(Sequence Action Macros for Pre-Existing Sequences)
| | [uvm_sequence_defines.svh] | TopicType(group)
| | [uvm_sequence_defines.svh] | Keyword(Group)
| | [uvm_sequence_defines.svh] | NumChilderen(0)
| | [uvm_sequence_defines.svh] | Summary(These macros are used to start sequences and sequence items that do not need to be created.)
| | [uvm_sequence_defines.svh] | Body(<p>These macros are used to start sequences and sequence items that do not need to be created.</p>)
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | TopicTitle: Sequencer Subtypes
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| | [uvm_sequence_defines.svh] | QualifiedName(Sequencer Subtypes)
| | [uvm_sequence_defines.svh] | TopicType(group)
| | [uvm_sequence_defines.svh] | Keyword(Group)
| | [uvm_sequence_defines.svh] | NumChilderen(0)
| | [uvm_sequence_defines.svh] | Summary()
| | [uvm_sequence_defines.svh] | Body()
| | [uvm_sequence_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequence_item.svh
| +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | TopicTitle: uvm_sequence_item
| | [uvm_sequence_item.svh] +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | QualifiedName(uvm_pkg::uvm_sequence_item)
| | [uvm_sequence_item.svh] | TopicType(class)
| | [uvm_sequence_item.svh] | Keyword(CLASS)
| | [uvm_sequence_item.svh] | NumChilderen(21)
| | [uvm_sequence_item.svh] | Summary(The base class for user-defined sequence items and also the base class for the uvm_sequence class. )
| | [uvm_sequence_item.svh] | Body(<p>The base class for user-defined sequence items and also the base class for the uvm_sequence class. The uvm_sequence_item class provides the basic functionality for objects, both sequence items and sequences, to operate in the sequence mechanism.</p>)
| | [uvm_sequence_item.svh] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | | Children
| | [uvm_sequence_item.svh] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: new
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::new)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(The constructor method for uvm_sequence_item.)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>The constructor method for uvm_sequence_item.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_sequence_id
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_sequence_id)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(private)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>private</p><p>Get_sequence_id is an internal method that is not intended for user code. The sequence_id is not a simple integer.  The get_transaction_id is meant for users to identify specific transactions.</p><p>These methods allow access to the sequence_item sequence and transaction IDs. get_transaction_id and set_transaction_id are methods on the uvm_transaction base_class. These IDs are used to identify sequences to the sequencer, to route responses back to the sequence that issued a request, and to uniquely identify transactions.</p><p>The sequence_id is assigned automatically by a sequencer when a sequence initiates communication through any sequencer calls (i.e. `uvm_do_xxx, wait_for_grant).  A sequence_id will remain unique for this sequence until it ends or it is killed.  However, a single sequence may have multiple valid sequence ids at any point in time.  Should a sequence start again after it has ended, it will be given a new unique sequence_id.</p><p>The transaction_id is assigned automatically by the sequence each time a transaction is sent to the sequencer with the transaction_id in its default (-1) value.  If the user sets the transaction_id to any non-default value, that value will be maintained.</p><p>Responses are routed back to this sequences based on sequence_id. The sequence may use the transaction_id to correlate responses with their requests.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_item_context
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_item_context)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Set the sequence and sequencer execution context for a sequence item)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Set the sequence and sequencer execution context for a sequence item</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_use_sequence_info
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_use_sequence_info)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_use_sequence_info
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_use_sequence_info)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(These methods are used to set and get the status of the use_sequence_info bit. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>These methods are used to set and get the status of the use_sequence_info bit. Use_sequence_info controls whether the sequence information (sequencer, parent_sequence, sequence_id, etc.) is printed, copied, or recorded. When use_sequence_info is the default value of 0, then the sequence information is not used. When use_sequence_info is set to 1, the sequence information will be used in printing and copying.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_id_info
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_id_info)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Copies the sequence_id and transaction_id from the referenced item into the calling item. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Copies the sequence_id and transaction_id from the referenced item into the calling item.  This routine should always be used by drivers to initialize responses for future compatibility.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_sequencer
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_sequencer)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Sets the default sequencer for the sequence to sequencer. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Sets the default sequencer for the sequence to sequencer.  It will take effect immediately, so it should not be called while the sequence is actively communicating with the sequencer.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_sequencer
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_sequencer)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Returns a reference to the default sequencer used by this sequence.)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Returns a reference to the default sequencer used by this sequence.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_parent_sequence
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_parent_sequence)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Sets the parent sequence of this sequence_item. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Sets the parent sequence of this sequence_item.  This is used to identify the source sequence of a sequence_item.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_parent_sequence
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_parent_sequence)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Returns a reference to the parent sequence of any sequence on which this method was called. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Returns a reference to the parent sequence of any sequence on which this method was called. If this is a parent sequence, the method returns null.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: set_depth
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::set_depth)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(The depth of any sequence is calculated automatically. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>The depth of any sequence is calculated automatically.  However, the user may use  set_depth to specify the depth of a particular sequence. This method will override the automatically calculated depth, even if it is incorrect.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_depth
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_depth)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Returns the depth of a sequence from it's parent. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Returns the depth of a sequence from it's parent.  A  parent sequence will have a depth of 1, it's child will have a depth  of 2, and it's grandchild will have a depth of 3.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: is_item
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::is_item)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(This function may be called on any sequence_item or sequence. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>This function may be called on any sequence_item or sequence. It will return 1 for items and 0 for sequences (which derive from this class).</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_root_sequence_name
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_root_sequence_name)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Provides the name of the root sequence (the top-most parent sequence).)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Provides the name of the root sequence (the top-most parent sequence).</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_root_sequence
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_root_sequence)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Provides a reference to the root sequence (the top-most parent sequence).)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Provides a reference to the root sequence (the top-most parent sequence).</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: get_sequence_path
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::get_sequence_path)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Provides a string of names of each sequence in the full hierarchical path. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Provides a string of names of each sequence in the full hierarchical path. A &quot;.&quot; is used as the separator between each sequence.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: Reporting Interface
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(Reporting Interface)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(group)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Group)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(Sequence items and sequences will use the sequencer which they are associated with for reporting messages. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>Sequence items and sequences will use the sequencer which they are associated with for reporting messages. If no sequencer has been set for the item/sequence using <link target="set_sequencer" name="set_sequencer" original="&lt; set_sequencer &gt;"> or indirectly via <link target="uvm_sequence_base::start_item" name="uvm_sequence_base::start_item" original="&lt; uvm_sequence_base::start_item &gt;"> or <link target="uvm_sequence_base::start" name="uvm_sequence_base::start" original="&lt; uvm_sequence_base::start &gt;">), then the global reporter will be used.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: uvm_report_info
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::uvm_report_info)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: uvm_report_warning
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::uvm_report_warning)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: uvm_report_error
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::uvm_report_error)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body()
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicTitle: uvm_report_fatal
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | QualifiedName(uvm_pkg::uvm_sequence_item::uvm_report_fatal)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | TopicType(function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Keyword(Function)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | NumChilderen(0)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Summary(These are the primary reporting methods in the UVM. )
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | | Body(<p>These are the primary reporting methods in the UVM. uvm_sequence_item derived types delegate these functions to their associated sequencer if they have one, or to the global reporter. See <link target="uvm_report_object::Reporting" name="uvm_report_object::Reporting" original="&lt; uvm_report_object::Reporting &gt;"> for details on the messaging functions.</p>)
| | [uvm_sequence_item.svh] | [uvm_sequence_item] | +-------------------------------------------------------------------
| | [uvm_sequence_item.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer.svh
| +-------------------------------------------------------------------
| | [uvm_sequencer.svh] +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | TopicTitle: uvm_sequencer #(REQ,RSP)
| | [uvm_sequencer.svh] +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | QualifiedName(uvm_sequencer #(REQ,RSP))
| | [uvm_sequencer.svh] | TopicType(class)
| | [uvm_sequencer.svh] | Keyword(CLASS)
| | [uvm_sequencer.svh] | NumChilderen(3)
| | [uvm_sequencer.svh] | Summary()
| | [uvm_sequencer.svh] | Body()
| | [uvm_sequencer.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | | Children
| | [uvm_sequencer.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicTitle: seq_item_export
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | QualifiedName(seq_item_export)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicType(variable)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Keyword(Variable)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Summary(This export provides access to this sequencer's implementation of the sequencer interface, <link target="uvm_sqr_if_base #(REQ,RSP)" name="uvm_sqr_if_base #(REQ,RSP)" original="&lt; uvm_sqr_if_base #(REQ,RSP) &gt;">, which defines the following methods:)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Body(<p>This export provides access to this sequencer's implementation of the sequencer interface, <link target="uvm_sqr_if_base #(REQ,RSP)" name="uvm_sqr_if_base #(REQ,RSP)" original="&lt; uvm_sqr_if_base #(REQ,RSP) &gt;">, which defines the following methods:</p><blockquote><pre>Requests:
 virtual task          get_next_item      (output REQ request);
 virtual task          try_next_item      (output REQ request);
 virtual task          get                (output REQ request);
 virtual task          peek               (output REQ request);
Responses:
 virtual function void item_done          (input RSP response=null);
 virtual task          put                (input RSP response);
Sync Control:
 virtual task          wait_for_sequences ();
 virtual function bit  has_do_available   ();
</pre></blockquote><p>See <link target="uvm_sqr_if_base #(REQ,RSP)" name="uvm_sqr_if_base #(REQ,RSP)" original="&lt; uvm_sqr_if_base #(REQ,RSP) &gt;"> for information about this interface.</p>)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicTitle: new
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Summary(Standard component constructor that creates an instance of this class using the given <i>name</i> and <i>parent</i>, if any.)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Body(<p>Standard component constructor that creates an instance of this class using the given <i>name</i> and <i>parent</i>, if any.</p>)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicTitle: stop_sequences
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | QualifiedName(stop_sequences)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Summary(Tells the sequencer to kill all sequences and child sequences currently operating on the sequencer, and remove all requests, locks and responses that are currently queued. )
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | | Body(<p>Tells the sequencer to kill all sequences and child sequences currently operating on the sequencer, and remove all requests, locks and responses that are currently queued.  This essentially resets the sequencer to an idle state.</p>)
| | [uvm_sequencer.svh] | [uvm_sequencer #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer_base.svh
| +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | TopicTitle: uvm_sequencer_base
| | [uvm_sequencer_base.svh] +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | QualifiedName(uvm_pkg::uvm_sequencer_base)
| | [uvm_sequencer_base.svh] | TopicType(class)
| | [uvm_sequencer_base.svh] | Keyword(CLASS)
| | [uvm_sequencer_base.svh] | NumChilderen(21)
| | [uvm_sequencer_base.svh] | Summary(Controls the flow of sequences, which generate the stimulus (sequence item transactions) that is passed on to drivers for execution.)
| | [uvm_sequencer_base.svh] | Body(<p>Controls the flow of sequences, which generate the stimulus (sequence item transactions) that is passed on to drivers for execution.</p>)
| | [uvm_sequencer_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | | Children
| | [uvm_sequencer_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: new
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::new)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for uvm_component: name is the name of the instance, and parent is the handle to the hierarchical parent.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for uvm_component: name is the name of the instance, and parent is the handle to the hierarchical parent.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: is_child
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::is_child)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns 1 if the child sequence is a child of the parent sequence, 0 otherwise.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns 1 if the child sequence is a child of the parent sequence, 0 otherwise.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: user_priority_arbitration
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::user_priority_arbitration)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(When the sequencer arbitration mode is set to SEQ_ARB_USER (via the <link target="set_arbitration" name="set_arbitration" original="&lt; set_arbitration &gt;"> method), the sequencer will call this function each time that it needs to arbitrate among sequences.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>When the sequencer arbitration mode is set to SEQ_ARB_USER (via the <link target="set_arbitration" name="set_arbitration" original="&lt; set_arbitration &gt;"> method), the sequencer will call this function each time that it needs to arbitrate among sequences.</p><p>Derived sequencers may override this method to perform a custom arbitration policy. The override must return one of the entries from the avail_sequences queue, which are indexes into an internal queue, arb_sequence_q. The</p><p>The default implementation behaves like SEQ_ARB_FIFO, which returns the entry at avail_sequences[0].</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: execute_item
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::execute_item)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Executes the given transaction <i>item</i> directly on this sequencer. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Executes the given transaction <i>item</i> directly on this sequencer. A temporary parent sequence is automatically created for the <i>item</i>.  There is no capability to retrieve responses. If the driver returns responses, they will accumulate in the sequencer, eventually causing response overflow unless <link target="set_response_queue_error_report_disabled" name="set_response_queue_error_report_disabled" original="&lt; set_response_queue_error_report_disabled &gt;"> is called.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: start_phase_sequence
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::start_phase_sequence)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Start the default sequence for this phase, if any. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Start the default sequence for this phase, if any. The default sequence is configured via resources using either a sequence instance or sequence type (object wrapper). If both are used, the sequence instance takes precedence. When attempting to override a previous default sequence setting, you must override both the instance and type (wrapper) reources, else your override may not take effect.</p><p>When setting the resource using <i>set</i>, the 1st argument specifies the context pointer, usually &quot;this&quot; for components or &quot;null&quot; when executed from outside the component hierarchy (i.e. in module). The 2nd argument is the instance string, which is a path name to the target sequencer, relative to the context pointer.  The path must include the name of the phase with a &quot;_phase&quot; suffix. The 3rd argument is the resource name, which is &quot;default_sequence&quot;. The 4th argument is either an object wrapper for the sequence type, or an instance of a sequence.</p><p>Configuration by instances allows pre-initialization, setting rand_mode, use of inline constraints, etc.</p><blockquote><pre>myseq_t myseq = new(&quot;myseq&quot;);
myseq.randomize() with { ... };
uvm_config_db #(uvm_sequence_base)::set(null, &quot;top.agent.myseqr.main_phase&quot;,
                                        &quot;default_sequence&quot;,
                                        myseq);
</pre></blockquote><p>Configuration by type is shorter and can be substituted via the the factory.</p><blockquote><pre>uvm_config_db #(uvm_object_wrapper)::set(null, &quot;top.agent.myseqr.main_phase&quot;,
                                         &quot;default_sequence&quot;,
                                         myseq_type::type_id::get());
</pre></blockquote><p>The uvm_resource_db can similarly be used.</p><blockquote><pre>myseq_t myseq = new(&quot;myseq&quot;);
myseq.randomize() with { ... };
uvm_resource_db #(uvm_sequence_base)::set({get_full_name(), &quot;.myseqr.main_phase&quot;,
                                          &quot;default_sequence&quot;,
                                          myseq, this);
</pre></blockquote><blockquote><pre>uvm_resource_db #(uvm_object_wrapper)::set({get_full_name(), &quot;.myseqr.main_phase&quot;,
                                           &quot;default_sequence&quot;,
                                           myseq_t::type_id::get(),
                                           this );
</pre></blockquote>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: wait_for_grant
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::wait_for_grant)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(This task issues a request for the specified sequence. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>This task issues a request for the specified sequence.  If item_priority is not specified, then the current sequence priority will be used by the arbiter.  If a lock_request is made, then the  sequencer will issue a lock immediately before granting the sequence.  (Note that the lock may be granted without the sequence being granted if is_relevant is not asserted).</p><p>When this method returns, the sequencer has granted the sequence, and the sequence must call send_request without inserting any simulation delay other than delta cycles.  The driver is currently waiting for the next item to be sent via the send_request call.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: wait_for_item_done
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::wait_for_item_done)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(A sequence may optionally call wait_for_item_done. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>A sequence may optionally call wait_for_item_done.  This task will block until the driver calls item_done() or put() on a transaction issued by the specified sequence.  If no transaction_id parameter is specified, then the call will return the next time that the driver calls item_done() or put(). If a specific transaction_id is specified, then the call will only return when the driver indicates that it has completed that specific item.</p><p>Note that if a specific transaction_id has been specified, and the driver has already issued an item_done or put for that transaction, then the call will hang waiting for that specific transaction_id.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: is_blocked
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::is_blocked)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns 1 if the sequence referred to by sequence_ptr is currently locked out of the sequencer. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns 1 if the sequence referred to by sequence_ptr is currently locked out of the sequencer.  It will return 0 if the sequence is currently allowed to issue operations.</p><p>Note that even when a sequence is not blocked, it is possible for another sequence to issue a lock before this sequence is able to issue a request or lock.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: has_lock
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::has_lock)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns 1 if the sequence refered to in the parameter currently has a lock on this sequencer, 0 otherwise.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns 1 if the sequence refered to in the parameter currently has a lock on this sequencer, 0 otherwise.</p><p>Note that even if this sequence has a lock, a child sequence may also have a lock, in which case the sequence is still blocked from issueing operations on the sequencer</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: lock
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::lock)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Requests a lock for the sequence specified by sequence_ptr.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Requests a lock for the sequence specified by sequence_ptr.</p><p>A lock request will be arbitrated the same as any other request. A lock is granted after all earlier requests are completed and no other locks or grabs are blocking this sequence.</p><p>The lock call will return when the lock has been granted.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: grab
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::grab)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Requests a lock for the sequence specified by sequence_ptr.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Requests a lock for the sequence specified by sequence_ptr.</p><p>A grab request is put in front of the arbitration queue. It will be arbitrated before any other requests. A grab is granted when no other grabs or locks are blocking this sequence.</p><p>The grab call will return when the grab has been granted.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: unlock
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::unlock)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Removes any locks and grabs obtained by the specified sequence_ptr.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Removes any locks and grabs obtained by the specified sequence_ptr.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: ungrab
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::ungrab)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Removes any locks and grabs obtained by the specified sequence_ptr.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Removes any locks and grabs obtained by the specified sequence_ptr.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: stop_sequences
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::stop_sequences)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Tells the sequencer to kill all sequences and child sequences currently operating on the sequencer, and remove all requests, locks and responses that are currently queued. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Tells the sequencer to kill all sequences and child sequences currently operating on the sequencer, and remove all requests, locks and responses that are currently queued.  This essentially resets the sequencer to an idle state.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: is_grabbed
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::is_grabbed)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns 1 if any sequence currently has a lock or grab on this sequencer, 0 otherwise.)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns 1 if any sequence currently has a lock or grab on this sequencer, 0 otherwise.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: current_grabber
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::current_grabber)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns a reference to the sequence that currently has a lock or grab on the sequence. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns a reference to the sequence that currently has a lock or grab on the sequence.  If multiple hierarchical sequences have a lock, it returns the child that is currently allowed to perform operations on the sequencer.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: has_do_available
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::has_do_available)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Returns 1 if any sequence running on this sequencer is ready to supply a transaction, 0 otherwise. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Returns 1 if any sequence running on this sequencer is ready to supply a transaction, 0 otherwise. A sequence is ready if it is not blocked (via <i>grab</i> or <i>lock</i> and <i>is_relevant</i> returns 1.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: set_arbitration
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::set_arbitration)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Specifies the arbitration mode for the sequencer. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Specifies the arbitration mode for the sequencer. It is one of</p><dl><de> SEQ_ARB_FIFO</de><dd>Requests are granted in FIFO order (default)</dd><de> SEQ_ARB_WEIGHTED</de><dd>Requests are granted randomly by weight</dd><de> SEQ_ARB_RANDOM</de><dd>Requests are granted randomly</dd><de> SEQ_ARB_STRICT_FIFO</de><dd>Requests at highest priority granted in fifo order</dd><de> SEQ_ARB_STRICT_RANDOM</de><dd>Requests at highest priority granted in randomly</dd><de> SEQ_ARB_USER</de><dd>Arbitration is delegated to the user-defined function, user_priority_arbitration. That function will specify the next sequence to grant.</dd></dl><p>The default user function specifies FIFO order.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: get_arbitration
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::get_arbitration)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Return the current arbitration mode set for this sequencer. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Return the current arbitration mode set for this sequencer. See <link target="set_arbitration" name="set_arbitration" original="&lt; set_arbitration &gt;"> for a list of possible modes.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: wait_for_sequences
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::wait_for_sequences)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Task)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Waits for a sequence to have a new item available. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Waits for a sequence to have a new item available. Uses <link target="uvm_wait_for_nba_region" name="uvm_wait_for_nba_region" original="&lt; uvm_wait_for_nba_region &gt;"> to give a sequence as much time as possible to deliver an item before advancing time.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicTitle: send_request
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | QualifiedName(uvm_pkg::uvm_sequencer_base::send_request)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | TopicType(function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Keyword(Function)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | NumChilderen(0)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Summary(Derived classes implement this function to send a request item to the sequencer, which will forward it to the driver. )
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | | Body(<p>Derived classes implement this function to send a request item to the sequencer, which will forward it to the driver.  If the rerandomize bit is set, the item will be randomized before being sent to the driver.</p><p>This function may only be called after a <link target="wait_for_grant" name="wait_for_grant" original="&lt; wait_for_grant &gt;"> call.</p>)
| | [uvm_sequencer_base.svh] | [uvm_sequencer_base] | +-------------------------------------------------------------------
| | [uvm_sequencer_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sequencer_param_base.svh
| +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | TopicTitle: uvm_sequencer_param_base #(REQ,RSP)
| | [uvm_sequencer_param_base.svh] +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | QualifiedName(uvm_sequencer_param_base #(REQ,RSP))
| | [uvm_sequencer_param_base.svh] | TopicType(class)
| | [uvm_sequencer_param_base.svh] | Keyword(CLASS)
| | [uvm_sequencer_param_base.svh] | NumChilderen(13)
| | [uvm_sequencer_param_base.svh] | Summary(Extends <link target="uvm_sequencer_base" name="uvm_sequencer_base" original="&lt; uvm_sequencer_base &gt;"> with an API depending on specific request (REQ) and response (RSP) types.)
| | [uvm_sequencer_param_base.svh] | Body(<p>Extends <link target="uvm_sequencer_base" name="uvm_sequencer_base" original="&lt; uvm_sequencer_base &gt;"> with an API depending on specific request (REQ) and response (RSP) types.</p>)
| | [uvm_sequencer_param_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | | Children
| | [uvm_sequencer_param_base.svh] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: new
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for uvm_component: name is the name of the instance, and parent is the handle to the hierarchical parent, if any.)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for uvm_component: name is the name of the instance, and parent is the handle to the hierarchical parent, if any.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: send_request
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(send_request)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(The send_request function may only be called after a wait_for_grant call. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>The send_request function may only be called after a wait_for_grant call. This call will send the request item, t,  to the sequencer pointed to by sequence_ptr. The sequencer will forward it to the driver. If rerandomize is set, the item will be randomized before being sent to the driver.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: get_current_item
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(get_current_item)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the request_item currently being executed by the sequencer. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the request_item currently being executed by the sequencer. If the sequencer is not currently executing an item, this method will return null.</p><p>The sequencer is executing an item from the time that get_next_item or peek is called until the time that get or item_done is called.</p><p>Note that a driver that only calls get() will never show a current item, since the item is completed at the same time as it is requsted.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: Requests
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(Requests)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(group)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Group)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary()
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body()
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: get_num_reqs_sent
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(get_num_reqs_sent)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the number of requests that have been sent by this sequencer.)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the number of requests that have been sent by this sequencer.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: set_num_last_reqs
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(set_num_last_reqs)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Sets the size of the last_requests buffer. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Sets the size of the last_requests buffer.  Note that the maximum buffer size is 1024.  If max is greater than 1024, a warning is issued, and the buffer is set to 1024.  The default value is 1.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: get_num_last_reqs
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(get_num_last_reqs)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the size of the last requests buffer, as set by set_num_last_reqs.)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the size of the last requests buffer, as set by set_num_last_reqs.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: last_req
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(last_req)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the last request item by default. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the last request item by default.  If n is not 0, then it will get the n￯﾿ﾽth before last request item.  If n is greater than the last request buffer size, the function will return null.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: Responses
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(Responses)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(group)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Group)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary()
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body()
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: get_num_rsps_received
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(get_num_rsps_received)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the number of responses received thus far by this sequencer.)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the number of responses received thus far by this sequencer.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: set_num_last_rsps
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(set_num_last_rsps)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Sets the size of the last_responses buffer. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Sets the size of the last_responses buffer.  The maximum buffer size is 1024. If max is greater than 1024, a warning is issued, and the buffer is set to 1024.  The default value is 1.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: get_num_last_rsps
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(get_num_last_rsps)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the max size of the last responses buffer, as set by set_num_last_rsps.)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the max size of the last responses buffer, as set by set_num_last_rsps.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicTitle: last_rsp
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | QualifiedName(last_rsp)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Summary(Returns the last response item by default. )
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | | Body(<p>Returns the last response item by default.  If n is not 0, then it will get the nth-before-last response item.  If n is greater than the last response buffer size, the function will return null.</p>)
| | [uvm_sequencer_param_base.svh] | [uvm_sequencer_param_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sequencer_param_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sqr_connections.svh
| +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | TopicTitle: Sequence Item Pull Ports
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | QualifiedName(Sequence Item Pull Ports)
| | [uvm_sqr_connections.svh] | TopicType(section)
| | [uvm_sqr_connections.svh] | Keyword(Title)
| | [uvm_sqr_connections.svh] | NumChilderen(0)
| | [uvm_sqr_connections.svh] | Summary(This section defines the port, export, and imp port classes for communicating sequence items between <link target="uvm_sequencer #(REQ,RSP)" name="uvm_sequencer #(REQ,RSP)" original="&lt; uvm_sequencer #(REQ,RSP) &gt;"> and <link target="uvm_driver #(REQ,RSP)" name="uvm_driver #(REQ,RSP)" original="&lt; uvm_driver #(REQ,RSP) &gt;">.)
| | [uvm_sqr_connections.svh] | Body(<p>This section defines the port, export, and imp port classes for communicating sequence items between <link target="uvm_sequencer #(REQ,RSP)" name="uvm_sequencer #(REQ,RSP)" original="&lt; uvm_sequencer #(REQ,RSP) &gt;"> and <link target="uvm_driver #(REQ,RSP)" name="uvm_driver #(REQ,RSP)" original="&lt; uvm_driver #(REQ,RSP) &gt;">.</p>)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | TopicTitle: uvm_seq_item_pull_port #(REQ,RSP)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | QualifiedName(uvm_seq_item_pull_port #(REQ,RSP))
| | [uvm_sqr_connections.svh] | TopicType(class)
| | [uvm_sqr_connections.svh] | Keyword(Class)
| | [uvm_sqr_connections.svh] | NumChilderen(0)
| | [uvm_sqr_connections.svh] | Summary(UVM provides a port, export, and imp connector for use in sequencer-driver communication. )
| | [uvm_sqr_connections.svh] | Body(<p>UVM provides a port, export, and imp connector for use in sequencer-driver communication. All have standard port connector constructors, except that uvm_seq_item_pull_port's default min_size argument is 0; it can be left unconnected.</p>)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | TopicTitle: uvm_seq_item_pull_export #(REQ,RSP)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | QualifiedName(uvm_seq_item_pull_export #(REQ,RSP))
| | [uvm_sqr_connections.svh] | TopicType(class)
| | [uvm_sqr_connections.svh] | Keyword(Class)
| | [uvm_sqr_connections.svh] | NumChilderen(0)
| | [uvm_sqr_connections.svh] | Summary(This export type is used in sequencer-driver communication. )
| | [uvm_sqr_connections.svh] | Body(<p>This export type is used in sequencer-driver communication. It has the standard constructor for exports.</p>)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | TopicTitle: uvm_seq_item_pull_imp #(REQ,RSP,IMP)
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | QualifiedName(uvm_seq_item_pull_imp #(REQ,RSP,IMP))
| | [uvm_sqr_connections.svh] | TopicType(class)
| | [uvm_sqr_connections.svh] | Keyword(Class)
| | [uvm_sqr_connections.svh] | NumChilderen(1)
| | [uvm_sqr_connections.svh] | Summary(This imp type is used in sequencer-driver communication. )
| | [uvm_sqr_connections.svh] | Body(<p>This imp type is used in sequencer-driver communication. It has the standard constructor for imp-type ports.</p>)
| | [uvm_sqr_connections.svh] | +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | | Children
| | [uvm_sqr_connections.svh] | +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | TopicTitle: new
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | QualifiedName(new)
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | TopicType(function)
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | Keyword(Function)
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | NumChilderen(0)
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | Summary()
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | | Body()
| | [uvm_sqr_connections.svh] | [uvm_seq_item_pull_imp #(REQ,RSP,IMP)] | +-------------------------------------------------------------------
| | [uvm_sqr_connections.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_sqr_ifs.svh
| +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | TopicTitle: uvm_sqr_if_base #(REQ,RSP)
| | [uvm_sqr_ifs.svh] +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | QualifiedName(uvm_sqr_if_base #(REQ,RSP))
| | [uvm_sqr_ifs.svh] | TopicType(class)
| | [uvm_sqr_ifs.svh] | Keyword(CLASS)
| | [uvm_sqr_ifs.svh] | NumChilderen(8)
| | [uvm_sqr_ifs.svh] | Summary(This class defines an interface for sequence drivers to communicate with sequencers. )
| | [uvm_sqr_ifs.svh] | Body(<p>This class defines an interface for sequence drivers to communicate with sequencers. The driver requires the interface via a port, and the sequencer implements it and provides it via an export.</p>)
| | [uvm_sqr_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | | Children
| | [uvm_sqr_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: get_next_item
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(get_next_item)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Retrieves the next available item from a sequence. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Retrieves the next available item from a sequence.  The call will block until an item is available.  The following steps occur on this call:</p><dl><de> 1</de><dd>Arbitrate among requesting, unlocked, relevant sequences - choose the highest priority sequence based on the current sequencer arbitration mode. If no sequence is available, wait for a requesting unlocked relevant sequence,  then re-arbitrate.</dd><de> 2</de><dd>The chosen sequence will return from wait_for_grant</dd><de> 3</de><dd>The chosen sequence <link target="uvm_sequence_base::pre_do" name="uvm_sequence_base::pre_do" original="&lt; uvm_sequence_base::pre_do &gt;"> is called</dd><de> 4</de><dd>The chosen sequence item is randomized</dd><de> 5</de><dd>The chosen sequence <link target="uvm_sequence_base::post_do" name="uvm_sequence_base::post_do" original="&lt; uvm_sequence_base::post_do &gt;"> is called</dd><de> 6</de><dd>Return with a reference to the item</dd></dl><p>Once <link target="get_next_item" name="get_next_item" original="&lt; get_next_item &gt;"> is called, <link target="item_done" name="item_done" original="&lt; item_done &gt;"> must be called to indicate the completion of the request to the sequencer.  This will remove the request item from the sequencer fifo.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: try_next_item
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(try_next_item)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Retrieves the next available item from a sequence if one is available. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Retrieves the next available item from a sequence if one is available. Otherwise, the function returns immediately with request set to null. The following steps occur on this call:</p><dl><de> 1</de><dd>Arbitrate among requesting, unlocked, relevant sequences - choose the highest priority sequence based on the current sequencer arbitration mode. If no sequence is available, return null.</dd><de> 2</de><dd>The chosen sequence will return from wait_for_grant</dd><de> 3</de><dd>The chosen sequence <link target="uvm_sequence_base::pre_do" name="uvm_sequence_base::pre_do" original="&lt; uvm_sequence_base::pre_do &gt;"> is called</dd><de> 4</de><dd>The chosen sequence item is randomized</dd><de> 5</de><dd>The chosen sequence <link target="uvm_sequence_base::post_do" name="uvm_sequence_base::post_do" original="&lt; uvm_sequence_base::post_do &gt;"> is called</dd><de> 6</de><dd>Return with a reference to the item</dd></dl><p>Once <link target="try_next_item" name="try_next_item" original="&lt; try_next_item &gt;"> is called, <link target="item_done" name="item_done" original="&lt; item_done &gt;"> must be called to indicate the completion of the request to the sequencer.  This will remove the request item from the sequencer fifo.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: item_done
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(item_done)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Indicates that the request is completed to the sequencer. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Indicates that the request is completed to the sequencer.  Any <link target="uvm_sequence_base::wait_for_item_done" name="uvm_sequence_base::wait_for_item_done" original="&lt; uvm_sequence_base::wait_for_item_done &gt;"> calls made by a sequence for this item will return.</p><p>The current item is removed from the sequencer fifo.</p><p>If a response item is provided, then it will be sent back to the requesting sequence. The response item must have it's sequence ID and transaction ID set correctly, using the <link target="uvm_sequence_item::set_id_info" name="uvm_sequence_item::set_id_info" original="&lt; uvm_sequence_item::set_id_info &gt;"> method:</p><blockquote><pre>rsp.set_id_info(req);
</pre></blockquote><p>Before <link target="item_done" name="item_done" original="&lt; item_done &gt;"> is called, any calls to peek will retrieve the current item that was obtained by <link target="get_next_item" name="get_next_item" original="&lt; get_next_item &gt;">.  After <link target="item_done" name="item_done" original="&lt; item_done &gt;"> is called, peek will cause the sequencer to arbitrate for a new item.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: wait_for_sequences
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(wait_for_sequences)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Waits for a sequence to have a new item available. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Waits for a sequence to have a new item available. The default implementation in the sequencer delays <link target="uvm_sequencer_base::pound_zero_count" name="uvm_sequencer_base::pound_zero_count" original="&lt; uvm_sequencer_base::pound_zero_count &gt;"> delta cycles. User-derived sequencers may override its <link target="wait_for_sequences" name="wait_for_sequences" original="&lt; wait_for_sequences &gt;"> implementation to perform some other application-specific implementation.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: has_do_available
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(has_do_available)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(function)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Function)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Indicates whether a sequence item is available for immediate processing. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Indicates whether a sequence item is available for immediate processing. Implementations should return 1 if an item is available, 0 otherwise.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: get
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(get)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Retrieves the next available item from a sequence. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Retrieves the next available item from a sequence.  The call blocks until an item is available. The following steps occur on this call:</p><dl><de> 1</de><dd>Arbitrate among requesting, unlocked, relevant sequences - choose the highest priority sequence based on the current sequencer arbitration mode. If no sequence is available, wait for a requesting unlocked relevant sequence, then re-arbitrate.</dd><de> 2</de><dd>The chosen sequence will return from <link target="uvm_sequence_base::wait_for_grant" name="uvm_sequence_base::wait_for_grant" original="&lt; uvm_sequence_base::wait_for_grant &gt;"></dd><de> 3</de><dd>The chosen sequence <link target="uvm_sequence_base::pre_do" name="uvm_sequence_base::pre_do" original="&lt; uvm_sequence_base::pre_do &gt;"> is called</dd><de> 4</de><dd>The chosen sequence item is randomized</dd><de> 5</de><dd>The chosen sequence <link target="uvm_sequence_base::post_do" name="uvm_sequence_base::post_do" original="&lt; uvm_sequence_base::post_do &gt;"> is called</dd><de> 6</de><dd>Indicate <link target="item_done" name="item_done" original="&lt; item_done &gt;"> to the sequencer</dd><de> 7</de><dd>Return with a reference to the item</dd></dl><p>When get is called, <link target="item_done" name="item_done" original="&lt; item_done &gt;"> may not be called.  A new item can be obtained by calling get again, or a response may be sent using either <link target="put" name="put" original="&lt; put &gt;">, or uvm_driver::rsp_port.write().</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: peek
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(peek)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Returns the current request item if one is in the sequencer fifo. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Returns the current request item if one is in the sequencer fifo.  If no item is in the fifo, then the call will block until the sequencer has a new request. The following steps will occur if the sequencer fifo is empty:</p><dl><de> 1</de><dd>Arbitrate among requesting, unlocked, relevant sequences - choose the highest priority sequence based on the current sequencer arbitration mode. If no sequence is available, wait for a requesting unlocked relevant sequence, then re-arbitrate.</dd><de> 2</de><dd>The chosen sequence will return from <link target="uvm_sequence_base::wait_for_grant" name="uvm_sequence_base::wait_for_grant" original="&lt; uvm_sequence_base::wait_for_grant &gt;"></dd><de> 3</de><dd>The chosen sequence <link target="uvm_sequence_base::pre_do" name="uvm_sequence_base::pre_do" original="&lt; uvm_sequence_base::pre_do &gt;"> is called</dd><de> 4</de><dd>The chosen sequence item is randomized</dd><de> 5</de><dd>The chosen sequence <link target="uvm_sequence_base::post_do" name="uvm_sequence_base::post_do" original="&lt; uvm_sequence_base::post_do &gt;"> is called</dd></dl><p>Once a request item has been retrieved and is in the sequencer fifo, subsequent calls to peek will return the same item.  The item will stay in the fifo until either get or <link target="item_done" name="item_done" original="&lt; item_done &gt;"> is called.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicTitle: put
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | QualifiedName(put)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | TopicType(task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Keyword(Task)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Summary(Sends a response back to the sequence that issued the request. )
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | | Body(<p>Sends a response back to the sequence that issued the request. Before the response is put, it must have it's sequence ID and transaction ID set to match the request.  This can be done using the <link target="uvm_sequence_item::set_id_info" name="uvm_sequence_item::set_id_info" original="&lt; uvm_sequence_item::set_id_info &gt;"> call:</p><p>rsp.set_id_info(req);</p><p>This task will not block. The response will be put into the sequence response queue or it will be sent to the sequence response handler.</p>)
| | [uvm_sqr_ifs.svh] | [uvm_sqr_if_base #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_sqr_ifs.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_subscriber.svh
| +-------------------------------------------------------------------
| | [uvm_subscriber.svh] +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | TopicTitle: uvm_subscriber
| | [uvm_subscriber.svh] +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | QualifiedName(uvm_pkg::uvm_subscriber)
| | [uvm_subscriber.svh] | TopicType(class)
| | [uvm_subscriber.svh] | Keyword(CLASS)
| | [uvm_subscriber.svh] | NumChilderen(2)
| | [uvm_subscriber.svh] | Summary(This class provides an analysis export for receiving transactions from a connected analysis export. )
| | [uvm_subscriber.svh] | Body(<p>This class provides an analysis export for receiving transactions from a connected analysis export. Making such a connection &quot;subscribes&quot; this component to any transactions emitted by the connected analysis port.</p><p>Subtypes of this class must define the write method to process the incoming transactions. This class is particularly useful when designing a coverage collector that attaches to a monitor.</p>)
| | [uvm_subscriber.svh] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | | Children
| | [uvm_subscriber.svh] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | | TopicTitle: new
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | | QualifiedName(uvm_pkg::uvm_subscriber::new)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | TopicType(function)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Keyword(Function)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | NumChilderen(0)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | | TopicTitle: write
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] | [uvm_subscriber] | | QualifiedName(uvm_pkg::uvm_subscriber::write)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | TopicType(function)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Keyword(Function)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | NumChilderen(0)
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Summary(A pure virtual method that must be defined in each subclass. )
| | [uvm_subscriber.svh] | [uvm_subscriber] | | Body(<p>A pure virtual method that must be defined in each subclass. Access to this method by outside components should be done via the analysis_export.</p>)
| | [uvm_subscriber.svh] | [uvm_subscriber] | +-------------------------------------------------------------------
| | [uvm_subscriber.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_task_phase.svh
| +-------------------------------------------------------------------
| | [uvm_task_phase.svh] +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | TopicTitle: uvm_task_phase
| | [uvm_task_phase.svh] +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | QualifiedName(uvm_pkg::uvm_task_phase)
| | [uvm_task_phase.svh] | TopicType(class)
| | [uvm_task_phase.svh] | Keyword(Class)
| | [uvm_task_phase.svh] | NumChilderen(3)
| | [uvm_task_phase.svh] | Summary(Base class for all task phases. )
| | [uvm_task_phase.svh] | Body(<p>Base class for all task phases. It forks a call to <link target="uvm_phase::exec_task()" name="uvm_phase::exec_task()" original="&lt; uvm_phase::exec_task() &gt;"> for each component in the hierarchy.</p><p>The completion of the task does not imply, nor is it required for, the end of phase. Once the phase completes, any remaining forked <link target="uvm_phase::exec_task()" name="uvm_phase::exec_task()" original="&lt; uvm_phase::exec_task() &gt;"> threads are forcibly and immediately killed.</p><p>By default, the way for a task phase to extend over time is if there is at least one component that raises an objection.</p><blockquote><pre>class my_comp extends uvm_component;
   task main_phase(uvm_phase phase);
      phase.raise_objection(this, &quot;Applying stimulus&quot;)
      ...
      phase.drop_objection(this, &quot;Applied enough stimulus&quot;)
   endtask
endclass
</pre></blockquote><p>There is however one scenario wherein time advances within a task-based phase without any objections to the phase being raised. If two (or more) phases share a common successor, such as the <link target="uvm_run_phase" name="uvm_run_phase" original="&lt; uvm_run_phase &gt;"> and the <link target="uvm_post_shutdown_phase" name="uvm_post_shutdown_phase" original="&lt; uvm_post_shutdown_phase &gt;"> sharing the <link target="uvm_extract_phase" name="uvm_extract_phase" original="&lt; uvm_extract_phase &gt;"> as a successor, then phase advancement is delayed until all predecessors of the common successor are ready to proceed.  Because of this, it is possible for time to advance between <link target="uvm_component::phase_started" name="uvm_component::phase_started" original="&lt; uvm_component::phase_started &gt;"> and <link target="uvm_component::phase_ended" name="uvm_component::phase_ended" original="&lt; uvm_component::phase_ended &gt;"> of a task phase without any participants in the phase raising an objection.</p>)
| | [uvm_task_phase.svh] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | | Children
| | [uvm_task_phase.svh] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicTitle: new
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | QualifiedName(uvm_pkg::uvm_task_phase::new)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicType(function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Keyword(Function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | NumChilderen(0)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Summary(Create a new instance of a task-based phase)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Body(<p>Create a new instance of a task-based phase</p>)
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicTitle: traverse
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | QualifiedName(uvm_pkg::uvm_task_phase::traverse)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicType(function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Keyword(Function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | NumChilderen(0)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Summary(Traverses the component tree in bottom-up order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component. )
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Body(<p>Traverses the component tree in bottom-up order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component. The actual order for task-based phases doesn't really matter, as each component task is executed in a separate process whose starting order is not deterministic.</p>)
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicTitle: execute
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] | [uvm_task_phase] | | QualifiedName(uvm_pkg::uvm_task_phase::execute)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | TopicType(function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Keyword(Function)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | NumChilderen(0)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Summary(Fork the task-based phase <i>phase</i> for the component <i>comp</i>.)
| | [uvm_task_phase.svh] | [uvm_task_phase] | | Body(<p>Fork the task-based phase <i>phase</i> for the component <i>comp</i>.</p>)
| | [uvm_task_phase.svh] | [uvm_task_phase] | +-------------------------------------------------------------------
| | [uvm_task_phase.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_test.svh
| +-------------------------------------------------------------------
| | [uvm_test.svh] +-------------------------------------------------------------------
| | [uvm_test.svh] | TopicTitle: uvm_test
| | [uvm_test.svh] +-------------------------------------------------------------------
| | [uvm_test.svh] | QualifiedName(uvm_pkg::uvm_test)
| | [uvm_test.svh] | TopicType(class)
| | [uvm_test.svh] | Keyword(CLASS)
| | [uvm_test.svh] | NumChilderen(1)
| | [uvm_test.svh] | Summary(This class is the virtual base class for the user-defined tests.)
| | [uvm_test.svh] | Body(<p>This class is the virtual base class for the user-defined tests.</p><p>The uvm_test virtual class should be used as the base class for user-defined tests. Doing so provides the ability to select which test to execute using the UVM_TESTNAME command line or argument to the <link target="uvm_root::run_test" name="uvm_root::run_test" original="&lt; uvm_root::run_test &gt;"> task.</p><p>For example</p><blockquote><pre>prompt&gt; SIM_COMMAND +UVM_TESTNAME=test_bus_retry
</pre></blockquote><p>The global run_test() task should be specified inside an initial block such as</p><blockquote><pre>initial run_test();
</pre></blockquote><p>Multiple tests, identified by their type name, are compiled in and then selected for execution from the command line without need for recompilation. Random seed selection is also available on the command line.</p><p>If +UVM_TESTNAME=test_name is specified, then an object of type 'test_name' is created by factory and phasing begins. Here, it is presumed that the test will instantiate the test environment, or the test environment will have already been instantiated before the call to run_test().</p><p>If the specified test_name cannot be created by the <link target="uvm_factory" name="uvm_factory" original="&lt; uvm_factory &gt;">, then a fatal error occurs. If run_test() is called without UVM_TESTNAME being specified, then all components constructed before the call to run_test will be cycled through their simulation phases.</p><p>Deriving from uvm_test will allow you to distinguish tests from other component types that inherit from uvm_component directly. Such tests will automatically inherit features that may be added to uvm_test in the future.</p>)
| | [uvm_test.svh] | +-------------------------------------------------------------------
| | [uvm_test.svh] | | Children
| | [uvm_test.svh] | +-------------------------------------------------------------------
| | [uvm_test.svh] | [uvm_test] | +-------------------------------------------------------------------
| | [uvm_test.svh] | [uvm_test] | | TopicTitle: new
| | [uvm_test.svh] | [uvm_test] | +-------------------------------------------------------------------
| | [uvm_test.svh] | [uvm_test] | | QualifiedName(uvm_pkg::uvm_test::new)
| | [uvm_test.svh] | [uvm_test] | | TopicType(function)
| | [uvm_test.svh] | [uvm_test] | | Keyword(Function)
| | [uvm_test.svh] | [uvm_test] | | NumChilderen(0)
| | [uvm_test.svh] | [uvm_test] | | Summary(Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.)
| | [uvm_test.svh] | [uvm_test] | | Body(<p>Creates and initializes an instance of this class using the normal constructor arguments for <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">: <i>name</i> is the name of the instance, and <i>parent</i> is the handle to the hierarchical parent, if any.</p>)
| | [uvm_test.svh] | [uvm_test] | +-------------------------------------------------------------------
| | [uvm_test.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_defines.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_defines.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_defines.svh] | TopicTitle: Interface Masks
| | [uvm_tlm2_defines.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_defines.svh] | QualifiedName(Interface Masks)
| | [uvm_tlm2_defines.svh] | TopicType(section)
| | [uvm_tlm2_defines.svh] | Keyword(Title)
| | [uvm_tlm2_defines.svh] | NumChilderen(0)
| | [uvm_tlm2_defines.svh] | Summary(Each of the following macros is a mask that identifies which interfaces a particular port requires or export provides. )
| | [uvm_tlm2_defines.svh] | Body(<p>Each of the following macros is a mask that identifies which interfaces a particular port requires or export provides.  The interfaces are identified by bit position and can be or'ed together for combination ports/exports.  The mask is used to do run-time interface type checking of port/export connections.</p>)
| | [uvm_tlm2_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_exports.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | TopicTitle: TLM2 Export Classes
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | QualifiedName(TLM2 Export Classes)
| | [uvm_tlm2_exports.svh] | TopicType(section)
| | [uvm_tlm2_exports.svh] | Keyword(Title)
| | [uvm_tlm2_exports.svh] | NumChilderen(0)
| | [uvm_tlm2_exports.svh] | Summary(This section defines the export classes for connecting TLM2 interfaces.)
| | [uvm_tlm2_exports.svh] | Body(<p>This section defines the export classes for connecting TLM2 interfaces.</p>)
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | TopicTitle: uvm_tlm_b_transport_export
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_transport_export)
| | [uvm_tlm2_exports.svh] | TopicType(class)
| | [uvm_tlm2_exports.svh] | Keyword(Class)
| | [uvm_tlm2_exports.svh] | NumChilderen(0)
| | [uvm_tlm2_exports.svh] | Summary(Blocking transport export class.)
| | [uvm_tlm2_exports.svh] | Body(<p>Blocking transport export class.</p>)
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | TopicTitle: uvm_tlm_nb_transport_fw_export
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_fw_export)
| | [uvm_tlm2_exports.svh] | TopicType(class)
| | [uvm_tlm2_exports.svh] | Keyword(Class)
| | [uvm_tlm2_exports.svh] | NumChilderen(0)
| | [uvm_tlm2_exports.svh] | Summary(Non-blocking forward transport export class)
| | [uvm_tlm2_exports.svh] | Body(<p>Non-blocking forward transport export class</p>)
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | TopicTitle: uvm_tlm_nb_transport_bw_export
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_bw_export)
| | [uvm_tlm2_exports.svh] | TopicType(class)
| | [uvm_tlm2_exports.svh] | Keyword(Class)
| | [uvm_tlm2_exports.svh] | NumChilderen(1)
| | [uvm_tlm2_exports.svh] | Summary(Non-blocking backward transport export class)
| | [uvm_tlm2_exports.svh] | Body(<p>Non-blocking backward transport export class</p>)
| | [uvm_tlm2_exports.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | | Children
| | [uvm_tlm2_exports.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | TopicTitle: new
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_bw_export::new)
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | TopicType(function)
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | Keyword(Function)
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | NumChilderen(0)
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | Summary()
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | | Body()
| | [uvm_tlm2_exports.svh] | [uvm_tlm_nb_transport_bw_export] | +-------------------------------------------------------------------
| | [uvm_tlm2_exports.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_generic_payload.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: TLM Generic Payload & Extensions
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(TLM Generic Payload & Extensions)
| | [uvm_tlm2_generic_payload.svh] | TopicType(section)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Title)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | Summary(The Generic Payload transaction represents a generic bus read/write access. )
| | [uvm_tlm2_generic_payload.svh] | Body(<p>The Generic Payload transaction represents a generic bus read/write access. It is used as the default transaction in TLM2 blocking and nonblocking transport interfaces.</p>)
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: Globals
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(Globals)
| | [uvm_tlm2_generic_payload.svh] | TopicType(group)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Group)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | Summary(Defines, Constants, enums.)
| | [uvm_tlm2_generic_payload.svh] | Body(<p>Defines, Constants, enums.</p>)
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: Generic Payload
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(Generic Payload)
| | [uvm_tlm2_generic_payload.svh] | TopicType(group)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Group)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | Summary()
| | [uvm_tlm2_generic_payload.svh] | Body()
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: uvm_tlm_generic_payload
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(uvm_pkg::uvm_tlm_generic_payload)
| | [uvm_tlm2_generic_payload.svh] | TopicType(class)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Class)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(44)
| | [uvm_tlm2_generic_payload.svh] | Summary(This class provides a transaction definition commonly used in memory-mapped bus-based systems. )
| | [uvm_tlm2_generic_payload.svh] | Body(<p>This class provides a transaction definition commonly used in memory-mapped bus-based systems.  It's intended to be a general purpose transaction class that lends itself to many applications. The class is derived from uvm_sequence_item which enables it to be generated in sequences and transported to drivers through sequencers.</p>)
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | | Children
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_address
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_address)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Address for the bus operation. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Address for the bus operation. Should be set or read using the <link target="set_address" name="set_address" original="&lt; set_address &gt;"> and <link target="get_address" name="get_address" original="&lt; get_address &gt;"> methods. The variable should be used only when constraining.</p><p>For a read command or a write command, the target shall interpret the current value of the address attribute as the start address in the system memory map of the contiguous block of data being read or written. The address associated with any given byte in the data array is dependent upon the address attribute, the array index, the streaming width attribute, the endianness and the width of the physical bus.</p><p>If the target is unable to execute the transaction with the given address attribute (because the address is out-of-range, for example) it shall generate a standard error response. The recommended response status is <i>UVM_TLM_ADDRESS_ERROR_RESPONSE</i>.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_command
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_command)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Bus operation type. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Bus operation type. Should be set using the <link target="set_command" name="set_command" original="&lt; set_command &gt;">, <link target="set_read" name="set_read" original="&lt; set_read &gt;"> or <link target="set_write" name="set_write" original="&lt; set_write &gt;"> methods and read using the <link target="get_command" name="get_command" original="&lt; get_command &gt;">, <link target="is_read" name="is_read" original="&lt; is_read &gt;"> or <link target="is_write" name="is_write" original="&lt; is_write &gt;"> methods. The variable should be used only when constraining.</p><p>If the target is unable to execute a read or write command, it shall generate a standard error response. The recommended response status is UVM_TLM_COMMAND_ERROR_RESPONSE.</p><p>On receipt of a generic payload transaction with the command attribute equal to UVM_TLM_IGNORE_COMMAND, the target shall not execute a write command or a read command not modify any data. The target may, however, use the value of any attribute in the generic payload, including any extensions.</p><p>The command attribute shall be set by the initiator, and shall not be overwritten by any interconnect</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_data
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_data)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Data read or to be written. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Data read or to be written. Should be set and read using the <link target="set_data" name="set_data" original="&lt; set_data &gt;"> or <link target="get_data" name="get_data" original="&lt; get_data &gt;"> methods The variable should be used only when constraining.</p><p>For a read command or a write command, the target shall copy data to or from the data array, respectively, honoring the semantics of the remaining attributes of the generic payload.</p><p>For a write command or UVM_TLM_IGNORE_COMMAND, the contents of the data array shall be set by the initiator, and shall not be overwritten by any interconnect component or target. For a read command, the contents of the data array shall be overwritten by the target (honoring the semantics of the byte enable) but by no other component.</p><p>Unlike the OSCI TLM-2.0 LRM, there is no requirement on the endiannes of multi-byte data in the generic payload to match the host endianness. Unlike C++, it is not possible in SystemVerilog to cast an arbitrary data type as an array of bytes. Therefore, matching the host endianness is not necessary. In constrast, arbitrary data types may be converted to and from a byte array using the streaming operator and <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> objects may be further converted using the <link target="uvm_object::pack_bytes()" name="uvm_object::pack_bytes()" original="&lt; uvm_object::pack_bytes() &gt;"> and <link target="uvm_object::unpack_bytes()" name="uvm_object::unpack_bytes()" original="&lt; uvm_object::unpack_bytes() &gt;"> methods. All that is required is that a consistent mechanism is used to fill the payload data array and later extract data from it.</p><p>Should a generic payload be transfered to/from a systemC model, it will be necessary for any multi-byte data in that generic payload to use/be interpreted using the host endianness. However, this process is currently outside the scope of this standard.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(The number of bytes to be copied to or from the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array, inclusive of any bytes disabled by the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> attribute.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>The number of bytes to be copied to or from the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array, inclusive of any bytes disabled by the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> attribute.</p><p>The data length attribute shall be set by the initiator, and shall not be overwritten by any interconnect component or target.</p><p>The data length attribute shall not be set to 0. In order to transfer zero bytes, the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> attribute should be set to <link target="UVM_TLM_IGNORE_COMMAND" name="UVM_TLM_IGNORE_COMMAND" original="&lt; UVM_TLM_IGNORE_COMMAND &gt;">.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_response_status
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_response_status)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Status of the bus operation. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Status of the bus operation. Should be set using the <link target="set_response_status" name="set_response_status" original="&lt; set_response_status &gt;"> method and read using the <link target="get_response_status" name="get_response_status" original="&lt; get_response_status &gt;">, <link target="get_response_string" name="get_response_string" original="&lt; get_response_string &gt;">, <link target="is_response_ok" name="is_response_ok" original="&lt; is_response_ok &gt;"> or <link target="is_response_error" name="is_response_error" original="&lt; is_response_error &gt;"> methods. The variable should be used only when constraining.</p><p>The response status attribute shall be set to UVM_TLM_INCOMPLETE_RESPONSE by the initiator, and may be overwritten by the target. The response status attribute should not be overwritten by any interconnect component, because the default value UVM_TLM_INCOMPLETE_RESPONSE indicates that the transaction was not delivered to the target.</p><p>The target may set the response status attribute to UVM_TLM_OK_RESPONSE to indicate that it was able to execute the command successfully, or to one of the five error responses to indicate an error. The target should choose the appropriate error response depending on the cause of the error. If a target detects an error but is unable to select a specific error response, it may set the response status to UVM_TLM_GENERIC_ERROR_RESPONSE.</p><p>The target shall be responsible for setting the response status attribute at the appropriate point in the lifetime of the transaction. In the case of the blocking transport interface, this means before returning control from b_transport. In the case of the non-blocking transport interface and the base protocol, this means before sending the BEGIN_RESP phase or returning a value of UVM_TLM_COMPLETED.</p><p>It is recommended that the initiator should always check the response status attribute on receiving a transition to the BEGIN_RESP phase or after the completion of the transaction. An initiator may choose to ignore the response status if it is known in advance that the value will be UVM_TLM_OK_RESPONSE, perhaps because it is known in advance that the initiator is only connected to targets that always return UVM_TLM_OK_RESPONSE, but in general this will not be the case. In other words, the initiator ignores the response status at its own risk.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_dmi
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_dmi)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(DMI mode is not yet supported in the UVM TLM2 subset. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>DMI mode is not yet supported in the UVM TLM2 subset. This variable is provided for completeness and interoperability with SystemC.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_byte_enable
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_byte_enable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Indicates valid <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array elements. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Indicates valid <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array elements. Should be set and read using the <link target="set_byte_enable" name="set_byte_enable" original="&lt; set_byte_enable &gt;"> or <link target="get_byte_enable" name="get_byte_enable" original="&lt; get_byte_enable &gt;"> methods The variable should be used only when constraining.</p><p>The elements in the byte enable array shall be interpreted as follows. A value of 8'h00 shall indicate that that corresponding byte is disabled, and a value of 8'hFF shall indicate that the corresponding byte is enabled.</p><p>Byte enables may be used to create burst transfers where the address increment between each beat is greater than the number of significant bytes transferred on each beat, or to place words in selected byte lanes of a bus. At a more abstract level, byte enables may be used to create &quot;lacy bursts&quot; where the data array of the generic payload has an arbitrary pattern of holes punched in it.</p><p>The byte enable mask may be defined by a small pattern applied repeatedly or by a large pattern covering the whole data array. The byte enable array may be empty, in which case byte enables shall not be used for the current transaction.</p><p>The byte enable array shall be set by the initiator and shall not be overwritten by any interconnect component or target.</p><p>If the byte enable pointer is not empty, the target shall either implement the semantics of the byte enable as defined below or shall generate a standard error response. The recommended response status is UVM_TLM_BYTE_ENABLE_ERROR_RESPONSE.</p><p>In the case of a write command, any interconnect component or target should ignore the values of any disabled bytes in the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array. In the case of a read command, any interconnect component or target should not modify the values of disabled bytes in the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_byte_enable_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_byte_enable_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(The number of elements in the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>The number of elements in the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array.</p><p>It shall be set by the initiator, and shall not be overwritten by any interconnect component or target.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: m_streaming_width
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::m_streaming_width)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Number of bytes transferred on each beat. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Number of bytes transferred on each beat. Should be set and read using the <link target="set_streaming_width" name="set_streaming_width" original="&lt; set_streaming_width &gt;"> or <link target="get_streaming_width" name="get_streaming_width" original="&lt; get_streaming_width &gt;"> methods The variable should be used only when constraining.</p><p>Streaming affects the way a component should interpret the data array. A stream consists of a sequence of data transfers occurring on successive notional beats, each beat having the same start address as given by the generic payload address attribute. The streaming width attribute shall determine the width of the stream, that is, the number of bytes transferred on each beat. In other words, streaming affects the local address associated with each byte in the data array. In all other respects, the organisation of the data array is unaffected by streaming.</p><p>The bytes within the data array have a corresponding sequence of local addresses within the component accessing the generic payload transaction. The lowest address is given by the value of the address attribute. The highest address is given by the formula address_attribute + streaming_width - 1. The address to or from which each byte is being copied in the target shall be set to the value of the address attribute at the start of each beat.</p><p>With respect to the interpretation of the data array, a single transaction with a streaming width shall be functionally equivalent to a sequence of transactions each having the same address as the original transaction, each having a data length attribute equal to the streaming width of the original, and each with a data array that is a different subset of the original data array on each beat. This subset effectively steps down the original data array maintaining the sequence of bytes.</p><p>A streaming width of 0 indicates that a streaming transfer is not required. it is equivalent to a streaming width value greater than or equal to the size of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array.</p><p>Streaming may be used in conjunction with byte enables, in which case the streaming width would typically be equal to the byte enable length. It would also make sense to have the streaming width a multiple of the byte enable length. Having the byte enable length a multiple of the streaming width would imply that different bytes were enabled on each beat.</p><p>If the target is unable to execute the transaction with the given streaming width, it shall generate a standard error response. The recommended response status is TLM_BURST_ERROR_RESPONSE.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: new
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(uvm_pkg::uvm_tlm_generic_payload::new)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Create a new instance of the generic payload. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Create a new instance of the generic payload.  Initialize all the members to their default values.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: Accessors
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(Accessors)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(group)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Group)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(The accessor functions let you set and get each of the members of the generic payload. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>The accessor functions let you set and get each of the members of the generic payload. All of the accessor methods are virtual. This implies a slightly different use model for the generic payload than in SsytemC. The way the generic payload is defined in SystemC does not encourage you to create new transaction types derived from uvm_tlm_generic_payload. Instead, you would use the extensions mechanism. Thus in SystemC none of the accessors are virtual.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_command
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_command)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Get the value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Get the value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_command
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_command)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: is_read
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(is_read)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Returns true if the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable is <i>UVM_TLM_READ_COMMAND</i>.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Returns true if the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable is <i>UVM_TLM_READ_COMMAND</i>.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_read
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_read)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable to <i>UVM_TLM_READ_COMMAND</i>.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable to <i>UVM_TLM_READ_COMMAND</i>.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: is_write
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(is_write)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Returns true if the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable is <i>UVM_TLM_WRITE_COMMAND</i>.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Returns true if the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable is <i>UVM_TLM_WRITE_COMMAND</i>.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_write
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_write)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable to <i>UVM_TLM_WRITE_COMMAND</i>.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the current value of the <link target="m_command" name="m_command" original="&lt; m_command &gt;"> variable to <i>UVM_TLM_WRITE_COMMAND</i>.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_address
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_address)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_address" name="m_address" original="&lt; m_address &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_address" name="m_address" original="&lt; m_address &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_address
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_address)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Get the value of the <link target="m_address" name="m_address" original="&lt; m_address &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Get the value of the <link target="m_address" name="m_address" original="&lt; m_address &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_data
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_data)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the value of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the value of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_data
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_data)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_data_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_data_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the current size of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the current size of the <link target="m_data" name="m_data" original="&lt; m_data &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_data_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_data_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_length" name="m_length" original="&lt; m_length &gt;">)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_length" name="m_length" original="&lt; m_length &gt;"></p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_streaming_width
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_streaming_width)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Get the value of the <link target="m_streaming_width" name="m_streaming_width" original="&lt; m_streaming_width &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Get the value of the <link target="m_streaming_width" name="m_streaming_width" original="&lt; m_streaming_width &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_streaming_width
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_streaming_width)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_streaming_width" name="m_streaming_width" original="&lt; m_streaming_width &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_streaming_width" name="m_streaming_width" original="&lt; m_streaming_width &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_byte_enable
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_byte_enable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the value of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the value of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_byte_enable
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_byte_enable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the value of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the value of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_byte_enable_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_byte_enable_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the current size of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the current size of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_byte_enable_length
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_byte_enable_length)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the size <link target="m_byte_enable_length" name="m_byte_enable_length" original="&lt; m_byte_enable_length &gt;"> of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array i.e  <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;">.size())
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the size <link target="m_byte_enable_length" name="m_byte_enable_length" original="&lt; m_byte_enable_length &gt;"> of the <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;"> array i.e  <link target="m_byte_enable" name="m_byte_enable" original="&lt; m_byte_enable &gt;">.size()</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_dmi_allowed
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_dmi_allowed)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(DMI hint. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>DMI hint. Set the internal flag <link target="m_dmi" name="m_dmi" original="&lt; m_dmi &gt;"> to allow dmi access</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: is_dmi_allowed
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(is_dmi_allowed)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(DMI hint. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>DMI hint. Query the internal flag <link target="m_dmi" name="m_dmi" original="&lt; m_dmi &gt;"> if allowed dmi access</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_response_status
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_response_status)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_response_status
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_response_status)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Set the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Set the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: is_response_ok
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(is_response_ok)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return TRUE if the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable is <i>UVM_TLM_OK_RESPONSE</i>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return TRUE if the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable is <i>UVM_TLM_OK_RESPONSE</i></p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: is_response_error
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(is_response_error)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return TRUE if the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable is not <i>UVM_TLM_OK_RESPONSE</i>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return TRUE if the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable is not <i>UVM_TLM_OK_RESPONSE</i></p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_response_string
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_response_string)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable as a string)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the current value of the <link target="m_response_status" name="m_response_status" original="&lt; m_response_status &gt;"> variable as a string</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: Extensions Mechanism
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(Extensions Mechanism)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(group)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Group)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: set_extension
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(set_extension)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Add an instance-specific extension. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Add an instance-specific extension. Only one instance of any given extension type is allowed. If there is an existing extension instance of the type of <i>ext</i>, <i>ext</i> replaces it and its handle is returned. Otherwise, null is returned.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_num_extensions
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_num_extensions)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the current number of instance specific extensions.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the current number of instance specific extensions.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: get_extension
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(get_extension)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Return the instance specific extension bound under the specified key. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Return the instance specific extension bound under the specified key. If no extension is bound under that key, <i>null</i> is returned.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: clear_extension
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(clear_extension)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Remove the instance-specific extension bound under the specified key.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Remove the instance-specific extension bound under the specified key.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: clear_extensions
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(clear_extensions)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Remove all instance-specific extensions)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Remove all instance-specific extensions</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: pre_randomize()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(pre_randomize())
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Prepare this class instance for randomization)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Prepare this class instance for randomization</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicTitle: post_randomize()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | QualifiedName(post_randomize())
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Summary(Clean-up this class instance after randomization)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | | Body(<p>Clean-up this class instance after randomization</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_generic_payload] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: uvm_tlm_gp
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(uvm_tlm_gp)
| | [uvm_tlm2_generic_payload.svh] | TopicType(class)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Class)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | Summary(This typedef provides a short, more convenient name for the <link target="uvm_tlm_generic_payload" name="uvm_tlm_generic_payload" original="&lt; uvm_tlm_generic_payload &gt;"> type.)
| | [uvm_tlm2_generic_payload.svh] | Body(<p>This typedef provides a short, more convenient name for the <link target="uvm_tlm_generic_payload" name="uvm_tlm_generic_payload" original="&lt; uvm_tlm_generic_payload &gt;"> type.</p>)
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: uvm_tlm_extension_base
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(uvm_pkg::uvm_tlm_extension_base)
| | [uvm_tlm2_generic_payload.svh] | TopicType(class)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Class)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(4)
| | [uvm_tlm2_generic_payload.svh] | Summary(The class uvm_tlm_extension_base is the non-parameterized base class for all generic payload extensions. )
| | [uvm_tlm2_generic_payload.svh] | Body(<p>The class uvm_tlm_extension_base is the non-parameterized base class for all generic payload extensions.  It includes the utility do_copy() and create().  The pure virtual function get_type_handle() allows you to get a unique handle that represents the derived type.  This is implemented in derived classes.</p><p>This class is never used directly by users. The <link target="uvm_tlm_extension" name="uvm_tlm_extension" original="&lt; uvm_tlm_extension &gt;"> class is used instead.</p>)
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | | Children
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicTitle: new
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | QualifiedName(uvm_pkg::uvm_tlm_extension_base::new)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Summary()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Body()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicTitle: get_type_handle
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | QualifiedName(uvm_pkg::uvm_tlm_extension_base::get_type_handle)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Summary(An interface to polymorphically retrieve a handle that uniquely identifies the type of the sub-class)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Body(<p>An interface to polymorphically retrieve a handle that uniquely identifies the type of the sub-class</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicTitle: get_type_handle_name
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | QualifiedName(uvm_pkg::uvm_tlm_extension_base::get_type_handle_name)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Summary(An interface to polymorphically retrieve the name that uniquely identifies the type of the sub-class)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Body(<p>An interface to polymorphically retrieve the name that uniquely identifies the type of the sub-class</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicTitle: create
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | QualifiedName(uvm_pkg::uvm_tlm_extension_base::create)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Summary()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | | Body()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension_base] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | TopicTitle: uvm_tlm_extension
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | QualifiedName(uvm_pkg::uvm_tlm_extension)
| | [uvm_tlm2_generic_payload.svh] | TopicType(class)
| | [uvm_tlm2_generic_payload.svh] | Keyword(Class)
| | [uvm_tlm2_generic_payload.svh] | NumChilderen(2)
| | [uvm_tlm2_generic_payload.svh] | Summary(TLM extension class. )
| | [uvm_tlm2_generic_payload.svh] | Body(<p>TLM extension class. The class is parameterized with arbitrary type which represents the type of the extension. An instance of the generic payload can contain one extension object of each type; it cannot contain two instances of the same extension type.</p><p>The extension type can be identified using the <link target="ID()" name="ID()" original="&lt; ID() &gt;"> method.</p><p>To implement a generic payload extension, simply derive a new class from this class and specify the name of the derived class as the extension parameter.</p><blockquote><pre>class my_ID extends uvm_tlm_extension#(my_ID);
  int ID;

  `uvm_object_utils_begin(my_ID)
     `uvm_field_int(ID, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name = &quot;my_ID&quot;);
     super.new(name);
  endfunction
endclass</pre></blockquote>)
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | | Children
| | [uvm_tlm2_generic_payload.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | TopicTitle: new
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | QualifiedName(uvm_pkg::uvm_tlm_extension::new)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Summary(creates a new extension object.)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Body(<p>creates a new extension object.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | TopicTitle: ID()
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | QualifiedName(ID())
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | TopicType(function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Keyword(Function)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | NumChilderen(0)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Summary(Return the unique ID of this TLM extension type. )
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | | Body(<p>Return the unique ID of this TLM extension type. This method is used to identify the type of the extension to retrieve from a <link target="uvm_tlm_generic_payload" name="uvm_tlm_generic_payload" original="&lt; uvm_tlm_generic_payload &gt;"> instance, using the <link target="uvm_tlm_generic_payload::get_extension()" name="uvm_tlm_generic_payload::get_extension()" original="&lt; uvm_tlm_generic_payload::get_extension() &gt;"> method.</p>)
| | [uvm_tlm2_generic_payload.svh] | [uvm_tlm_extension] | +-------------------------------------------------------------------
| | [uvm_tlm2_generic_payload.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_ifs.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | TopicTitle: tlm interfaces
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | QualifiedName(tlm interfaces)
| | [uvm_tlm2_ifs.svh] | TopicType(section)
| | [uvm_tlm2_ifs.svh] | Keyword(Title)
| | [uvm_tlm2_ifs.svh] | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | Summary()
| | [uvm_tlm2_ifs.svh] | Body()
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | TopicTitle: Globals
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | QualifiedName(Globals)
| | [uvm_tlm2_ifs.svh] | TopicType(group)
| | [uvm_tlm2_ifs.svh] | Keyword(Group)
| | [uvm_tlm2_ifs.svh] | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | Summary(Global macro's &amp; enums)
| | [uvm_tlm2_ifs.svh] | Body(<p>Global macro's &amp; enums</p>)
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | TopicTitle: TLM IF Class
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | QualifiedName(TLM IF Class)
| | [uvm_tlm2_ifs.svh] | TopicType(group)
| | [uvm_tlm2_ifs.svh] | Keyword(Group)
| | [uvm_tlm2_ifs.svh] | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | Summary(Base class type to define the transport functions.)
| | [uvm_tlm2_ifs.svh] | Body(<p>Base class type to define the transport functions.</p>)
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | TopicTitle: uvm_tlm_if
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | QualifiedName(uvm_pkg::uvm_tlm_if)
| | [uvm_tlm2_ifs.svh] | TopicType(class)
| | [uvm_tlm2_ifs.svh] | Keyword(Class)
| | [uvm_tlm2_ifs.svh] | NumChilderen(4)
| | [uvm_tlm2_ifs.svh] | Summary(Base class type to define the transport functions.)
| | [uvm_tlm2_ifs.svh] | Body(<p>Base class type to define the transport functions.</p><ul><li><link target="nb_transport_fw" name="nb_transport_fw" original="&lt; nb_transport_fw &gt;"></li><li><link target="nb_transport_bw" name="nb_transport_bw" original="&lt; nb_transport_bw &gt;"></li><li><link target="b_transport" name="b_transport" original="&lt; b_transport &gt;"></li></ul>)
| | [uvm_tlm2_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | | Children
| | [uvm_tlm2_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicTitle: tlm transport methods
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | QualifiedName(tlm transport methods)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicType(group)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Keyword(Group)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Summary(Each of the interface methods take a handle to the transaction to be transported and a reference argument for the delay. )
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Body(<p>Each of the interface methods take a handle to the transaction to be transported and a reference argument for the delay. In addition, the nonblocking interfaces take a reference argument for the phase.</p>)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicTitle: nb_transport_fw
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | QualifiedName(uvm_pkg::uvm_tlm_if::nb_transport_fw)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicType(function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Keyword(Function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Summary(Forward path call. )
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Body(<p>Forward path call. The first call to this method for a transaction marks the initial timing point. Every call to this method may mark a timing point in the execution of the transaction. The timing annotation argument allows the timing points to be offset from the simulation times at which the forward path is used. The final timing point of a transaction may be marked by a call to <link target="nb_transport_bw" name="nb_transport_bw" original="&lt; nb_transport_bw &gt;"> or a return from this or subsequent call to nb_transport_fw.</p><p>See <link target="TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset" name="TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset" original="&lt; TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset &gt;"> for more details on the semantics and rules of the nonblocking transport interface.</p>)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicTitle: nb_transport_bw
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | QualifiedName(uvm_pkg::uvm_tlm_if::nb_transport_bw)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicType(function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Keyword(Function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Summary(Implementation of the backward path. )
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Body(<p>Implementation of the backward path. This function MUST be implemented in the INITIATOR component class.</p><p>Every call to this method may mark a timing point, including the final timing point, in the execution of the transaction. The timing annotation argument allows the timing point to be offset from the simulation times at which the backward path is used. The final timing point of a transaction may be marked by a call to <link target="nb_transport_fw" name="nb_transport_fw" original="&lt; nb_transport_fw &gt;"> or a return from this or subsequent call to nb_transport_bw.</p><p>See <link target="TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset" name="TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset" original="&lt; TLM2 Interfaces, Ports, Exports and Transport Interfaces Subset &gt;"> for more details on the semantics and rules of the nonblocking transport interface.</p><h4 class=CHeading> Example</h4><blockquote><pre>class master extends uvm_component;
</pre></blockquote><p>uvm_tlm_nb_initiator_socket #(trans, uvm_tlm_phase_e, this_t) initiator_socket;</p><blockquote><pre>...
function void build_phase(uvm_phase phase);
</pre></blockquote><p>initiator_socket = new(&quot;initiator_socket&quot;, this, this);</p><blockquote><pre>   endfunction
   
   function uvm_tlm_sync_e nb_transport_bw(ref trans t,
                                  ref uvm_tlm_phase_e p,
                                  input uvm_tlm_time delay);
       transaction = t;
       state = p;
       return UVM_TLM_ACCEPTED;
   endfunction
   
   ...
endclass</pre></blockquote>)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicTitle: b_transport
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | QualifiedName(uvm_pkg::uvm_tlm_if::b_transport)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | TopicType(function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Keyword(Function)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | NumChilderen(0)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Summary(Execute a blocking transaction. )
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | | Body(<p>Execute a blocking transaction. Once this method returns, the transaction is assumed to have been executed. Whether that execution is succesful or not must be indicated by the transaction itself.</p><p>The callee may modify or update the transaction object, subject to any constraints imposed by the transaction class. The initiator may re-use a transaction object from one call to the next and across calls to b_transport().</p><p>The call to b_transport shall mark the first timing point of the transaction. The return from b_transport shall mark the final timing point of the transaction. The timing annotation argument allows the timing points to be offset from the simulation times at which the task call and return are executed.</p>)
| | [uvm_tlm2_ifs.svh] | [uvm_tlm_if] | +-------------------------------------------------------------------
| | [uvm_tlm2_ifs.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_imps.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: TLM2 imps (interface implementations)
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(TLM2 imps (interface implementations))
| | [uvm_tlm2_imps.svh] | TopicType(section)
| | [uvm_tlm2_imps.svh] | Keyword(Title)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary(This section defines the implementation classes for connecting TLM2 interfaces.)
| | [uvm_tlm2_imps.svh] | Body(<p>This section defines the implementation classes for connecting TLM2 interfaces.</p><p>TLM imps bind a TLM interface with the object that contains the interface implementation. In addition to the transaction type and the phase type, the imps are parameterized with the type of the object that will provide the implementation. Most often this will be the type of the component where the imp resides. The constructor of the imp takes as an argument an object of type IMP and installs it as the implementation object. Most often the imp constructor argument is &quot;this&quot;.</p>)
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: IMP binding macros
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(IMP binding macros)
| | [uvm_tlm2_imps.svh] | TopicType(group)
| | [uvm_tlm2_imps.svh] | Keyword(Group)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary()
| | [uvm_tlm2_imps.svh] | Body()
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: IMP binding classes
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(IMP binding classes)
| | [uvm_tlm2_imps.svh] | TopicType(group)
| | [uvm_tlm2_imps.svh] | Keyword(Group)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary()
| | [uvm_tlm2_imps.svh] | Body()
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: uvm_tlm_b_transport_imp
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_transport_imp)
| | [uvm_tlm2_imps.svh] | TopicType(class)
| | [uvm_tlm2_imps.svh] | Keyword(Class)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary(Used like exports, except an addtional class parameter specifices the type of the implementation object. )
| | [uvm_tlm2_imps.svh] | Body(<p>Used like exports, except an addtional class parameter specifices the type of the implementation object.  When the imp is instantiated the implementation object is bound.</p>)
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: uvm_tlm_nb_transport_fw_imp
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_fw_imp)
| | [uvm_tlm2_imps.svh] | TopicType(class)
| | [uvm_tlm2_imps.svh] | Keyword(Class)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary(Used like exports, except an addtional class parameter specifices the type of the implementation object. )
| | [uvm_tlm2_imps.svh] | Body(<p>Used like exports, except an addtional class parameter specifices the type of the implementation object.  When the imp is instantiated the implementation object is bound.</p>)
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | TopicTitle: uvm_tlm_nb_transport_bw_imp
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_imps.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_bw_imp)
| | [uvm_tlm2_imps.svh] | TopicType(class)
| | [uvm_tlm2_imps.svh] | Keyword(Class)
| | [uvm_tlm2_imps.svh] | NumChilderen(0)
| | [uvm_tlm2_imps.svh] | Summary(Used like exports, except an addtional class parameter specifices the type of the implementation object. )
| | [uvm_tlm2_imps.svh] | Body(<p>Used like exports, except an addtional class parameter specifices the type of the implementation object.  When the imp is instantiated the implementation object is bound.</p>)
| | [uvm_tlm2_imps.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_ports.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | TopicTitle: TLM2 ports
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | QualifiedName(TLM2 ports)
| | [uvm_tlm2_ports.svh] | TopicType(section)
| | [uvm_tlm2_ports.svh] | Keyword(Title)
| | [uvm_tlm2_ports.svh] | NumChilderen(0)
| | [uvm_tlm2_ports.svh] | Summary(The following defines TLM2 port classes.)
| | [uvm_tlm2_ports.svh] | Body(<p>The following defines TLM2 port classes.</p>)
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | TopicTitle: uvm_tlm_b_transport_port
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_transport_port)
| | [uvm_tlm2_ports.svh] | TopicType(class)
| | [uvm_tlm2_ports.svh] | Keyword(class)
| | [uvm_tlm2_ports.svh] | NumChilderen(0)
| | [uvm_tlm2_ports.svh] | Summary(Class providing the blocking transport port, The port can be bound to one export. )
| | [uvm_tlm2_ports.svh] | Body(<p>Class providing the blocking transport port, The port can be bound to one export. There is no backward path for the blocking transport.</p>)
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | TopicTitle: uvm_tlm_nb_transport_fw_port
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_fw_port)
| | [uvm_tlm2_ports.svh] | TopicType(class)
| | [uvm_tlm2_ports.svh] | Keyword(class)
| | [uvm_tlm2_ports.svh] | NumChilderen(0)
| | [uvm_tlm2_ports.svh] | Summary(Class providing the non-blocking backward transport port. )
| | [uvm_tlm2_ports.svh] | Body(<p>Class providing the non-blocking backward transport port. Transactions received from the producer, on the forward path, are sent back to the producer on the backward path using this non-blocking transport port. The port can be bound to one export.</p>)
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | TopicTitle: uvm_tlm_nb_transport_bw_port
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_bw_port)
| | [uvm_tlm2_ports.svh] | TopicType(class)
| | [uvm_tlm2_ports.svh] | Keyword(class)
| | [uvm_tlm2_ports.svh] | NumChilderen(1)
| | [uvm_tlm2_ports.svh] | Summary(Class providing the non-blocking backward transport port. )
| | [uvm_tlm2_ports.svh] | Body(<p>Class providing the non-blocking backward transport port. Transactions received from the producer, on the forward path, are sent back to the producer on the backward path using this non-blocking transport port The port can be bound to one export.</p>)
| | [uvm_tlm2_ports.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | | Children
| | [uvm_tlm2_ports.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | TopicTitle: new
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | QualifiedName(uvm_pkg::uvm_tlm_nb_transport_bw_port::new)
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | TopicType(function)
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | Keyword(Function)
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | NumChilderen(0)
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | Summary()
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | | Body()
| | [uvm_tlm2_ports.svh] | [uvm_tlm_nb_transport_bw_port] | +-------------------------------------------------------------------
| | [uvm_tlm2_ports.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_sockets.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: TLM Sockets
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(TLM Sockets)
| | [uvm_tlm2_sockets.svh] | TopicType(section)
| | [uvm_tlm2_sockets.svh] | Keyword(Title)
| | [uvm_tlm2_sockets.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | Summary(Each uvm_tlm_*_socket class is derived from a corresponding uvm_tlm_*_socket_base class. )
| | [uvm_tlm2_sockets.svh] | Body(<p>Each uvm_tlm_*_socket class is derived from a corresponding uvm_tlm_*_socket_base class.  The base class contains most of the implementation of the class, The derived classes (in this file) contain the connection semantics.</p><p>Sockets come in several flavors: Each socket is either an initiator or a target, a passthrough or a terminator. Further, any particular socket implements either the blocking interfaces or the nonblocking interfaces. Terminator sockets are used on initiators and targets as well as interconnect components as shown in the figure above. Passthrough sockets are used to enable connections to cross hierarchical boundaries.</p><p>There are eight socket types: the cross of blocking and nonblocking, passthrough and termination, target and initiator</p><p>Sockets are specified based on what they are (IS-A) and what they contains (HAS-A). IS-A and HAS-A are types of object relationships. IS-A refers to the inheritance relationship and HAS-A refers to the ownership relationship. For example if you say D is a B that means that D is derived from base B. If you say object A HAS-A B that means that B is a member of A.</p>)
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_b_initiator_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_initiator_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(2)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward port; has no backward path except via the payload contents)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward port; has no backward path except via the payload contents</p>)
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | | Children
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | TopicTitle: new
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | QualifiedName(uvm_pkg::uvm_tlm_b_initiator_socket::new)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Summary(Construct a new instance of this socket)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Body(<p>Construct a new instance of this socket</p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | TopicTitle: Connect
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | QualifiedName(Connect)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Summary(Connect this socket to the specified <link target="uvm_tlm_b_target_socket" name="uvm_tlm_b_target_socket" original="&lt; uvm_tlm_b_target_socket &gt;">)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | | Body(<p>Connect this socket to the specified <link target="uvm_tlm_b_target_socket" name="uvm_tlm_b_target_socket" original="&lt; uvm_tlm_b_target_socket &gt;"></p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_b_target_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_target_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(2)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward imp; has no backward path except via the payload contents.)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward imp; has no backward path except via the payload contents.</p><p>The component instantiating this socket must implement a b_transport() method with the following signature</p><blockquote><pre>task b_transport(T t, uvm_tlm_time delay);
</pre></blockquote>)
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | | Children
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | TopicTitle: new
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | QualifiedName(uvm_pkg::uvm_tlm_b_target_socket::new)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Summary(Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the b_transport() method. )
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Body(<p>Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the b_transport() method. If not specified, it is assume to be the same as <i>parent</i>.</p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | TopicTitle: Connect
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | QualifiedName(Connect)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Summary(Connect this socket to the specified <link target="uvm_tlm_b_initiator_socket" name="uvm_tlm_b_initiator_socket" original="&lt; uvm_tlm_b_initiator_socket &gt;">)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | | Body(<p>Connect this socket to the specified <link target="uvm_tlm_b_initiator_socket" name="uvm_tlm_b_initiator_socket" original="&lt; uvm_tlm_b_initiator_socket &gt;"></p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_b_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_nb_initiator_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_initiator_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(2)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward port; HAS-A backward imp)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward port; HAS-A backward imp</p><p>The component instantiating this socket must implement a nb_transport_bw() method with the following signature</p><blockquote><pre>function uvm_tlm_sync_e nb_transport_bw(T t, ref P p, input uvm_tlm_time delay);
</pre></blockquote>)
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | | Children
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | TopicTitle: new
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | QualifiedName(uvm_pkg::uvm_tlm_nb_initiator_socket::new)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Summary(Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the nb_transport_bw() method. )
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Body(<p>Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the nb_transport_bw() method. If not specified, it is assume to be the same as <i>parent</i>.</p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | TopicTitle: Connect
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | QualifiedName(Connect)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Summary(Connect this socket to the specified <link target="uvm_tlm_nb_target_socket" name="uvm_tlm_nb_target_socket" original="&lt; uvm_tlm_nb_target_socket &gt;">)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | | Body(<p>Connect this socket to the specified <link target="uvm_tlm_nb_target_socket" name="uvm_tlm_nb_target_socket" original="&lt; uvm_tlm_nb_target_socket &gt;"></p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_initiator_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_nb_target_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_target_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(2)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward imp; HAS-A backward port)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward imp; HAS-A backward port</p><p>The component instantiating this socket must implement a nb_transport_fw() method with the following signature</p><blockquote><pre>function uvm_tlm_sync_e nb_transport_fw(T t, ref P p, input uvm_tlm_time delay);
</pre></blockquote>)
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | | Children
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | TopicTitle: new
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | QualifiedName(uvm_pkg::uvm_tlm_nb_target_socket::new)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Summary(Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the nb_transport_fw() method. )
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Body(<p>Construct a new instance of this socket <i>imp</i> is a reference to the class implementing the nb_transport_fw() method. If not specified, it is assume to be the same as <i>parent</i>.</p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | TopicTitle: connect
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | QualifiedName(uvm_pkg::uvm_tlm_nb_target_socket::connect)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Summary(Connect this socket to the specified <link target="uvm_tlm_nb_initiator_socket" name="uvm_tlm_nb_initiator_socket" original="&lt; uvm_tlm_nb_initiator_socket &gt;">)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | | Body(<p>Connect this socket to the specified <link target="uvm_tlm_nb_initiator_socket" name="uvm_tlm_nb_initiator_socket" original="&lt; uvm_tlm_nb_initiator_socket &gt;"></p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_b_passthrough_initiator_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_passthrough_initiator_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward port;)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward port;</p>)
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_b_passthrough_target_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_passthrough_target_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward export;)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward export;</p>)
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_nb_passthrough_initiator_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward port; HAS-A backward export)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward port; HAS-A backward export</p>)
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | TopicTitle: uvm_tlm_nb_passthrough_target_socket
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_passthrough_target_socket)
| | [uvm_tlm2_sockets.svh] | TopicType(class)
| | [uvm_tlm2_sockets.svh] | Keyword(Class)
| | [uvm_tlm2_sockets.svh] | NumChilderen(1)
| | [uvm_tlm2_sockets.svh] | Summary(IS-A forward export; HAS-A backward port)
| | [uvm_tlm2_sockets.svh] | Body(<p>IS-A forward export; HAS-A backward port</p>)
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | | Children
| | [uvm_tlm2_sockets.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | TopicTitle: connect
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | QualifiedName(uvm_pkg::uvm_tlm_nb_passthrough_target_socket::connect)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | TopicType(function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | Keyword(Function)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | NumChilderen(0)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | Summary(Connect this socket to the specified <link target="uvm_tlm_nb_initiator_socket" name="uvm_tlm_nb_initiator_socket" original="&lt; uvm_tlm_nb_initiator_socket &gt;">)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | | Body(<p>Connect this socket to the specified <link target="uvm_tlm_nb_initiator_socket" name="uvm_tlm_nb_initiator_socket" original="&lt; uvm_tlm_nb_initiator_socket &gt;"></p>)
| | [uvm_tlm2_sockets.svh] | [uvm_tlm_nb_passthrough_target_socket] | +-------------------------------------------------------------------
| | [uvm_tlm2_sockets.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_sockets_base.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: TLM Socket Base Classes
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(TLM Socket Base Classes)
| | [uvm_tlm2_sockets_base.svh] | TopicType(section)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Title)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(A collection of base classes, one for each socket type. )
| | [uvm_tlm2_sockets_base.svh] | Body(<p>A collection of base classes, one for each socket type.  The reason for having a base class for each socket is that all the socket (base) types must be known before connect is defined.  Socket connection semantics are provided in the derived classes, which are user visible.</p><dl><de> Termination Sockets</de><dd>A termination socket must be the terminus of every TLM path.  A transaction originates with an initator socket and ultimately ends up in a target socket.  There may be zero or more passthrough sockets between initiator and target.</dd><de> Passthrough Sockets</de><dd>Passthrough initiators are ports and contain exports for instance IS-A port and HAS-A export. Passthrough targets are the opposite, they are exports and contain ports.</dd></dl>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_b_target_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_target_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward imp; has no backward path except via the payload contents.)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward imp; has no backward path except via the payload contents.</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_b_initiator_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_initiator_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward port; has no backward path except via the payload contents)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward port; has no backward path except via the payload contents</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_nb_target_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_target_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward imp; HAS-A backward port)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward imp; HAS-A backward port</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_nb_initiator_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_initiator_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward port; HAS-A backward imp)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward port; HAS-A backward imp</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_nb_passthrough_initiator_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_passthrough_initiator_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward port; HAS-A backward export)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward port; HAS-A backward export</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_nb_passthrough_target_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_nb_passthrough_target_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward export; HAS-A backward port)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward export; HAS-A backward port</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_b_passthrough_initiator_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_passthrough_initiator_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward port)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward port</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | TopicTitle: uvm_tlm_b_passthrough_target_socket_base
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_sockets_base.svh] | QualifiedName(uvm_pkg::uvm_tlm_b_passthrough_target_socket_base)
| | [uvm_tlm2_sockets_base.svh] | TopicType(class)
| | [uvm_tlm2_sockets_base.svh] | Keyword(Class)
| | [uvm_tlm2_sockets_base.svh] | NumChilderen(0)
| | [uvm_tlm2_sockets_base.svh] | Summary(IS-A forward export)
| | [uvm_tlm2_sockets_base.svh] | Body(<p>IS-A forward export</p>)
| | [uvm_tlm2_sockets_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm2_time.svh
| +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | TopicTitle: uvm_tlm_time
| | [uvm_tlm2_time.svh] +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | QualifiedName(uvm_pkg::uvm_tlm_time)
| | [uvm_tlm2_time.svh] | TopicType(class)
| | [uvm_tlm2_time.svh] | Keyword(CLASS)
| | [uvm_tlm2_time.svh] | NumChilderen(10)
| | [uvm_tlm2_time.svh] | Summary(Canonical time type that can be used in different timescales)
| | [uvm_tlm2_time.svh] | Body(<p>Canonical time type that can be used in different timescales</p><p>This time type is used to represent time values in a canonical form that can bridge initiators and targets located in different timescales and time precisions.</p><p>For a detailed explanation of the purpose for this class, see <link target="Why is this necessary" name="Why is this necessary" original="&lt; Why is this necessary &gt;">.</p>)
| | [uvm_tlm2_time.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | | Children
| | [uvm_tlm2_time.svh] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: set_time_resolution
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::set_time_resolution)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Set the default canonical time resolution.)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Set the default canonical time resolution.</p><p>Must be a power of 10. When co-simulating with SystemC, it is recommended that default canonical time resolution be set to the SystemC time resolution.</p><p>By default, the default resolution is 1.0e-12 (ps)</p>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: new
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::new)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Create a new canonical time value.)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Create a new canonical time value.</p><p>The new value is initialized to 0. If a resolution is not specified, the default resolution, as specified by <link target="set_time_resolution()" name="set_time_resolution()" original="&lt; set_time_resolution() &gt;">, is used.</p>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: get_name
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::get_name)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Return the name of this instance)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Return the name of this instance</p>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: reset
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::reset)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Reset the value to 0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Reset the value to 0</p>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: get_realtime
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::get_realtime)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Return the current canonical time value, scaled for the caller's timescale)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Return the current canonical time value, scaled for the caller's timescale</p><p><i>scaled</i> must be a time literal value that corresponds to the number of seconds specified in <i>secs</i> (1ns by default). It must be a time literal value that is greater or equal to the current timescale.</p><blockquote><pre>#(delay.get_realtime(1ns));
#(delay.get_realtime(1fs, 1.0e-15));</pre></blockquote>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: incr
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::incr)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Increment the time value by the specified number of scaled time unit)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Increment the time value by the specified number of scaled time unit</p><p><i>t</i> is a time value expressed in the scale and precision of the caller. <i>scaled</i> must be a time literal value that corresponds to the number of seconds specified in <i>secs</i> (1ns by default). It must be a time literal value that is greater or equal to the current timescale.</p><blockquote><pre>delay.incr(1.5ns, 1ns);
delay.incr(1.5ns, 1ps, 1.0e-12);</pre></blockquote>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: decr
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::decr)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Decrement the time value by the specified number of scaled time unit)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Decrement the time value by the specified number of scaled time unit</p><p><i>t</i> is a time value expressed in the scale and precision of the caller. <i>scaled</i> must be a time literal value that corresponds to the number of seconds specified in <i>secs</i> (1ns by default). It must be a time literal value that is greater or equal to the current timescale.</p><blockquote><pre>delay.decr(200ps, 1ns);</pre></blockquote>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: get_abstime
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::get_abstime)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Return the current canonical time value, in the number of specified time unit, reguardless of the current timescale of the caller.)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Return the current canonical time value, in the number of specified time unit, reguardless of the current timescale of the caller.</p><p><i>secs</i> is the number of seconds in the desired time unit e.g. 1e-9 for nanoseconds.</p><blockquote><pre>$write(&quot;%.3f ps\n&quot;, delay.get_abstime(1e-12));</pre></blockquote>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: set_abstime
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(uvm_pkg::uvm_tlm_time::set_abstime)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Function)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Set the current canonical time value, to the number of specified time unit, reguardless of the current timescale of the caller.)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Set the current canonical time value, to the number of specified time unit, reguardless of the current timescale of the caller.</p><p><i>secs</i> is the number of seconds in the time unit in the value <i>t</i> e.g. 1e-9 for nanoseconds.</p><blockquote><pre>delay.set_abstime(1.5, 1e-12));</pre></blockquote>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicTitle: Why is this necessary
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | QualifiedName(Why is this necessary)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | TopicType(group)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Keyword(Group)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | NumChilderen(0)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Summary(Integers are not sufficient, on their own, to represent time without any ambiguity: you need to know the scale of that integer value. )
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | | Body(<p>Integers are not sufficient, on their own, to represent time without any ambiguity: you need to know the scale of that integer value. That scale is information conveyed outside of that integer. In SystemVerilog, it is based on the timescale that was active when the code was compiled. SystemVerilog properly scales time literals, but not integer values. That's because it does not know the difference between an integer that carries an integer value and an integer that carries a time value. The 'time' variables are simply 64-bit integers, they are not scaled back and forth to the underlying precision.</p><blockquote><pre>`timescale 1ns/1ps

module m();

time t;

initial
begin
   #1.5;
   $write(&quot;T=%f ns (1.5)\n&quot;, $realtime());
   t = 1.5;
   #t;
   $write(&quot;T=%f ns (3.0)\n&quot;, $realtime());
   #10ps;
   $write(&quot;T=%f ns (3.010)\n&quot;, $realtime());
   t = 10ps;
   #t;
   $write(&quot;T=%f ns (3.020)\n&quot;, $realtime());
end
endmodule
</pre></blockquote><p>yields</p><blockquote><pre>T=1.500000 ns (1.5)
T=3.500000 ns (3.0)
T=3.510000 ns (3.010)
T=3.510000 ns (3.020)
</pre></blockquote><p>Within SystemVerilog, we have to worry about</p><ul><li>different time scale</li><li>different time precision</li></ul><p>Because each endpoint in a socket could be coded in different packages and thus be executing under different timescale directives, a simple integer cannot be used to exchange time information across a socket.</p><p>For example</p><blockquote><pre>`timescale 1ns/1ps

package a_pkg;

class a;
   function void f(inout time t);
      t += 10ns;
   endfunction
endclass

endpackage


`timescale 1ps/1ps

program p;

import a_pkg::*;

time t;

initial
begin
   a A = new;
   A.f(t);
   #t;
   $write(&quot;T=%0d ps (10,000)\n&quot;, $realtime());
end
endprogram
</pre></blockquote><p>yeilds</p><blockquote><pre>T=10 ps (10,000)
</pre></blockquote><p>Scaling is needed everytime you make a procedural call to code that may interpret a time value in a different timescale.</p><p>Using the uvm_tlm_time type</p><blockquote><pre>`timescale 1ns/1ps

   package a_pkg;

import uvm_pkg::*;

class a;
   function void f(uvm_tlm_time t);
      t.incr(10ns, 1ns);
   endfunction
endclass

endpackage


`timescale 1ps/1ps

program p;

import uvm_pkg::*;
import a_pkg::*;

uvm_tlm_time t = new;

initial
   begin
      a A = new;
      A.f(t);
      #(t.get_realtime(1ns));
      $write(&quot;T=%0d ps (10,000)\n&quot;, $realtime());
end
endprogram
</pre></blockquote><p>yields</p><blockquote><pre>T=10000 ps (10,000)
</pre></blockquote><p>A similar procedure is required when crossing any simulator or language boundary, such as interfacing between SystemVerilog and SystemC.</p>)
| | [uvm_tlm2_time.svh] | [uvm_tlm_time] | +-------------------------------------------------------------------
| | [uvm_tlm2_time.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_defines.svh
| +-------------------------------------------------------------------
| | [uvm_tlm_defines.svh] +-------------------------------------------------------------------
| | [uvm_tlm_defines.svh] | TopicTitle: TLM Implementation Port Declaration Macros
| | [uvm_tlm_defines.svh] +-------------------------------------------------------------------
| | [uvm_tlm_defines.svh] | QualifiedName(TLM Implementation Port Declaration Macros)
| | [uvm_tlm_defines.svh] | TopicType(section)
| | [uvm_tlm_defines.svh] | Keyword(Title)
| | [uvm_tlm_defines.svh] | NumChilderen(0)
| | [uvm_tlm_defines.svh] | Summary(The TLM implemenation declaration macros provide a way for components to provide multiple implemenation ports of the same implementation interface. )
| | [uvm_tlm_defines.svh] | Body(<p>The TLM implemenation declaration macros provide a way for components to provide multiple implemenation ports of the same implementation interface. When an implementation port is defined using the built-in set of imps, there must be exactly one implementation of the interface.</p><p>For example, if a component needs to provide a put implemenation then it would have an implementation port defined like:</p><blockquote><pre>class mycomp extends uvm_component;
  uvm_put_imp#(data_type, mycomp) put_imp;
  ...
  virtual task put (data_type t);
    ...
  endtask
endclass
</pre></blockquote><p>There are times, however, when you need more than one implementation for for an interface. This set of declarations allow you to easily create a new implemenation class to allow for multiple implementations. Although the new implemenation class is a different class, it can be bound to the same types of exports and ports as the original class. Extending the put example above, lets say that mycomp needs to provide two put implementation ports. In that case, you would do something like:</p><blockquote><pre>//Define two new put interfaces which are compatible with uvm_put_ports
//and uvm_put_exports.

`uvm_put_imp_decl(_1)
`uvm_put_imp_decl(_2)

class my_put_imp#(type T=int) extends uvm_component;
   uvm_put_imp_1#(T) put_imp1;
   uvm_put_imp_2#(T) put_imp2;
   ...
   function void put_1 (input T t);
     //puts comming into put_imp1
     ...
   endfunction
   function void put_2(input T t);
     //puts comming into put_imp2
     ...
   endfunction
endclass
</pre></blockquote><p>The important thing to note is that each `uvm_<link target="interface" name="interface" original="&lt; interface &gt;">_imp_decl creates a new class of type uvm_<link target="interface&gt;_imp&lt;suffix" name="interface&gt;_imp&lt;suffix" original="&lt; interface&gt;_imp&lt;suffix &gt;">, where suffix is the input argument to the macro. For this reason, you will typically want to put these macros in a seperate package to avoid collisions and to allow sharing of the definitions.</p>)
| | [uvm_tlm_defines.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_fifo_base.svh
| +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | TopicTitle: uvm_tlm_fifo_base #(T)
| | [uvm_tlm_fifo_base.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | QualifiedName(uvm_tlm_fifo_base #(T))
| | [uvm_tlm_fifo_base.svh] | TopicType(class)
| | [uvm_tlm_fifo_base.svh] | Keyword(CLASS)
| | [uvm_tlm_fifo_base.svh] | NumChilderen(1)
| | [uvm_tlm_fifo_base.svh] | Summary(This class is the base for <link target="uvm_tlm_fifo #(T)" name="uvm_tlm_fifo #(T)" original="&lt; uvm_tlm_fifo #(T) &gt;">. )
| | [uvm_tlm_fifo_base.svh] | Body(<p>This class is the base for <link target="uvm_tlm_fifo #(T)" name="uvm_tlm_fifo #(T)" original="&lt; uvm_tlm_fifo #(T) &gt;">. It defines the TLM exports through which all transaction-based FIFO operations occur. It also defines default implementations for each inteface method provided by these exports.</p><p>The interface methods provided by the <link target="put_export" name="put_export" original="&lt; put_export &gt;"> and the <link target="get_peek_export" name="get_peek_export" original="&lt; get_peek_export &gt;"> are defined and described by <link target="uvm_tlm_if_base #(T1,T2)" name="uvm_tlm_if_base #(T1,T2)" original="&lt; uvm_tlm_if_base #(T1,T2) &gt;">.  See the TLM Overview section for a general discussion of TLM interface definition and usage.</p><p>Parameter type</p><dl><de> T</de><dd>The type of transactions to be stored by this FIFO.</dd></dl>)
| | [uvm_tlm_fifo_base.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | | Children
| | [uvm_tlm_fifo_base.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | TopicTitle: new
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | QualifiedName(new)
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | TopicType(function)
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | Keyword(Function)
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | NumChilderen(0)
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | Summary(The <i>name</i> and <i>parent</i> are the normal uvm_component constructor arguments. )
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | | Body(<p>The <i>name</i> and <i>parent</i> are the normal uvm_component constructor arguments. The <i>parent</i> should be null if the uvm_tlm_fifo is going to be used in a statically elaborated construct (e.g., a module). The <i>size</i> indicates the maximum size of the FIFO. A value of zero indicates no upper bound.</p>)
| | [uvm_tlm_fifo_base.svh] | [uvm_tlm_fifo_base #(T)] | +-------------------------------------------------------------------
| | [uvm_tlm_fifo_base.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_fifos.svh
| +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | TopicTitle: TLM FIFO Classes
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | QualifiedName(TLM FIFO Classes)
| | [uvm_tlm_fifos.svh] | TopicType(section)
| | [uvm_tlm_fifos.svh] | Keyword(Title)
| | [uvm_tlm_fifos.svh] | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | Summary(This section defines TLM-based FIFO classes.)
| | [uvm_tlm_fifos.svh] | Body(<p>This section defines TLM-based FIFO classes.</p>)
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | TopicTitle: uvm_tlm_fifo
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | QualifiedName(uvm_pkg::uvm_tlm_fifo)
| | [uvm_tlm_fifos.svh] | TopicType(class)
| | [uvm_tlm_fifos.svh] | Keyword(Class)
| | [uvm_tlm_fifos.svh] | NumChilderen(6)
| | [uvm_tlm_fifos.svh] | Summary(This class provides storage of transactions between two independently running processes. )
| | [uvm_tlm_fifos.svh] | Body(<p>This class provides storage of transactions between two independently running processes. Transactions are put into the FIFO via the <i>put_export</i>. transactions are fetched from the FIFO in the order they arrived via the <i>get_peek_export</i>. The <i>put_export</i> and <i>get_peek_export</i> are inherited from the <link target="uvm_tlm_fifo_base #(T)" name="uvm_tlm_fifo_base #(T)" original="&lt; uvm_tlm_fifo_base #(T) &gt;"> super class, and the interface methods provided by these exports are defined by the <link target="uvm_tlm_if_base #(T1,T2)" name="uvm_tlm_if_base #(T1,T2)" original="&lt; uvm_tlm_if_base #(T1,T2) &gt;"> class.</p>)
| | [uvm_tlm_fifos.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | | Children
| | [uvm_tlm_fifos.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: new
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::new)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(The <i>name</i> and <i>parent</i> are the normal uvm_component constructor arguments. )
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>The <i>name</i> and <i>parent</i> are the normal uvm_component constructor arguments. The <i>parent</i> should be null if the <link target="uvm_tlm_fifo" name="uvm_tlm_fifo" original="&lt; uvm_tlm_fifo &gt;"> is going to be used in a statically elaborated construct (e.g., a module). The <i>size</i> indicates the maximum size of the FIFO; a value of zero indicates no upper bound.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: size
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::size)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(Returns the capacity of the FIFO-- that is, the number of entries the FIFO is capable of holding. )
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>Returns the capacity of the FIFO-- that is, the number of entries the FIFO is capable of holding. A return value of 0 indicates the FIFO capacity has no limit.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: used
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::used)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(Returns the number of entries put into the FIFO.)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>Returns the number of entries put into the FIFO.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: is_empty
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::is_empty)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(Returns 1 when there are no entries in the FIFO, 0 otherwise.)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>Returns 1 when there are no entries in the FIFO, 0 otherwise.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: is_full
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::is_full)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(Returns 1 when the number of entries in the FIFO is equal to its <link target="size" name="size" original="&lt; size &gt;">, 0 otherwise.)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>Returns 1 when the number of entries in the FIFO is equal to its <link target="size" name="size" original="&lt; size &gt;">, 0 otherwise.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicTitle: flush
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_fifo::flush)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Summary(Removes all entries from the FIFO, after which <link target="used" name="used" original="&lt; used &gt;"> returns 0 and <link target="is_empty" name="is_empty" original="&lt; is_empty &gt;"> returns 1.)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | | Body(<p>Removes all entries from the FIFO, after which <link target="used" name="used" original="&lt; used &gt;"> returns 0 and <link target="is_empty" name="is_empty" original="&lt; is_empty &gt;"> returns 1.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | TopicTitle: uvm_tlm_analysis_fifo
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | QualifiedName(uvm_pkg::uvm_tlm_analysis_fifo)
| | [uvm_tlm_fifos.svh] | TopicType(class)
| | [uvm_tlm_fifos.svh] | Keyword(Class)
| | [uvm_tlm_fifos.svh] | NumChilderen(1)
| | [uvm_tlm_fifos.svh] | Summary(An analysis_fifo is a <link target="uvm_tlm_fifo" name="uvm_tlm_fifo" original="&lt; uvm_tlm_fifo &gt;"> with an unbounded size and a write interface. )
| | [uvm_tlm_fifos.svh] | Body(<p>An analysis_fifo is a <link target="uvm_tlm_fifo" name="uvm_tlm_fifo" original="&lt; uvm_tlm_fifo &gt;"> with an unbounded size and a write interface. It can be used any place a <link target="uvm_analysis_imp" name="uvm_analysis_imp" original="&lt; uvm_analysis_imp &gt;"> is used. Typical usage is as a buffer between an <link target="uvm_analysis_port" name="uvm_analysis_port" original="&lt; uvm_analysis_port &gt;"> in an initiator component and TLM1 target component.</p>)
| | [uvm_tlm_fifos.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | | Children
| | [uvm_tlm_fifos.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | TopicTitle: new
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | QualifiedName(uvm_pkg::uvm_tlm_analysis_fifo::new)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | TopicType(function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | Keyword(Function)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | NumChilderen(0)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | Summary(This is the standard uvm_component constructor. )
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | | Body(<p>This is the standard uvm_component constructor. <i>name</i> is the local name of this component. The <i>parent</i> should be left unspecified when this component is instantiated in statically elaborated constructs and must be specified when this component is a child of another UVM component.</p>)
| | [uvm_tlm_fifos.svh] | [uvm_tlm_analysis_fifo] | +-------------------------------------------------------------------
| | [uvm_tlm_fifos.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_ifs.svh
| +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | TopicTitle: uvm_tlm_if_base #(T1,T2)
| | [uvm_tlm_ifs.svh] +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | QualifiedName(uvm_tlm_if_base #(T1,T2))
| | [uvm_tlm_ifs.svh] | TopicType(class)
| | [uvm_tlm_ifs.svh] | Keyword(CLASS)
| | [uvm_tlm_ifs.svh] | NumChilderen(21)
| | [uvm_tlm_ifs.svh] | Summary(This class declares all of the methods of the TLM API.)
| | [uvm_tlm_ifs.svh] | Body(<p>This class declares all of the methods of the TLM API.</p><p>Various subsets of these methods are combined to form primitive TLM interfaces, which are then paired in various ways to form more abstract &quot;combination&quot; TLM interfaces. Components that require a particular interface use ports to convey that requirement. Components that provide a particular interface use exports to convey its availability.</p><p>Communication between components is established by connecting ports to compatible exports, much like connecting module signal-level output ports to compatible input ports. The difference is that UVM ports and exports bind interfaces (groups of methods), not signals and wires. The methods of the interfaces so bound pass data as whole transactions (e.g. objects). The set of primitve and combination TLM interfaces afford many choices for designing components that communicate at the transaction level.</p>)
| | [uvm_tlm_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | | Children
| | [uvm_tlm_ifs.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Blocking put
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Blocking put)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: put
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(put)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Sends a user-defined transaction of type T.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Sends a user-defined transaction of type T.</p><p>Components implementing the put method will block the calling thread if it cannot immediately accept delivery of the transaction.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Blocking get
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Blocking get)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: get
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(get)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Provides a new transaction of type T.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Provides a new transaction of type T.</p><p>The calling thread is blocked if the requested transaction cannot be provided immediately. The new transaction is returned in the provided output argument.</p><p>The implementation of get must regard the transaction as consumed. Subsequent calls to get must return a different transaction instance.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Blocking peek
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Blocking peek)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: peek
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(peek)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Obtain a new transaction without consuming it.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Obtain a new transaction without consuming it.</p><p>If a transaction is available, then it is written to the provided output argument. If a transaction is not available, then the calling thread is blocked until one is available.</p><p>The returned transaction is not consumed. A subsequent peek or get will return the same transaction.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Non-blocking put
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Non-blocking put)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: try_put
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(try_put)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Sends a transaction of type T, if possible.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Sends a transaction of type T, if possible.</p><p>If the component is ready to accept the transaction argument, then it does so and returns 1, otherwise it returns 0.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: can_put
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(can_put)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Returns 1 if the component is ready to accept the transaction; 0 otherwise.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Returns 1 if the component is ready to accept the transaction; 0 otherwise.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Non-blocking get
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Non-blocking get)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: try_get
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(try_get)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Provides a new transaction of type T.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Provides a new transaction of type T.</p><p>If a transaction is immediately available, then it is written to the output argument and 1 is returned. Otherwise, the output argument is not modified and 0 is returned.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: can_get
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(can_get)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Returns 1 if a new transaction can be provided immediately upon request, 0 otherwise.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Returns 1 if a new transaction can be provided immediately upon request, 0 otherwise.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Non-blocking peek
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Non-blocking peek)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: try_peek
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(try_peek)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Provides a new transaction without consuming it.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Provides a new transaction without consuming it.</p><p>If available, a transaction is written to the output argument and 1 is returned. A subsequent peek or get will return the same transaction. If a transaction is not available, then the argument is unmodified and 0 is returned.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: can_peek
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(can_peek)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Returns 1 if a new transaction is available; 0 otherwise.)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Returns 1 if a new transaction is available; 0 otherwise.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Blocking transport
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Blocking transport)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: transport
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(transport)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Executes the given request and returns the response in the given output argument. )
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Executes the given request and returns the response in the given output argument. The calling thread may block until the operation is complete.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Non-blocking transport
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Non-blocking transport)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: nb_transport
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(nb_transport)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Task)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Executes the given request and returns the response in the given output argument. )
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Executes the given request and returns the response in the given output argument. Completion of this operation must occur without blocking.</p><p>If for any reason the operation could not be executed immediately, then a 0 must be returned; otherwise 1.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: Analysis
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(Analysis)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Group)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body()
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicTitle: write
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | QualifiedName(write)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | TopicType(function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Keyword(Function)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | NumChilderen(0)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Summary(Broadcasts a user-defined transaction of type T to any number of listeners. )
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | | Body(<p>Broadcasts a user-defined transaction of type T to any number of listeners. The operation must complete without blocking.</p>)
| | [uvm_tlm_ifs.svh] | [uvm_tlm_if_base #(T1,T2)] | +-------------------------------------------------------------------
| | [uvm_tlm_ifs.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_tlm_req_rsp.svh
| +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | TopicTitle: TLM Channel Classes
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | QualifiedName(TLM Channel Classes)
| | [uvm_tlm_req_rsp.svh] | TopicType(section)
| | [uvm_tlm_req_rsp.svh] | Keyword(Title)
| | [uvm_tlm_req_rsp.svh] | NumChilderen(0)
| | [uvm_tlm_req_rsp.svh] | Summary(This section defines built-in TLM channel classes.)
| | [uvm_tlm_req_rsp.svh] | Body(<p>This section defines built-in TLM channel classes.</p>)
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | TopicTitle: uvm_tlm_req_rsp_channel #(REQ,RSP)
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | QualifiedName(uvm_tlm_req_rsp_channel #(REQ,RSP))
| | [uvm_tlm_req_rsp.svh] | TopicType(class)
| | [uvm_tlm_req_rsp.svh] | Keyword(CLASS)
| | [uvm_tlm_req_rsp.svh] | NumChilderen(1)
| | [uvm_tlm_req_rsp.svh] | Summary(The uvm_tlm_req_rsp_channel contains a request FIFO of type <i>REQ</i> and a response FIFO of type <i>RSP</i>. )
| | [uvm_tlm_req_rsp.svh] | Body(<p>The uvm_tlm_req_rsp_channel contains a request FIFO of type <i>REQ</i> and a response FIFO of type <i>RSP</i>. These FIFOs can be of any size. This channel is particularly useful for dealing with pipelined protocols where the request and response are not tightly coupled.</p><h4 class=CHeading> Type parameters</h4><dl><de> REQ</de><dd>Type of the request transactions conveyed by this channel.</dd><de> RSP</de><dd>Type of the reponse transactions conveyed by this channel.</dd></dl>)
| | [uvm_tlm_req_rsp.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | | Children
| | [uvm_tlm_req_rsp.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | TopicTitle: new
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | TopicType(function)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | Keyword(Function)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>parent</i> must be null if this component is defined within a static component such as a module, program block, or interface. The last two arguments specify the request and response FIFO sizes, which have default values of 1.</p>)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_req_rsp_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | TopicTitle: uvm_tlm_transport_channel #(REQ,RSP)
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | QualifiedName(uvm_tlm_transport_channel #(REQ,RSP))
| | [uvm_tlm_req_rsp.svh] | TopicType(class)
| | [uvm_tlm_req_rsp.svh] | Keyword(CLASS)
| | [uvm_tlm_req_rsp.svh] | NumChilderen(1)
| | [uvm_tlm_req_rsp.svh] | Summary(A uvm_tlm_transport_channel is a <link target="uvm_tlm_req_rsp_channel #(REQ,RSP)" name="uvm_tlm_req_rsp_channel #(REQ,RSP)" original="&lt; uvm_tlm_req_rsp_channel #(REQ,RSP) &gt;"> that implements the transport interface. )
| | [uvm_tlm_req_rsp.svh] | Body(<p>A uvm_tlm_transport_channel is a <link target="uvm_tlm_req_rsp_channel #(REQ,RSP)" name="uvm_tlm_req_rsp_channel #(REQ,RSP)" original="&lt; uvm_tlm_req_rsp_channel #(REQ,RSP) &gt;"> that implements the transport interface. It is useful when modeling a non-pipelined bus at the transaction level. Because the requests and responses have a tightly coupled one-to-one relationship, the request and response FIFO sizes are both set to one.</p>)
| | [uvm_tlm_req_rsp.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | | Children
| | [uvm_tlm_req_rsp.svh] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | TopicTitle: new
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | QualifiedName(new)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | TopicType(function)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | Keyword(Function)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | NumChilderen(0)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | Summary(The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. )
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | | Body(<p>The <i>name</i> and <i>parent</i> are the standard <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;"> constructor arguments. The <i>parent</i> must be null if this component is defined within a statically elaborated construct such as a module, program block, or interface.</p>)
| | [uvm_tlm_req_rsp.svh] | [uvm_tlm_transport_channel #(REQ,RSP)] | +-------------------------------------------------------------------
| | [uvm_tlm_req_rsp.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_topdown_phase.svh
| +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | TopicTitle: uvm_topdown_phase
| | [uvm_topdown_phase.svh] +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | QualifiedName(uvm_pkg::uvm_topdown_phase)
| | [uvm_topdown_phase.svh] | TopicType(class)
| | [uvm_topdown_phase.svh] | Keyword(Class)
| | [uvm_topdown_phase.svh] | NumChilderen(3)
| | [uvm_topdown_phase.svh] | Summary(Virtual base class for function phases that operate top-down. )
| | [uvm_topdown_phase.svh] | Body(<p>Virtual base class for function phases that operate top-down. The pure virtual function execute() is called for each component.</p><p>A top-down function phase completes when the <link target="execute()" name="execute()" original="&lt; execute() &gt;"> method has been called and returned on all applicable components in the hierarchy.</p>)
| | [uvm_topdown_phase.svh] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | | Children
| | [uvm_topdown_phase.svh] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicTitle: new
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | QualifiedName(uvm_pkg::uvm_topdown_phase::new)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicType(function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Keyword(Function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | NumChilderen(0)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Summary(Create a new instance of a top-down phase)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Body(<p>Create a new instance of a top-down phase</p>)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicTitle: traverse
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | QualifiedName(uvm_pkg::uvm_topdown_phase::traverse)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicType(function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Keyword(Function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | NumChilderen(0)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Summary(Traverses the component tree in top-down order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component.)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Body(<p>Traverses the component tree in top-down order, calling <link target="execute" name="execute" original="&lt; execute &gt;"> for each component.</p>)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicTitle: execute
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | QualifiedName(uvm_pkg::uvm_topdown_phase::execute)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | TopicType(function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Keyword(Function)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | NumChilderen(0)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Summary(Executes the top-down phase <i>phase</i> for the component <i>comp</i>.)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | | Body(<p>Executes the top-down phase <i>phase</i> for the component <i>comp</i>.</p>)
| | [uvm_topdown_phase.svh] | [uvm_topdown_phase] | +-------------------------------------------------------------------
| | [uvm_topdown_phase.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_transaction.svh
| +-------------------------------------------------------------------
| | [uvm_transaction.svh] +-------------------------------------------------------------------
| | [uvm_transaction.svh] | TopicTitle: uvm_transaction
| | [uvm_transaction.svh] +-------------------------------------------------------------------
| | [uvm_transaction.svh] | QualifiedName(uvm_pkg::uvm_transaction)
| | [uvm_transaction.svh] | TopicType(class)
| | [uvm_transaction.svh] | Keyword(CLASS)
| | [uvm_transaction.svh] | NumChilderen(24)
| | [uvm_transaction.svh] | Summary(The uvm_transaction class is the root base class for UVM transactions. )
| | [uvm_transaction.svh] | Body(<p>The uvm_transaction class is the root base class for UVM transactions. Inheriting all the methods of uvm_object, uvm_transaction adds a timing and recording interface.</p><p>This class provides timestamp properties, notification events, and transaction recording support.</p><p>Use of this class as a base for user-defined transactions is deprecated. Its subtype, <link target="uvm_sequence_item" name="uvm_sequence_item" original="&lt; uvm_sequence_item &gt;">, shall be used as the base class for all user-defined transaction types.</p><p>The intended use of this API is via a <link target="uvm_driver" name="uvm_driver" original="&lt; uvm_driver &gt;"> to call <link target="uvm_component::accept_tr" name="uvm_component::accept_tr" original="&lt; uvm_component::accept_tr &gt;">, <link target="uvm_component::begin_tr" name="uvm_component::begin_tr" original="&lt; uvm_component::begin_tr &gt;">, and <link target="uvm_component::end_tr" name="uvm_component::end_tr" original="&lt; uvm_component::end_tr &gt;"> during the course of sequence item execution. These methods in the component base class will call into the corresponding methods in this class to set the corresponding timestamps (accept_time, begin_time, and end_tr), trigger the corresponding event (<link target="begin_event" name="begin_event" original="&lt; begin_event &gt;"> and <link target="end_event" name="end_event" original="&lt; end_event &gt;">, and, if enabled, record the transaction contents to a vendor-specific transaction database.</p><p>Note that start_item/finish_item (or `uvm_do* macro) executed from a <link target="uvm_sequence #(REQ,RSP)" name="uvm_sequence #(REQ,RSP)" original="&lt; uvm_sequence #(REQ,RSP) &gt;"> will automatically trigger the begin_event and end_events via calls to begin_tr and end_tr. While convenient, it is generally the responsibility of drivers to mark a transaction's progress during execution.  To allow the driver to control sequence item timestamps, events, and recording, you must add +define+UVM_DISABLE_AUTO_ITEM_RECORDING when compiling the UVM package. Alternatively, users may use the transaction's event pool, <link target="events" name="events" original="&lt; events &gt;">, to define custom events for the driver to trigger and the sequences to wait on. Any in-between events such as marking the begining of the address and data phases of transaction execution could be implemented via the <link target="events" name="events" original="&lt; events &gt;"> pool.</p><p>In pipelined protocols, the driver may release a sequence (return from finish_item() or it's `uvm_do macro) before the item has been completed. If the driver uses the begin_tr/end_tr API in uvm_component, the sequence can wait on the item's <link target="end_event" name="end_event" original="&lt; end_event &gt;"> to block until the item was fully executed, as in the following example.</p><blockquote><pre>task uvm_execute(item, ...);
    // can use the `uvm_do macros as well
    start_item(item);
    item.randomize();
    finish_item(item);
    item.end_event.wait_on();
    // get_response(rsp, item.get_transaction_id()); //if needed
endtask

</pre></blockquote><p>A simple two-stage pipeline driver that can execute address and data phases concurrently might be implemented as follows:</p><blockquote><pre>task run();
    // this driver supports a two-deep pipeline
    fork
      do_item();
      do_item();
    join
endtask


task do_item();

  forever begin
    mbus_item req;

    lock.get();

    seq_item_port.get(req); // Completes the sequencer-driver handshake

    accept_tr(req);

      // request bus, wait for grant, etc.

    begin_tr(req);

      // execute address phase

    // allows next transaction to begin address phase
    lock.put();

      // execute data phase
      // (may trigger custom &quot;data_phase&quot; event here)

    end_tr(req);

  end

endtask: do_item
</pre></blockquote>)
| | [uvm_transaction.svh] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | | Children
| | [uvm_transaction.svh] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: new
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::new)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Creates a new transaction object. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Creates a new transaction object. The name is the instance name of the transaction. If not supplied, then the object is unnamed.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: accept_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::accept_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Calling <i>accept_tr</i> indicates that the transaction item has been received by a consumer component. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Calling <i>accept_tr</i> indicates that the transaction item has been received by a consumer component. Typically a <link target="uvm_driver" name="uvm_driver" original="&lt; uvm_driver &gt;"> would call <link target="uvm_component::accept_tr" name="uvm_component::accept_tr" original="&lt; uvm_component::accept_tr &gt;">, which calls this method-- upon return from a get_next_item(), get(), or peek() call on its sequencer port, <link target="uvm_driver::seq_item_port" name="uvm_driver::seq_item_port" original="&lt; uvm_driver::seq_item_port &gt;">.</p><p>With some protocols, the received item may not be started immediately after it is accepted. For example, a bus driver, having accepted a request transaction, may still have to wait for a bus grant before begining to execute the request.</p><h4 class=CHeading> This function performs the following actions</h4><ul><li>The transaction's internal accept time is set to the current simulation time, or to accept_time if provided and non-zero. The <i>accept_time</i> may be any time, past or future.</li><li>The transaction's internal accept event is triggered. Any processes waiting on the this event will resume in the next delta cycle.</li><li>The <link target="do_accept_tr" name="do_accept_tr" original="&lt; do_accept_tr &gt;"> method is called to allow for any post-accept action in derived classes.</li></ul>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: do_accept_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::do_accept_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This user-definable callback is called by <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;"> just before the accept event is triggered. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This user-definable callback is called by <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;"> just before the accept event is triggered. Implementations should call <i>super.do_accept_tr</i> to ensure correct operation.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: begin_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::begin_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This function indicates that the transaction has been started and is not the child of another transaction. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This function indicates that the transaction has been started and is not the child of another transaction. Generally, a consumer component begins execution of a transactions it receives.</p><p>Typically a <link target="uvm_driver" name="uvm_driver" original="&lt; uvm_driver &gt;"> would call <link target="uvm_component::begin_tr" name="uvm_component::begin_tr" original="&lt; uvm_component::begin_tr &gt;">, which calls this method, before actual execution of a sequence item transaction. Sequence items received by a driver are always a child of a parent sequence. In this case, begin_tr obtains the parent handle and delegates to <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;">.</p><p>See <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;"> for more information on how the begin-time might differ from when the transaction item was received.</p><h4 class=CHeading> This function performs the following actions</h4><ul><li>The transaction's internal start time is set to the current simulation time, or to begin_time if provided and non-zero. The begin_time may be any time, past or future, but should not be less than the accept time.</li><li>If recording is enabled, then a new database-transaction is started with the same begin time as above.</li><li>The <link target="do_begin_tr" name="do_begin_tr" original="&lt; do_begin_tr &gt;"> method is called to allow for any post-begin action in derived classes.</li><li>The transaction's internal begin event is triggered. Any processes waiting on this event will resume in the next delta cycle.</li></ul><p>The return value is a transaction handle, which is valid (non-zero) only if recording is enabled. The meaning of the handle is implementation specific.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: begin_child_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::begin_child_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This function indicates that the transaction has been started as a child of a parent transaction given by <i>parent_handle</i>. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This function indicates that the transaction has been started as a child of a parent transaction given by <i>parent_handle</i>. Generally, a consumer component calls this method via <link target="uvm_component::begin_child_tr" name="uvm_component::begin_child_tr" original="&lt; uvm_component::begin_child_tr &gt;"> to indicate the actual start of execution of this transaction.</p><p>The parent handle is obtained by a previous call to begin_tr or begin_child_tr. If the parent_handle is invalid (=0), then this function behaves the same as <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;">.</p><h4 class=CHeading> This function performs the following actions</h4><ul><li>The transaction's internal start time is set to the current simulation time, or to begin_time if provided and non-zero. The begin_time may be any time, past or future, but should not be less than the accept time.</li><li>If recording is enabled, then a new database-transaction is started with the same begin time as above. The record method inherited from <link target="uvm_object" name="uvm_object" original="&lt; uvm_object &gt;"> is then called, which records the current property values to this new transaction. Finally, the newly started transaction is linked to the parent transaction given by parent_handle.</li><li>The <link target="do_begin_tr" name="do_begin_tr" original="&lt; do_begin_tr &gt;"> method is called to allow for any post-begin action in derived classes.</li><li>The transaction's internal begin event is triggered. Any processes waiting on this event will resume in the next delta cycle.</li></ul><p>The return value is a transaction handle, which is valid (non-zero) only if recording is enabled. The meaning of the handle is implementation specific.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: do_begin_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::do_begin_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This user-definable callback is called by <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> just before the begin event is triggered. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This user-definable callback is called by <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> and <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> just before the begin event is triggered. Implementations should call <i>super.do_begin_tr</i> to ensure correct operation.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: end_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::end_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This function indicates that the transaction execution has ended. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This function indicates that the transaction execution has ended. Generally, a consumer component ends execution of the transactions it receives.</p><p>You must have previously called <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> or <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> for this call to be successful.</p><p>Typically a <link target="uvm_driver" name="uvm_driver" original="&lt; uvm_driver &gt;"> would call <link target="uvm_component::end_tr" name="uvm_component::end_tr" original="&lt; uvm_component::end_tr &gt;">, which calls this method, upon completion of a sequence item transaction. Sequence items received by a driver are always a child of a parent sequence. In this case, begin_tr obtain the parent handle and delegate to <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;">.</p><h4 class=CHeading> This function performs the following actions</h4><ul><li>The transaction's internal end time is set to the current simulation time, or to <i>end_time</i> if provided and non-zero. The <i>end_time</i> may be any time, past or future, but should not be less than the begin time.</li><li>If recording is enabled and a database-transaction is currently active, then the record method inherited from uvm_object is called, which records the final property values. The transaction is then ended. If <i>free_handle</i> is set, the transaction is released and can no longer be linked to (if supported by the implementation).</li><li>The <link target="do_end_tr" name="do_end_tr" original="&lt; do_end_tr &gt;"> method is called to allow for any post-end action in derived classes.</li><li>The transaction's internal end event is triggered. Any processes waiting on this event will resume in the next delta cycle.</li></ul>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: do_end_tr
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::do_end_tr)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(This user-definable callback is called by <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;"> just before the end event is triggered. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>This user-definable callback is called by <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;"> just before the end event is triggered. Implementations should call <i>super.do_end_tr</i> to ensure correct operation.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_tr_handle
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_tr_handle)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns the handle associated with the transaction, as set by a previous call to <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> or <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> with transaction recording enabled.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns the handle associated with the transaction, as set by a previous call to <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;"> or <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;"> with transaction recording enabled.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: disable_recording
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::disable_recording)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Turns off recording for the transaction stream. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Turns off recording for the transaction stream. This method does not effect a <link target="uvm_component" name="uvm_component" original="&lt; uvm_component &gt;">'s recording streams.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: enable_recording
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::enable_recording)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Turns on recording to the stream specified by stream, whose interpretation is implementation specific. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Turns on recording to the stream specified by stream, whose interpretation is implementation specific. The optional <i>recorder</i> argument specifies</p><p>If transaction recording is on, then a call to record is made when the transaction is started and when it is ended.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: is_recording_enabled
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::is_recording_enabled)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns 1 if recording is currently on, 0 otherwise.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns 1 if recording is currently on, 0 otherwise.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: is_active
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::is_active)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns 1 if the transaction has been started but has not yet been ended. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns 1 if the transaction has been started but has not yet been ended. Returns 0 if the transaction has not been started.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_event_pool
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_event_pool)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns the event pool associated with this transaction.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns the event pool associated with this transaction.</p><p>By default, the event pool contains the events: begin, accept, and end. Events can also be added by derivative objects. An event pool is a specialization of an <link target="uvm_pool #(T)" name="uvm_pool #(T)" original="&lt; uvm_pool #(T) &gt;">, e.g. a <i>uvm_pool#(uvm_event)</i>.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: set_initiator
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::set_initiator)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Sets initiator as the initiator of this transaction.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Sets initiator as the initiator of this transaction.</p><p>The initiator can be the component that produces the transaction. It can also be the component that started the transaction. This or any other usage is up to the transaction designer.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_initiator
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_initiator)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns the component that produced or started the transaction, as set by a previous call to set_initiator.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns the component that produced or started the transaction, as set by a previous call to set_initiator.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_accept_time
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_accept_time)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary()
| | [uvm_transaction.svh] | [uvm_transaction] | | Body()
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_begin_time
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_begin_time)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary()
| | [uvm_transaction.svh] | [uvm_transaction] | | Body()
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_end_time
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_end_time)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns the time at which this transaction was accepted, begun, or ended, as by a previous call to <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;">, <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;">, <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;">, or <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;">.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns the time at which this transaction was accepted, begun, or ended, as by a previous call to <link target="accept_tr" name="accept_tr" original="&lt; accept_tr &gt;">, <link target="begin_tr" name="begin_tr" original="&lt; begin_tr &gt;">, <link target="begin_child_tr" name="begin_child_tr" original="&lt; begin_child_tr &gt;">, or <link target="end_tr" name="end_tr" original="&lt; end_tr &gt;">.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: set_transaction_id
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::set_transaction_id)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Sets this transaction's numeric identifier to id. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Sets this transaction's numeric identifier to id. If not set via this method, the transaction ID defaults to -1.</p><p>When using sequences to generate stimulus, the transaction ID is used along with the sequence ID to route responses in sequencers and to correlate responses to requests.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: get_transaction_id
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::get_transaction_id)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(function)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Function)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(Returns this transaction's numeric identifier, which is -1 if not set explicitly by <i>set_transaction_id</i>.)
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>Returns this transaction's numeric identifier, which is -1 if not set explicitly by <i>set_transaction_id</i>.</p><p>When using a <link target="uvm_sequence #(REQ,RSP)" name="uvm_sequence #(REQ,RSP)" original="&lt; uvm_sequence #(REQ,RSP) &gt;"> to generate stimulus, the transaction ID is used along with the sequence ID to route responses in sequencers and to correlate responses to requests.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: events
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::events)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(The event pool instance for this transaction. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>The event pool instance for this transaction. This pool is used to track various The <link target="begin_event" name="begin_event" original="&lt; begin_event &gt;"></p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: begin_event
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::begin_event)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(A <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is triggered when this transaction's actual execution on the bus begins, typically as a result of a driver calling <link target="uvm_component::begin_tr" name="uvm_component::begin_tr" original="&lt; uvm_component::begin_tr &gt;">. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>A <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is triggered when this transaction's actual execution on the bus begins, typically as a result of a driver calling <link target="uvm_component::begin_tr" name="uvm_component::begin_tr" original="&lt; uvm_component::begin_tr &gt;">. Processes that wait on this event will block until the transaction has begun.</p><p>For more information, see the general discussion for <link target="uvm_transaction" name="uvm_transaction" original="&lt; uvm_transaction &gt;">. See <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> for details on the event API.</p>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicTitle: end_event
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] | [uvm_transaction] | | QualifiedName(uvm_pkg::uvm_transaction::end_event)
| | [uvm_transaction.svh] | [uvm_transaction] | | TopicType(variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | Keyword(Variable)
| | [uvm_transaction.svh] | [uvm_transaction] | | NumChilderen(0)
| | [uvm_transaction.svh] | [uvm_transaction] | | Summary(A <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is triggered when this transaction's actual execution on the bus ends, typically as a result of a driver calling <link target="uvm_component::end_tr" name="uvm_component::end_tr" original="&lt; uvm_component::end_tr &gt;">. )
| | [uvm_transaction.svh] | [uvm_transaction] | | Body(<p>A <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> that is triggered when this transaction's actual execution on the bus ends, typically as a result of a driver calling <link target="uvm_component::end_tr" name="uvm_component::end_tr" original="&lt; uvm_component::end_tr &gt;">. Processes that wait on this event will block until the transaction has ended.</p><p>For more information, see the general discussion for <link target="uvm_transaction" name="uvm_transaction" original="&lt; uvm_transaction &gt;">. See <link target="uvm_event" name="uvm_event" original="&lt; uvm_event &gt;"> for details on the event API.</p><blockquote><pre>virtual task my_sequence::body();
 ...
 start_item(item);    \
 item.randomize();     } `uvm_do(item)
 finish_item(item);   /
 // return from finish item does not always mean item is completed
 item.end_event.wait_on();
 ...
</pre></blockquote>)
| | [uvm_transaction.svh] | [uvm_transaction] | +-------------------------------------------------------------------
| | [uvm_transaction.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_vreg.svh
| +-------------------------------------------------------------------
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | TopicTitle: Virtual Registers
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | QualifiedName(Virtual Registers)
| | [uvm_vreg.svh] | TopicType(section)
| | [uvm_vreg.svh] | Keyword(Title)
| | [uvm_vreg.svh] | NumChilderen(0)
| | [uvm_vreg.svh] | Summary(A virtual register is a collection of fields, overlaid on top of a memory, usually in an array. )
| | [uvm_vreg.svh] | Body(<p>A virtual register is a collection of fields, overlaid on top of a memory, usually in an array. The semantics and layout of virtual registers comes from an agreement between the software and the hardware, not any physical structures in the DUT.</p>)
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | TopicTitle: uvm_vreg
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | QualifiedName(uvm_pkg::uvm_vreg)
| | [uvm_vreg.svh] | TopicType(class)
| | [uvm_vreg.svh] | Keyword(Class)
| | [uvm_vreg.svh] | NumChilderen(36)
| | [uvm_vreg.svh] | Summary(Virtual register abstraction base class)
| | [uvm_vreg.svh] | Body(<p>Virtual register abstraction base class</p><p>A virtual register represents a set of fields that are logically implemented in consecutive memory locations.</p><p>All virtual register accesses eventually turn into memory accesses.</p><p>A virtual register array may be implemented on top of any memory abstraction class and possibly dynamically resized and/or relocated.</p>)
| | [uvm_vreg.svh] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | | Children
| | [uvm_vreg.svh] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: Initialization
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(Initialization)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(group)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Group)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary()
| | [uvm_vreg.svh] | [uvm_vreg] | | Body()
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: new
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::new)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Create a new instance and type-specific configuration)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Create a new instance and type-specific configuration</p><p>Creates an instance of a virtual register abstraction class with the specified name.</p><p><i>n_bits</i> specifies the total number of bits in a virtual register. Not all bits need to be mapped to a virtual field. This value is usually a multiple of 8.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: configure
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::configure)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Instance-specific configuration)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Instance-specific configuration</p><p>Specify the <i>parent</i> block of this virtual register array. If one of the other parameters are specified, the virtual register is assumed to be dynamic and can be later (re-)implemented using the <link target="uvm_vreg::implement()" name="uvm_vreg::implement()" original="&lt; uvm_vreg::implement() &gt;"> method.</p><p>If <i>mem</i> is specified, then the virtual register array is assumed to be statically implemented in the memory corresponding to the specified memory abstraction class and <i>size</i>, <i>offset</i> and <i>incr</i> must also be specified. Static virtual register arrays cannot be re-implemented.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: implement
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::implement)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Dynamically implement, resize or relocate a virtual register array)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Dynamically implement, resize or relocate a virtual register array</p><p>Implement an array of virtual registers of the specified <i>size</i>, in the specified memory and <i>offset</i>. If an offset increment is specified, each virtual register is implemented at the specified offset increment from the previous one. If an offset increment of 0 is specified, virtual registers are packed as closely as possible in the memory.</p><p>If no memory is specified, the virtual register array is in the same memory, at the same base offset using the same offset increment as originally implemented. Only the number of virtual registers in the virtual register array is modified.</p><p>The initial value of the newly-implemented or relocated set of virtual registers is whatever values are currently stored in the memory now implementing them.</p><p>Returns TRUE if the memory can implement the number of virtual registers at the specified base offset and offset increment. Returns FALSE otherwise.</p><p>The memory region used to implement a virtual register array is reserved in the memory allocation manager associated with the memory to prevent it from being allocated for another purpose.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: allocate
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::allocate)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Randomly implement, resize or relocate a virtual register array)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Randomly implement, resize or relocate a virtual register array</p><p>Implement a virtual register array of the specified size in a randomly allocated region of the appropriate size in the address space managed by the specified memory allocation manager.</p><p>The initial value of the newly-implemented or relocated set of virtual registers is whatever values are currently stored in the memory region now implementing them.</p><p>Returns a reference to a <link target="uvm_mem_region" name="uvm_mem_region" original="&lt; uvm_mem_region &gt;"> memory region descriptor if the memory allocation manager was able to allocate a region that can implement the virtual register array. Returns <i>null</i> otherwise.</p><p>A region implementing a virtual register array must not be released using the <link target="uvm_mem_mam::release_region()" name="uvm_mem_mam::release_region()" original="&lt; uvm_mem_mam::release_region() &gt;"> method. It must be released using the <link target="uvm_vreg::release_region()" name="uvm_vreg::release_region()" original="&lt; uvm_vreg::release_region() &gt;"> method.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_region
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_region)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Get the region where the virtual register array is implemented)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Get the region where the virtual register array is implemented</p><p>Returns a reference to the <link target="uvm_mem_region" name="uvm_mem_region" original="&lt; uvm_mem_region &gt;"> memory region descriptor that implements the virtual register array.</p><p>Returns <i>null</i> if the virtual registers array is not currently implemented. A region implementing a virtual register array must not be released using the <link target="uvm_mem_mam::release_region()" name="uvm_mem_mam::release_region()" original="&lt; uvm_mem_mam::release_region() &gt;"> method. It must be released using the <link target="uvm_vreg::release_region()" name="uvm_vreg::release_region()" original="&lt; uvm_vreg::release_region() &gt;"> method.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: release_region
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::release_region)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Dynamically un-implement a virtual register array)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Dynamically un-implement a virtual register array</p><p>Release the memory region used to implement a virtual register array and return it to the pool of available memory that can be allocated by the memory's default allocation manager. The virtual register array is subsequently considered as unimplemented and can no longer be accessed.</p><p>Statically-implemented virtual registers cannot be released.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: Introspection
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(Introspection)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(group)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Group)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary()
| | [uvm_vreg.svh] | [uvm_vreg] | | Body()
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_name
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(get_name)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Get the simple name)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Get the simple name</p><p>Return the simple object name of this register.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_full_name
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_full_name)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Get the hierarchical name)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this register. The base of the hierarchical name is the root block.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_parent
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_parent)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Get the parent block)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Get the parent block</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_memory
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_memory)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Get the memory where the virtual regoster array is implemented)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Get the memory where the virtual regoster array is implemented</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_n_maps
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_n_maps)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the number of address maps this virtual register array is mapped in)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the number of address maps this virtual register array is mapped in</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: is_in_map
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::is_in_map)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Return TRUE if this virtual register array is in the specified address <i>map</i>)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Return TRUE if this virtual register array is in the specified address <i>map</i></p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_maps
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_maps)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns all of the address <i>maps</i> where this virtual register array is mapped)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns all of the address <i>maps</i> where this virtual register array is mapped</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_rights
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_rights)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the access rights of this virtual reigster array)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the access rights of this virtual reigster array</p><p>Returns &quot;RW&quot;, &quot;RO&quot; or &quot;WO&quot;. The access rights of a virtual register array is always &quot;RW&quot;, unless it is implemented in a shared memory with access restriction in a particular address map.</p><p>If no address map is specified and the memory is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued and &quot;RW&quot; is returned.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_access
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_access)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the access policy of the virtual register array when written and read via an address map.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the access policy of the virtual register array when written and read via an address map.</p><p>If the memory implementing the virtual register array is mapped in more than one address map, an address <i>map</i> must be specified. If access restrictions are present when accessing a memory through the specified address map, the access mode returned takes the access restrictions into account. For example, a read-write memory accessed through an address map with read-only restrictions would return &quot;RO&quot;.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_size
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_size)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the size of the virtual register array.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the size of the virtual register array.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_n_bytes
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_n_bytes)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the width, in bytes, of a virtual register.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the width, in bytes, of a virtual register.</p><p>The width of a virtual register is always a multiple of the width of the memory locations used to implement it. For example, a virtual register containing two 1-byte fields implemented in a memory with 4-bytes memory locations is 4-byte wide.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_n_memlocs
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_n_memlocs)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the number of memory locations used by a single virtual register.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the number of memory locations used by a single virtual register.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_incr
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_incr)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the number of memory locations between two individual virtual registers in the same array.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the number of memory locations between two individual virtual registers in the same array.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_fields
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_fields)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Return the virtual fields in this virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Return the virtual fields in this virtual register</p><p>Fills the specified array with the abstraction class for all of the virtual fields contained in this virtual register. Fields are ordered from least-significant position to most-significant position within the register.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_field_by_name
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_field_by_name)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Return the named virtual field in this virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Return the named virtual field in this virtual register</p><p>Finds a virtual field with the specified name in this virtual register and returns its abstraction class. If no fields are found, returns null.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_offset_in_memory
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_offset_in_memory)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the offset of a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the offset of a virtual register</p><p>Returns the base offset of the specified virtual register, in the overall address space of the memory that implements the virtual register array.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: get_address
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::get_address)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(FUNCTION)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Returns the base external physical address of a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Returns the base external physical address of a virtual register</p><p>Returns the base external physical address of the specified virtual reigster if accessed through the specified address <i>map</i>.</p><p>If no address map is specified and the memory implementing the virtual register array is mapped in only one address map, that address map is used. If the memory is mapped in more than one address map, the default address map of the parent block is used.</p><p>If an address map is specified and the memory is not mapped in the specified address map, an error message is issued.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: HDL Access
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(HDL Access)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(group)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Group)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary()
| | [uvm_vreg.svh] | [uvm_vreg] | | Body()
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: write
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::write)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Write the specified value in a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Write the specified value in a virtual register</p><p>Write <i>value</i> in the DUT memory location(s) that implements the virtual register array that corresponds to this abstraction class instance using the specified access <i>path</i>.</p><p>If the memory implementing the virtual register array is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p><p>The operation is eventually mapped into set of memory-write operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: read
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::read)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Read the current value from a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Read the current value from a virtual register</p><p>Read from the DUT memory location(s) that implements the virtual register array that corresponds to this abstraction class instance using the specified access <i>path</i> and return the readback <i>value</i>.</p><p>If the memory implementing the virtual register array is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p><p>The operation is eventually mapped into set of memory-read operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: poke
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::poke)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Deposit the specified value in a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Deposit the specified value in a virtual register</p><p>Deposit <i>value</i> in the DUT memory location(s) that implements the virtual register array that corresponds to this abstraction class instance using the memory backdoor access.</p><p>The operation is eventually mapped into set of memory-poke operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: peek
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::peek)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Sample the current value in a virtual register)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Sample the current value in a virtual register</p><p>Sample the DUT memory location(s) that implements the virtual register array that corresponds to this abstraction class instance using the memory backdoor access, and return the sampled <i>value</i>.</p><p>The operation is eventually mapped into set of memory-peek operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: reset
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::reset)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(function)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Function)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Reset the access semaphore)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Reset the access semaphore</p><p>Reset the semaphore that prevents concurrent access to the virtual register. This semaphore must be explicitly reset if a thread accessing this virtual register array was killed in before the access was completed</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: Callbacks
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(Callbacks)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(group)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(Group)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary()
| | [uvm_vreg.svh] | [uvm_vreg] | | Body()
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: pre_write
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::pre_write)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Called before virtual register write.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Called before virtual register write.</p><p>If the specified data value, access <i>path</i> or address <i>map</i> are modified, the updated data value, access path or address map will be used to perform the virtual register operation.</p><p>The registered callback methods are invoked after the invocation of this method. All register callbacks are executed after the corresponding field callbacks The pre-write virtual register and field callbacks are executed before the corresponding pre-write memory callbacks</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: post_write
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::post_write)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Called after virtual register write.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Called after virtual register write.</p><p>If the specified <i>status</i> is modified, the updated status will be returned by the virtual register operation.</p><p>The registered callback methods are invoked before the invocation of this method. All register callbacks are executed before the corresponding field callbacks The post-write virtual register and field callbacks are executed after the corresponding post-write memory callbacks</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: pre_read
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::pre_read)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Called before virtual register read.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Called before virtual register read.</p><p>If the specified access <i>path</i> or address <i>map</i> are modified, the updated access path or address map will be used to perform the register operation.</p><p>The registered callback methods are invoked after the invocation of this method. All register callbacks are executed after the corresponding field callbacks The pre-read virtual register and field callbacks are executed before the corresponding pre-read memory callbacks</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicTitle: post_read
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg] | | QualifiedName(uvm_pkg::uvm_vreg::post_read)
| | [uvm_vreg.svh] | [uvm_vreg] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg] | | Summary(Called after virtual register read.)
| | [uvm_vreg.svh] | [uvm_vreg] | | Body(<p>Called after virtual register read.</p><p>If the specified readback data or <i>status</i> is modified, the updated readback data or status will be returned by the register operation.</p><p>The registered callback methods are invoked before the invocation of this method. All register callbacks are executed before the corresponding field callbacks The post-read virtual register and field callbacks are executed after the corresponding post-read memory callbacks</p>)
| | [uvm_vreg.svh] | [uvm_vreg] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | TopicTitle: uvm_vreg_cbs
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| | [uvm_vreg.svh] | QualifiedName(uvm_pkg::uvm_vreg_cbs)
| | [uvm_vreg.svh] | TopicType(class)
| | [uvm_vreg.svh] | Keyword(Class)
| | [uvm_vreg.svh] | NumChilderen(4)
| | [uvm_vreg.svh] | Summary(Pre/post read/write callback facade class)
| | [uvm_vreg.svh] | Body(<p>Pre/post read/write callback facade class</p>)
| | [uvm_vreg.svh] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | | Children
| | [uvm_vreg.svh] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicTitle: pre_write
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_cbs::pre_write)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Keyword(Task)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Summary(Callback called before a write operation.)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Body(<p>Callback called before a write operation.</p><p>The registered callback methods are invoked after the invocation of the <link target="uvm_vreg::pre_write()" name="uvm_vreg::pre_write()" original="&lt; uvm_vreg::pre_write() &gt;"> method. All virtual register callbacks are executed after the corresponding virtual field callbacks The pre-write virtual register and field callbacks are executed before the corresponding pre-write memory callbacks</p><p>The written value <i>wdat</i>, access <i>path</i> and address <i>map</i>, if modified, modifies the actual value, access path or address map used in the virtual register operation.</p>)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicTitle: post_write
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_cbs::post_write)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Summary(Called after register write.)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Body(<p>Called after register write.</p><p>The registered callback methods are invoked before the invocation of the <link target="uvm_reg::post_write()" name="uvm_reg::post_write()" original="&lt; uvm_reg::post_write() &gt;"> method. All register callbacks are executed before the corresponding virtual field callbacks The post-write virtual register and field callbacks are executed after the corresponding post-write memory callbacks</p><p>The <i>status</i> of the operation, if modified, modifies the actual returned status.</p>)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicTitle: pre_read
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_cbs::pre_read)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Summary(Called before register read.)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Body(<p>Called before register read.</p><p>The registered callback methods are invoked after the invocation of the <link target="uvm_reg::pre_read()" name="uvm_reg::pre_read()" original="&lt; uvm_reg::pre_read() &gt;"> method. All register callbacks are executed after the corresponding virtual field callbacks The pre-read virtual register and field callbacks are executed before the corresponding pre-read memory callbacks</p><p>The access <i>path</i> and address <i>map</i>, if modified, modifies the actual access path or address map used in the register operation.</p>)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicTitle: post_read
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_cbs::post_read)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | TopicType(task)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Keyword(TASK)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | NumChilderen(0)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Summary(Called after register read.)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | | Body(<p>Called after register read.</p><p>The registered callback methods are invoked before the invocation of the <link target="uvm_reg::post_read()" name="uvm_reg::post_read()" original="&lt; uvm_reg::post_read() &gt;"> method. All register callbacks are executed before the corresponding virtual field callbacks The post-read virtual register and field callbacks are executed after the corresponding post-read memory callbacks</p><p>The readback value <i>rdat</i> and the <i>status</i> of the operation, if modified, modifies the actual returned readback value and status.</p>)
| | [uvm_vreg.svh] | [uvm_vreg_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg.svh] +-------------------------------------------------------------------
| +-------------------------------------------------------------------
| | DocFile: uvm_vreg_field.svh
| +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | TopicTitle: Virtual Register Field Classes
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | QualifiedName(Virtual Register Field Classes)
| | [uvm_vreg_field.svh] | TopicType(section)
| | [uvm_vreg_field.svh] | Keyword(Title)
| | [uvm_vreg_field.svh] | NumChilderen(0)
| | [uvm_vreg_field.svh] | Summary(This section defines the virtual field and callback classes.)
| | [uvm_vreg_field.svh] | Body(<p>This section defines the virtual field and callback classes.</p><p>A virtual field is set of contiguous bits in one or more memory locations. The semantics and layout of virtual fields comes from an agreement between the software and the hardware, not any physical structures in the DUT.</p>)
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | TopicTitle: uvm_vreg_field
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | QualifiedName(uvm_pkg::uvm_vreg_field)
| | [uvm_vreg_field.svh] | TopicType(class)
| | [uvm_vreg_field.svh] | Keyword(Class)
| | [uvm_vreg_field.svh] | NumChilderen(20)
| | [uvm_vreg_field.svh] | Summary(Virtual field abstraction class)
| | [uvm_vreg_field.svh] | Body(<p>Virtual field abstraction class</p><p>A virtual field represents a set of adjacent bits that are logically implemented in consecutive memory locations.</p>)
| | [uvm_vreg_field.svh] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | | Children
| | [uvm_vreg_field.svh] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: initialization
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(initialization)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: new
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::new)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Create a new virtual field instance)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Create a new virtual field instance</p><p>This method should not be used directly. The uvm_vreg_field::type_id::create() method should be used instead.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: configure
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::configure)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Instance-specific configuration)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Instance-specific configuration</p><p>Specify the <i>parent</i> virtual register of this virtual field, its <i>size</i> in bits, and the position of its least-significant bit within the virtual register relative to the least-significant bit of the virtual register.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: Introspection
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(Introspection)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_name
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(get_name)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Get the simple name)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Get the simple name</p><p>Return the simple object name of this virtual field</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_full_name
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::get_full_name)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Get the hierarchical name)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Get the hierarchical name</p><p>Return the hierarchal name of this virtual field The base of the hierarchical name is the root block.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_parent
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::get_parent)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(FUNCTION)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Get the parent virtual register)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Get the parent virtual register</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_lsb_pos_in_register
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::get_lsb_pos_in_register)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(FUNCTION)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Return the position of the virtual field / Returns the index of the least significant bit of the virtual field in the virtual register that instantiates it. )
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Return the position of the virtual field / Returns the index of the least significant bit of the virtual field in the virtual register that instantiates it. An offset of 0 indicates a field that is aligned with the least-significant bit of the register.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_n_bits
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::get_n_bits)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(FUNCTION)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Returns the width, in bits, of the virtual field.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Returns the width, in bits, of the virtual field.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: get_access
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::get_access)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(function)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(FUNCTION)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Returns the access policy of the virtual field register when written and read via an address map.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Returns the access policy of the virtual field register when written and read via an address map.</p><p>If the memory implementing the virtual field is mapped in more than one address map, an address <i>map</i> must be specified. If access restrictions are present when accessing a memory through the specified address map, the access mode returned takes the access restrictions into account. For example, a read-write memory accessed through an address map with read-only restrictions would return &quot;RO&quot;.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: HDL Access
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(HDL Access)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: write
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Write the specified value in a virtual field)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Write the specified value in a virtual field</p><p>Write <i>value</i> in the DUT memory location(s) that implements the virtual field that corresponds to this abstraction class instance using the specified access <i>path</i>.</p><p>If the memory implementing the virtual register array containing this virtual field is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p><p>The operation is eventually mapped into memory read-modify-write operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented. If a backdoor is available for the memory implemeting the virtual field, it will be used for the memory-read operation.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: read
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::read)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Read the current value from a virtual field)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Read the current value from a virtual field</p><p>Read from the DUT memory location(s) that implements the virtual field that corresponds to this abstraction class instance using the specified access <i>path</i>, and return the readback <i>value</i>.</p><p>If the memory implementing the virtual register array containing this virtual field is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p><p>The operation is eventually mapped into memory read operations at the location(s) where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: poke
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::poke)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Deposit the specified value in a virtual field)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Deposit the specified value in a virtual field</p><p>Deposit <i>value</i> in the DUT memory location(s) that implements the virtual field that corresponds to this abstraction class instance using the specified access <i>path</i>.</p><p>The operation is eventually mapped into memory peek-modify-poke operations at the location where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: peek
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::peek)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Sample the current value from a virtual field)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Sample the current value from a virtual field</p><p>Sample from the DUT memory location(s) that implements the virtual field that corresponds to this abstraction class instance using the specified access <i>path</i>, and return the readback <i>value</i>.</p><p>If the memory implementing the virtual register array containing this virtual field is mapped in more than one address map, an address <i>map</i> must be specified if a physical access is used (front-door access).</p><p>The operation is eventually mapped into memory peek operations at the location(s) where the virtual register specified by <i>idx</i> in the virtual register array is implemented.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: Callbacks
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(Callbacks)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(Group)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body()
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: pre_write
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::pre_write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Called before virtual field write.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Called before virtual field write.</p><p>If the specified data value, access <i>path</i> or address <i>map</i> are modified, the updated data value, access path or address map will be used to perform the virtual register operation.</p><p>The virtual field callback methods are invoked before the callback methods on the containing virtual register. The registered callback methods are invoked after the invocation of this method. The pre-write virtual register and field callbacks are executed before the corresponding pre-write memory callbacks</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: post_write
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::post_write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Called after virtual field write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Called after virtual field write</p><p>If the specified <i>status</i> is modified, the updated status will be returned by the virtual register operation.</p><p>The virtual field callback methods are invoked after the callback methods on the containing virtual register. The registered callback methods are invoked before the invocation of this method. The post-write virtual register and field callbacks are executed after the corresponding post-write memory callbacks</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: pre_read
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::pre_read)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Called before virtual field read.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Called before virtual field read.</p><p>If the specified access <i>path</i> or address <i>map</i> are modified, the updated access path or address map will be used to perform the virtual register operation.</p><p>The virtual field callback methods are invoked after the callback methods on the containing virtual register. The registered callback methods are invoked after the invocation of this method. The pre-read virtual register and field callbacks are executed before the corresponding pre-read memory callbacks</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicTitle: post_read
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | QualifiedName(uvm_pkg::uvm_vreg_field::post_read)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Summary(Called after virtual field read.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | | Body(<p>Called after virtual field read.</p><p>If the specified readback data <i>rdat</i> or <i>status</i> is modified, the updated readback data or status will be returned by the virtual register operation.</p><p>The virtual field callback methods are invoked after the callback methods on the containing virtual register. The registered callback methods are invoked before the invocation of this method. The post-read virtual register and field callbacks are executed after the corresponding post-read memory callbacks</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | TopicTitle: uvm_vreg_field_cbs
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | QualifiedName(uvm_pkg::uvm_vreg_field_cbs)
| | [uvm_vreg_field.svh] | TopicType(class)
| | [uvm_vreg_field.svh] | Keyword(Class)
| | [uvm_vreg_field.svh] | NumChilderen(4)
| | [uvm_vreg_field.svh] | Summary(Pre/post read/write callback facade class)
| | [uvm_vreg_field.svh] | Body(<p>Pre/post read/write callback facade class</p>)
| | [uvm_vreg_field.svh] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | | Children
| | [uvm_vreg_field.svh] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicTitle: pre_write
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_field_cbs::pre_write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Keyword(Task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Summary(Callback called before a write operation.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Body(<p>Callback called before a write operation.</p><p>The registered callback methods are invoked before the invocation of the virtual register pre-write callbacks and after the invocation of the <link target="uvm_vreg_field::pre_write()" name="uvm_vreg_field::pre_write()" original="&lt; uvm_vreg_field::pre_write() &gt;"> method.</p><p>The written value <i>wdat</i>, access <i>path</i> and address <i>map</i>, if modified, modifies the actual value, access path or address map used in the register operation.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicTitle: post_write
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_field_cbs::post_write)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Summary(Called after a write operation)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Body(<p>Called after a write operation</p><p>The registered callback methods are invoked after the invocation of the virtual register post-write callbacks and before the invocation of the <link target="uvm_vreg_field::post_write()" name="uvm_vreg_field::post_write()" original="&lt; uvm_vreg_field::post_write() &gt;"> method.</p><p>The <i>status</i> of the operation, if modified, modifies the actual returned status.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicTitle: pre_read
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_field_cbs::pre_read)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Summary(Called before a virtual field read.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Body(<p>Called before a virtual field read.</p><p>The registered callback methods are invoked after the invocation of the virtual register pre-read callbacks and after the invocation of the <link target="uvm_vreg_field::pre_read()" name="uvm_vreg_field::pre_read()" original="&lt; uvm_vreg_field::pre_read() &gt;"> method.</p><p>The access <i>path</i> and address <i>map</i>, if modified, modifies the actual access path or address map used in the register operation.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicTitle: post_read
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | QualifiedName(uvm_pkg::uvm_vreg_field_cbs::post_read)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | TopicType(task)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Keyword(TASK)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | NumChilderen(0)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Summary(Called after a virtual field read.)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | | Body(<p>Called after a virtual field read.</p><p>The registered callback methods are invoked after the invocation of the virtual register post-read callbacks and before the invocation of the <link target="uvm_vreg_field::post_read()" name="uvm_vreg_field::post_read()" original="&lt; uvm_vreg_field::post_read() &gt;"> method.</p><p>The readback value <i>rdat</i> and the <i>status</i> of the operation, if modified, modifies the actual returned readback value and status.</p>)
| | [uvm_vreg_field.svh] | [uvm_vreg_field_cbs] | +-------------------------------------------------------------------
| | [uvm_vreg_field.svh] +-------------------------------------------------------------------
