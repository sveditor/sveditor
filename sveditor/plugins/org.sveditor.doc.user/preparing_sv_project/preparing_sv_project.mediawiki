= Preparing a SystemVerilog Project =

SVEditor is project-centric, much as Eclipse is project-centric. SVEditor assumes that most of the SystemVerilog source being actively edited is contained within one or more Eclipse projects. External SystemVerilog source (eg libraries or frameworks such as OVM or VMM) can be referenced as project-external paths.

== Creating a Project ==
SVEditor does not have a special SystemVerilog project type, and will work within any Eclipse project. If the SystemVerilog source is already within an Eclipse project and imported to your workspace, you can skip to the following step.

In this example, we will create a project for the ‘xbus’ example from the OVM library (http://www.ovmworld.org). The first step is to open the ‘New Project wizard from the Eclipse main menu.

[[Image:imgs/new_project.gif|Opening the New Project Wizard]]

This will open an Eclipse dialog to select the type of project to create. In this case, we will use the ‘General Project’ type.

[[Image:imgs/new_project_dialog.gif]]

Select Next to move to the next page in the wizard where the project name and path are specified.

[[Image:imgs/new_project_name_paths.gif|Project Details]]

We name the project ‘xbus’ to match what it is named in the OVM source distribution. We un-check the ‘Use default location’ check-box and change the Location path to be the same as the xbus directory on the filesystem.

Next, select Finish to complete creation of the Eclipse project. The ‘xbus’ project is now shown in the Project Explorer and contains the existing source for the ‘xbus’ example.

[[Image:imgs/new_project_in_explorer.gif]]

== Setting Project Paths ==
At this point (setting up a basic project with no project paths specified), limited SystemVerilog indexing will be done. The structure of elements within a single file (classes, modules, etc) will be shown in the Outline view for the editor and content assist will be done for these elements. However, content assist and cross-referencing will not be done for other files in the project or referenced by the project.

In the xbus example, there are files within the same project that should be available for content assist and cross-referencing. The OVM library should also be used. We will specify these using the Project Properties dialog. Open the Project Properties dialog by selecting the project and selecting ‘Properties’ from the context menu.

[[Image:imgs/open_project_properties.gif|Open Project Properties Dialog]]

[[Image:imgs/project_properties_dialog.gif|Project Properties Dialog]]

Select the ‘SystemVerilog Project Properties’ section in the Project Properties dialog. This will show the tabs for configuring project paths. There are several types of project paths that can be specified.

* '''Source Collections –''' Allows a directory of sources to be specified. Because of the way that SystemVerilog encourages/enforces a single top-level compile unit (a package that includes files that define classes within the package), Source Collections are best used to specify directories of Verilog modules. 
* '''Library Paths –''' Allows SystemVerilog package files to be specified. These files then include other SystemVerilog sources.
* '''Arguments Files –''' Allows argument files (file lists) to be specified. Often, these are used to specify file compile orders, include paths, and pre-processor defines. Currently, Mentor Graphics Modelsim / Questa switches are accepted.

The xbus project provides an argument file for Questa. The argument file specifies the top-level package files to compile within the xbus project and the include paths that allow the package files to find included files.

[[Image:imgs/add_argument_file_path.gif|Adding an Argument File Path]]

Select the Argument Files tab, then select the ‘Add’ button. In the resulting dialog, select ‘Add Workspace Path’. Browse to xbus/example/compile_questa_sv.f and select ‘OK’. Select ‘OK’ in the Add Path dialog. 

Finally, select ‘OK’ in the Project Project dialog. Now, cross-referencing and content assist will work for all SystemVerilog files referenced by the argument file and for the OVM library.






