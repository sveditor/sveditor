
<project name="SVEditor Feature" default="build">
    <property environment="env"/>

    <!-- Import the version info -->
    <property file="${basedir}/../etc/sveditor.info"/>
    <property file="${basedir}/../etc/sveditor_${version_type}.info"/>
    <property file="${basedir}/../etc/packages.properties"/>
    <property file="${basedir}/build.properties"/>
	
	<include file="${basedir}/eclipse_utils.xml"/>

	<condition property="is_win">
		<os family="windows"/>
	</condition>
	
	<condition property="eclipse_build_win_zip"
		value="${basedir}/../packages/${eclipse_build_win32_x86_64_zip}"
		else="${basedir}/../packages/${eclipse_build_win32_zip}">
		<os arch="amd64"/>
	</condition>
		
    <condition property="sf_update_dir"
	value="update"
	else="update_testing">
	<equals arg1="${version_type}" arg2="release"/>
    </condition>

    <property name="eclipse.home" location="${env.ECLIPSE_HOME}"/>
	<condition property="eclipsec" 
		value="${env.ECLIPSE_HOME}/eclipsec" 
		else="${env.ECLIPSE_HOME}/eclipse">
		<os family="windows"/>
	</condition>
	
    <property name="feature.version" value="${version}"/>

    <!-- Options used by the Eclipse build -->
    <property name="buildId" value="${feature.version}"/>

    <!-- build.qualifier -->
	<!--
    <property name="configs" value="${os}, ${ws}, ${arch}"/>
      -->
    <property name="buildDirectory"   value="${basedir}/../build"/>
    <property name="buildResult"   value="${basedir}/../buildResult"/>

    <property name="srcdir" value="${basedir}/../sveditor"/>
    <property name="docs.dir" value="${srcdir}/docs"/>
    <property name="repository" value="${basedir}/../archive_tmp/repository"/>

    <taskdef name="xmltask"
        classname="com.oopsconsultancy.xmltask.ant.XmlTask">
      <classpath path="${basedir}/xmltask.jar"/>
    </taskdef>
	
	<target name="init">
		<delete dir="${buildDirectory}"/>
		<mkdir dir="${buildDirectory}"/>
        <mkdir dir="${buildResult}"/>
	</target>
	
	<target name="build" depends="init,mk_eclipse">
		<java fork="true" failonerror="true"
			classname="org.eclipse.core.launcher.Main">
			<classpath>
				<fileset dir="${buildDirectory}/eclipse_sdk/eclipse/plugins"
					includes="org.eclipse.equinox.launcher_*.jar"/>
			</classpath>
			<arg value="-application"/>
			<arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-data"/>
			<arg value="${buildDirectory}/ws2"/>
			<arg value="-buildfile"/>
			<arg value="${basedir}/build.xml"/>
			<arg value="build_core"/>
			<arg value="-Dos=${os}"/>
			<arg value="-Dws=${ws}"/>
			<arg value="-Darch=${arch}"/>
		</java>
		<delete dir="${buildDirectory}"/>
	</target>


	
	<target name="mk_eclipse" depends="linux_unpack_eclipse,windows_unpack_eclipse">
		<mkdir dir="${buildDirectory}/zest"/>
		<unzip dest="${buildDirectory}/zest" 
			src="${basedir}/../packages/${zest_zip}"/>
		<install installIU="org.eclipse.gef.feature.group,
			org.eclipse.draw2d.feature.group,
			org.eclipse.zest.feature.group"
			tag="AddZEST"
			repository="file://${buildDirectory}/zest"
			eclipseHome="${buildDirectory}/eclipse_sdk/eclipse"
			dest="${buildDirectory}/eclipse_sdk/eclipse"/>		
	</target>
		
	
	<target name="linux_unpack_eclipse" unless="is_win">
	<!-- TODO -->
	</target>
	
	<target name="windows_unpack_eclipse" if="is_win">
		<mkdir dir="${buildDirectory}/eclipse_sdk"/>
		<unzip dest="${buildDirectory}/eclipse_sdk"
			src="${eclipse_build_win_zip}"></unzip>
	</target>
		
       
	<!--
	  This target is executed under the 'build' eclipse installation
	  -->
    <target name="build_core" depends="compile,mkarchive">
    </target>

    <target name="mk_rn">
        <mkdir dir="${rlsdir}"/>
        <exec executable="perl" output="${buildResult}/rn.txt">
            <arg value="${basedir}/mk_rn.pl"/>
            <arg value="${feature.version}"/>
            <arg value="${basedir}/../ChangeLog.txt"/>
        </exec>
    </target>

    <target name="compile"> 
    	<echo message="==&gt; Compile"/>
    	<!--
        <delete dir="${buildDirectory}"/>
        <mkdir dir="${buildDirectory}"/>
          -->

        <copy todir="${buildDirectory}">
            <fileset dir="${srcdir}">
                <include name="plugins/**"/>
                <include name="features/**"/>
                <exclude name="**/*.svn/**"/>
                <exclude name="**/*.git/**"/>
            </fileset>
        </copy>

        <copy todir="${buildDirectory}" overwrite="true">
            <fileset dir="${srcdir}" 
                includes="features/**/*.xml, plugins/**/*.xml, plugins/**/*.MF, plugins/**/*.properties"/>
            <filterset begintoken="1" endtoken="3">
                <filter token=".2." value="${feature.version}"/>
            </filterset>
        </copy>

        <antcall target="build_feature">
            <param name="feature.id" value="net.sf.sveditor.core.feature"/>
        </antcall>
    	
        <antcall target="build_feature">
            <param name="feature.id" value="net.sf.sveditor.ui.feature"/>
        </antcall>

        <antcall target="build_feature">
            <param name="feature.id" value="net.sf.sveditor"/>
        </antcall>
    	<echo message="&lt;== Compile"/>
    </target>

    <target name="build_feature">
    	<echo message="==&gt; build_feature id=${feature.id}"/>
    	<echo message="==&gt; buildScript type=${type} id=${feature.id}"/>
        <eclipse.buildScript
            elements="${type}@${feature.id}"
            buildDirectory="${buildDirectory}"
            baseLocation="${eclipse.home}"
            configInfo="${os},${ws},${arch}"
            forceContextQualifier="${forceContextQualifier}"
            generateFeatureVersionSuffix="true"/>
    	<echo message="&lt;== buildScript type=${type} id=${feature.id}"/>

    	<echo message="==&gt; build.xml type=${type} id=${feature.id}"/>
        <ant antfile="${buildDirectory}/features/${feature.id}/build.xml"
            dir="${buildDirectory}/features/${feature.id}"
            target="build.jars"/>
    	<echo message="&lt;== build.xml type=${type} id=${feature.id}"/>
        <ant antfile="${buildDirectory}/assemble.${feature.id}.${os}.${ws}.${arch}.xml"
             dir="${buildDirectory}"/>
		<copy tofile="${buildResult}/sveditor-feature-${feature.version}.zip"
			file="${buildDirectory}/${feature.id}-${feature.version}-${os}.${ws}.${arch}.zip"/>
    	<echo message="&lt;== build_feature id=${feature.id}"/>
    </target>


    <!-- ************************************************************
         * mkarchive
         *
         * Build an archived update site of the release
         ************************************************************ -->
    <target name="mkarchive">
        <delete dir="${basedir}/../archive_tmp"/>
        <mkdir dir="${basedir}/../archive_tmp"/>
        <mkdir dir="${basedir}/../archive_tmp/features"/>
        <mkdir dir="${basedir}/../archive_tmp/plugins"/>

        <ant antfile="${buildDirectory}/features/${feature.id}/build.xml"
            dir="${buildDirectory}/features/${feature.id}"
            target="build.update.jar">
            <property name="feature.destination" value="${basedir}/../archive_tmp/features"/>
            <property name="plugin.destination" value="${basedir}/../archive_tmp/plugins"/>
        </ant>

        <copy todir="${basedir}/../archive_tmp">
            <fileset dir="${srcdir}/features/${feature.id}">
                <include name="misplaced_category.xml"/>
            </fileset>
            <filterset begintoken="1" endtoken="3">
                <filter token=".2." value="${feature.version}"/>
            </filterset>
        </copy>

        <!-- Create the P2 repository -->
        <p2.publish.featuresAndBundles
            metadataRepository="file:${repository}"
            artifactRepository="file:${repository}"
            publishArtifacts="true"
            compress="false"
            source="${basedir}/../archive_tmp"/>

        <!-- Categorize the items in the repository -->
	<java fork="true" classname="org.eclipse.core.launcher.Main">
		<classpath>
			<fileset dir="${eclipse.home}/plugins"
				includes="org.eclipse.equinox.launcher_*.jar"/>
		</classpath>
		<!--
            <arg value="-console"/>
            <arg value="-consoleLog"/>
	    <arg value="-nosplash"/>
		-->
            <arg value="-application"/>
            <arg value="org.eclipse.equinox.p2.publisher.CategoryPublisher"/>
            <arg value="-metadataRepository"/>
            <arg value="file:/${repository}"/>
            <arg value="-categoryDefinition"/>
            <arg value="file:/${basedir}/../archive_tmp/misplaced_category.xml"/>
            <arg value="-categoryQualifier"/>
        </java>

        <xmltask source="${repository}/artifacts.xml"
                 dest="${repository}/artifacts_1.xml">
        	<replace path="/repository/@name" 
			withText="http://sveditor.sourceforge.net/${sf_update_dir}"/>
        </xmltask>

        <move file="${repository}/artifacts_1.xml"
              tofile="${repository}/artifacts.xml"/>

        <xmltask source="${repository}/content.xml"
                 dest="${repository}/content_1.xml">
        	<replace path="/repository/@name" 
			withText="http://sveditor.sourceforge.net/${sf_update_dir}"/>
        </xmltask>

        <move file="${repository}/content_1.xml"
              tofile="${repository}/content.xml"/>


        <jar destfile="${buildResult}/sveditor-${feature.version}.jar"
             basedir="${repository}"
             includes="*.xml, features/**, plugins/**"/>

	<copy todir="${basedir}/../archive_tmp" overwrite="true">
		<fileset dir="${basedir}/../etc" includes="mappings_${version_type}.xml"/>
		<filterset begintoken="1" endtoken="3">
			<filter token=".2." value="${feature.version}"/>
		</filterset>
	</copy>

        <xmltask source="${basedir}/../archive_tmp/mappings_${version_type}.xml">
            <copy path="/repository/mappings" 
                  buffer="artifacts_mappings"/>
        </xmltask>
                  
        <xmltask source="${repository}/artifacts.xml"
                 dest="${repository}/artifacts_1.xml">
            <remove path="/repository/mappings"/>
            <insert path="/repository/properties" position="after"
                file="${basedir}/../archive_tmp/mappings_${version_type}.xml"/>
        </xmltask>

        <move file="${repository}/artifacts_1.xml"
              tofile="${repository}/artifacts.xml"/>

        <zip destfile="${repository}/artifacts.jar"
             basedir="${repository}" includes="artifacts.xml"/>
        <zip destfile="${repository}/content.jar"
             basedir="${repository}" includes="content.xml"/>
        <delete>
            <fileset dir="${repository}" includes="*.xml"/>
        </delete>

	<zip destfile="${buildResult}/sveditor-release-${feature.version}.zip">
		<fileset dir="${repository}">
			<include name="*.jar"/>
			<include name="features/**"/>
			<include name="plugins/**"/>
		</fileset>
	</zip>

        <delete dir="${basedir}/../archive_tmp"/>
    </target>

</project>


